/******/ (() => { // webpackBootstrap
/******/ 	var __webpack_modules__ = ({

/***/ "./node_modules/css-loader/dist/cjs.js!./node_modules/sass-loader/dist/cjs.js!./src/styles/sass/main.sass":
/*!****************************************************************************************************************!*\
  !*** ./node_modules/css-loader/dist/cjs.js!./node_modules/sass-loader/dist/cjs.js!./src/styles/sass/main.sass ***!
  \****************************************************************************************************************/
/***/ ((module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _node_modules_css_loader_dist_runtime_sourceMaps_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../../node_modules/css-loader/dist/runtime/sourceMaps.js */ "./node_modules/css-loader/dist/runtime/sourceMaps.js");
/* harmony import */ var _node_modules_css_loader_dist_runtime_sourceMaps_js__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_node_modules_css_loader_dist_runtime_sourceMaps_js__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var _node_modules_css_loader_dist_runtime_api_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../../node_modules/css-loader/dist/runtime/api.js */ "./node_modules/css-loader/dist/runtime/api.js");
/* harmony import */ var _node_modules_css_loader_dist_runtime_api_js__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(_node_modules_css_loader_dist_runtime_api_js__WEBPACK_IMPORTED_MODULE_1__);
// Imports


var ___CSS_LOADER_EXPORT___ = _node_modules_css_loader_dist_runtime_api_js__WEBPACK_IMPORTED_MODULE_1___default()((_node_modules_css_loader_dist_runtime_sourceMaps_js__WEBPACK_IMPORTED_MODULE_0___default()));
// Module
___CSS_LOADER_EXPORT___.push([module.id, `.bigcrunch-unit.bigcrunch-unit-sticky {
  position: fixed;
}

.bigcrunch-unit.collapsed {
  max-height: 0px !important;
}

.bigcrunch-unit.expanded {
  max-height: 1000px;
}

.bigcrunch-unit.bigcrunch-outstream-wrapper {
  position: relative;
  display: block;
  z-index: 100000;
  width: 300px;
  aspect-ratio: 16/9;
  margin-bottom: 10px;
  background: black;
}
.bigcrunch-unit.bigcrunch-outstream-wrapper.expandable {
  -webkit-transition: max-height 0.75s ease-in-out;
  transition: max-height 0.75s ease-in-out;
  overflow: hidden;
  max-height: 1000px;
}
.bigcrunch-unit.bigcrunch-outstream-wrapper #ad-container > div {
  width: 100%;
  height: 100%;
}
.bigcrunch-unit.bigcrunch-outstream-wrapper video {
  position: absolute;
}
.bigcrunch-unit.bigcrunch-outstream-wrapper:hover #control_bar {
  opacity: 1;
}
.bigcrunch-unit.bigcrunch-outstream-wrapper #control_bar {
  height: 43px;
  background-image: linear-gradient(180deg, rgba(255, 255, 255, 0), rgba(0, 0, 0, 0.56));
  bottom: -1px;
  opacity: 0;
  position: absolute;
  -webkit-transition: opacity 0.5s ease-in-out;
  transition: opacity 0.3s ease-in-out;
  width: 100%;
  z-index: 4;
  right: 0;
  left: 0;
}
.bigcrunch-unit.bigcrunch-outstream-wrapper #control_bar .top-progress-bar {
  left: 15px;
  position: absolute;
  top: 0px;
  width: calc(100% - 30px);
  z-index: 9;
}
.bigcrunch-unit.bigcrunch-outstream-wrapper #control_bar .top-progress-bar #progress_bar {
  -webkit-appearance: none;
  background: none;
  background-color: rgba(222, 222, 222, 0.7019607843);
  background-image: -webkit-gradient(linear, 50% 0, 50% 100%, color-stop(0, #ef2b1d), color-stop(100%, #ef2b1d));
  background-repeat: no-repeat;
  background-size: 0% 100%;
  cursor: pointer;
  display: block;
  height: 4px;
  margin: 0;
  padding: 0;
  width: 100%;
  transition: height 0.3s ease-in-out;
}
.bigcrunch-unit.bigcrunch-outstream-wrapper #control_bar .top-progress-bar #progress_bar:hover::-webkit-slider-thumb {
  opacity: 1;
  visibility: visible;
}
.bigcrunch-unit.bigcrunch-outstream-wrapper #control_bar .top-progress-bar #progress_bar::-webkit-slider-thumb {
  -webkit-appearance: none;
  visibility: hidden;
  opacity: 0;
  width: 14px;
  height: 14px;
  border-radius: 50px;
  background: #ef2b1d;
  margin-left: -2px;
  transition: opacity 0.3s ease-in-out;
}
.bigcrunch-unit.bigcrunch-outstream-wrapper #control_bar .bottom-controls {
  bottom: 2px;
  display: flex;
  height: 36px;
  justify-content: space-between;
  position: absolute;
  width: 100%;
}
.bigcrunch-unit.bigcrunch-outstream-wrapper #control_bar .bottom-controls .left-group {
  align-items: center;
  display: flex;
  height: 100%;
}
.bigcrunch-unit.bigcrunch-outstream-wrapper #control_bar .bottom-controls button {
  align-items: center;
  background: transparent;
  border: none;
  color: #fff;
  cursor: pointer;
  display: flex;
  font-size: 16px;
  height: 30px;
  justify-content: center;
  opacity: 0.8;
  padding: 0;
  width: 30px;
}
.bigcrunch-unit.bigcrunch-outstream-wrapper #control_bar .bottom-controls button#play_button {
  margin: 0 8px 0 14px;
}
.bigcrunch-unit.bigcrunch-outstream-wrapper #control_bar .bottom-controls button:hover {
  opacity: 1;
}
.bigcrunch-unit.bigcrunch-outstream-wrapper #control_bar .bottom-controls button svg {
  width: 15px;
  height: 15px;
}
.bigcrunch-unit.bigcrunch-outstream-wrapper #control_bar #right-group {
  align-items: center;
  display: flex;
  margin-right: 14px;
  padding-right: 30px;
}
.bigcrunch-unit.bigcrunch-outstream-wrapper #control_bar #time span {
  color: #fff;
  opacity: 0.8;
  font-size: 13px;
}
.bigcrunch-unit.bigcrunch-outstream-wrapper #time_progress_finish_top {
  color: #fff;
  opacity: 0.8;
  font-size: 15px;
  top: 0px;
  padding: 8px;
  position: absolute;
  background: rgba(0, 0, 0, 0.5);
}
.bigcrunch-unit.bigcrunch-outstream-wrapper #volume-group {
  bottom: 11px;
  line-height: normal;
  position: absolute;
  right: 18px;
  z-index: 5;
  display: flex;
  align-items: center;
}
.bigcrunch-unit.bigcrunch-outstream-wrapper #volume-group button {
  background: transparent;
  border: none;
  color: #fff;
  cursor: pointer;
  padding: 0;
  width: 20px;
  height: 18px;
}
.bigcrunch-unit.bigcrunch-outstream-wrapper #volume-group button svg {
  height: 18px;
  width: 18px;
}
.bigcrunch-unit.bigcrunch-outstream-wrapper #volume-group button.mute_icon {
  height: 14px;
  margin-right: 2px;
  margin-top: 2px;
}
.bigcrunch-unit.bigcrunch-outstream-wrapper #volume-group input {
  -webkit-appearance: none;
  background: #fff;
  bottom: 70px;
  cursor: pointer;
  height: 3px;
  opacity: 0;
  padding: 0;
  position: absolute;
  right: -29px;
  transform: rotate(-90deg);
  transition: visibility 0.5s, opacity 0.5s linear;
  vertical-align: middle;
  visibility: hidden;
  width: 75px;
}
.bigcrunch-unit.bigcrunch-outstream-wrapper #volume-group input::-webkit-slider-thumb {
  -webkit-appearance: none;
  width: 12px;
  height: 12px;
  border-radius: 50px;
  background: #ef2b1d;
  margin-right: -3px;
}
.bigcrunch-unit.bigcrunch-outstream-wrapper #volume-group:hover input {
  opacity: 1;
  visibility: visible;
}
.bigcrunch-unit.bigcrunch-outstream-wrapper #overlay_container {
  width: 100%;
  background-image: linear-gradient(180deg, rgba(255, 255, 255, 0), #000);
  position: absolute;
  top: 0;
  bottom: 0;
  left: 0;
  right: 0;
  display: flex;
  align-items: center;
  z-index: 4;
  justify-content: center;
  cursor: pointer;
  -webkit-transition: opacity 0.5s ease-in-out;
  transition: opacity 0.3s ease-in-out;
  opacity: 0;
}
.bigcrunch-unit.bigcrunch-outstream-wrapper #overlay_container svg {
  width: 50px;
  height: 50px;
  color: white;
}
.bigcrunch-unit.bigcrunch-outstream-wrapper:hover {
  opacity: 1;
}
.bigcrunch-unit.bigcrunch-outstream-wrapper:hover #title_container {
  opacity: 1;
}

@media (min-width: 941px) {
  .bigcrunch-unit .close-btn-group {
    display: none;
  }
}
@media (max-width: 940px) {
  .bigcrunch-unit.bigcrunch-outstream-wrapper {
    display: flex;
    justify-content: center;
    align-items: center;
    position: fixed !important;
    bottom: 0px !important;
    right: 0 !important;
    width: 100%;
    left: 0;
    margin-bottom: 0px;
    background-color: rgba(255, 255, 255, 0.8705882353);
    background-image: url(https://snopes.com/favicon-32x32.png), linear-gradient(rgba(255, 255, 255, 0.5), rgba(255, 255, 255, 0.5));
    background-blend-mode: overlay;
    background-repeat: repeat, repeat;
    border-top: 5px solid #fbd458;
    border-left: 5px solid #fbd458;
    border-right: 5px solid #fbd458;
    border-radius: 25px 25px 0px 0px;
    aspect-ratio: unset;
  }
  .bigcrunch-unit.bigcrunch-outstream-wrapper .bigcrunch-video-wrapper {
    width: 200px;
    aspect-ratio: 16/9;
    position: relative;
    left: 0;
    right: 0;
  }
  .bigcrunch-unit.bigcrunch-outstream-wrapper .bigcrunch-video-meta {
    width: 50%;
    min-width: 200px;
    position: relative;
    padding: 0px 10px;
    display: none;
  }
  .bigcrunch-unit.bigcrunch-outstream-wrapper .bigcrunch-video-title {
    font-weight: bold;
    margin: 0.2rem 0px;
    display: none;
  }
  .bigcrunch-unit.bigcrunch-outstream-wrapper .bigcrunch-video-description {
    color: gray;
    font-size: small;
    -webkit-line-clamp: 4;
    -webkit-box-orient: vertical;
    overflow: hidden;
    margin: 0.1rem;
    display: none;
  }
  .bigcrunch-unit.bigcrunch-outstream-wrapper .bigcrunch-video-wrapper #volume-group:hover input {
    display: none;
  }
  .bigcrunch-unit.bigcrunch-outstream-wrapper .close-btn-group {
    display: none;
    align-items: center;
    cursor: pointer;
    justify-content: center;
    position: fixed;
    right: 15px;
    bottom: 85px;
    width: 20px;
    height: 20px;
  }
  .bigcrunch-unit.bigcrunch-outstream-wrapper .close-btn-group svg {
    color: black;
    height: 90%;
    width: 90%;
  }
}
.bigcrunch-unit:not(.bigcrunch-outstream-wrapper) {
  text-align: center;
}`, "",{"version":3,"sources":["webpack://./src/styles/sass/_outstreamStyle.sass","webpack://./src/styles/sass/main.sass"],"names":[],"mappings":"AACA;EACI,eAAA;ACAJ;;ADEA;EACI,0BAAA;ACCJ;;ADCA;EACI,kBAAA;ACEJ;;ADAA;EAGI,kBAAA;EACA,cAAA;EACA,eAAA;EACA,YAAA;EACA,kBAAA;EACA,mBAAA;EACA,iBAAA;ACCJ;ADCI;EACI,gDAAA;EACA,wCAAA;EACA,gBAAA;EACA,kBAAA;ACCR;ADEQ;EACI,WAAA;EACA,YAAA;ACAZ;ADEI;EACI,kBAAA;ACAR;ADGQ;EACI,UAAA;ACDZ;ADGI;EACI,YAAA;EACA,sFAAA;EACA,YAAA;EACA,UAAA;EACA,kBAAA;EACA,4CAAA;EACA,oCAAA;EACA,WAAA;EACA,UAAA;EACA,QAAA;EACA,OAAA;ACDR;ADGQ;EACI,UAAA;EACA,kBAAA;EACA,QAAA;EACA,wBAAA;EACA,UAAA;ACDZ;ADIY;EACI,wBAAA;EACA,gBAAA;EACA,mDAAA;EACA,8GAAA;EACA,4BAAA;EACA,wBAAA;EACA,eAAA;EACA,cAAA;EACA,WAAA;EACA,SAAA;EACA,UAAA;EACA,WAAA;EACA,mCAAA;ACFhB;ADIgB;EACI,UAAA;EACA,mBAAA;ACFpB;ADIgB;EACI,wBAAA;EACA,kBAAA;EACA,UAAA;EACA,WAAA;EACA,YAAA;EACA,mBAAA;EACA,mBAAA;EACA,iBAAA;EACA,oCAAA;ACFpB;ADIQ;EACI,WAAA;EACA,aAAA;EACA,YAAA;EACA,8BAAA;EACA,kBAAA;EACA,WAAA;ACFZ;ADIY;EACI,mBAAA;EACA,aAAA;EACA,YAAA;ACFhB;ADIY;EACI,mBAAA;EACA,uBAAA;EACA,YAAA;EACA,WAAA;EACA,eAAA;EACA,aAAA;EACA,eAAA;EACA,YAAA;EACA,uBAAA;EACA,YAAA;EACA,UAAA;EACA,WAAA;ACFhB;ADIgB;EACI,oBAAA;ACFpB;ADIgB;EACI,UAAA;ACFpB;ADIgB;EACI,WAAA;EACA,YAAA;ACFpB;ADIQ;EACI,mBAAA;EACA,aAAA;EACA,kBAAA;EACA,mBAAA;ACFZ;ADKQ;EACI,WAAA;EACA,YAAA;EACA,eAAA;ACHZ;ADKI;EACI,WAAA;EACA,YAAA;EACA,eAAA;EACA,QAAA;EACA,YAAA;EACA,kBAAA;EACA,8BAAA;ACHR;ADKI;EACI,YAAA;EACA,mBAAA;EACA,kBAAA;EACA,WAAA;EACA,UAAA;EACA,aAAA;EACA,mBAAA;ACHR;ADKQ;EACI,uBAAA;EACA,YAAA;EACA,WAAA;EACA,eAAA;EACA,UAAA;EACA,WAAA;EACA,YAAA;ACHZ;ADKY;EACI,YAAA;EACA,WAAA;ACHhB;ADKY;EACI,YAAA;EACA,iBAAA;EACA,eAAA;ACHhB;ADKQ;EACI,wBAAA;EACA,gBAAA;EACA,YAAA;EACA,eAAA;EACA,WAAA;EACA,UAAA;EACA,UAAA;EACA,kBAAA;EACA,YAAA;EACA,yBAAA;EACA,gDAAA;EACA,sBAAA;EACA,kBAAA;EACA,WAAA;ACHZ;ADKY;EACI,wBAAA;EACA,WAAA;EACA,YAAA;EACA,mBAAA;EACA,mBAAA;EACA,kBAAA;ACHhB;ADKQ;EACI,UAAA;EACA,mBAAA;ACHZ;ADKI;EACI,WAAA;EACA,uEAAA;EACA,kBAAA;EACA,MAAA;EACA,SAAA;EACA,OAAA;EACA,QAAA;EACA,aAAA;EACA,mBAAA;EACA,UAAA;EACA,uBAAA;EACA,eAAA;EACA,4CAAA;EACA,oCAAA;EACA,UAAA;ACHR;ADKQ;EACI,WAAA;EACA,YAAA;EACA,YAAA;ACHZ;ADKI;EACI,UAAA;ACHR;ADKQ;EACI,UAAA;ACHZ;;ADMA;EAEQ;IACI,aAAA;ECJV;AACF;ADOA;EACI;IACI,aAAA;IACA,uBAAA;IACA,mBAAA;IACA,0BAAA;IACA,sBAAA;IACA,mBAAA;IACA,WAAA;IACA,OAAA;IACA,kBAAA;IACA,mDAAA;IAEA,gIAAA;IACA,8BAAA;IACA,iCAAA;IACA,6BAAA;IACA,8BAAA;IACA,+BAAA;IACA,gCAAA;IACA,mBAAA;ECNN;EDQM;IACI,YAAA;IACA,kBAAA;IACA,kBAAA;IACA,OAAA;IACA,QAAA;ECNV;EDQM;IACI,UAAA;IACA,gBAAA;IACA,kBAAA;IACA,iBAAA;IACA,aAAA;ECNV;EDQM;IACI,iBAAA;IACA,kBAAA;IACA,aAAA;ECNV;EDQM;IACI,WAAA;IACA,gBAAA;IACA,qBAAA;IACA,4BAAA;IACA,gBAAA;IACA,cAAA;IACA,aAAA;ECNV;EDQM;IACI,aAAA;ECNV;EDSM;IACI,aAAA;IACA,mBAAA;IACA,eAAA;IACA,uBAAA;IACA,eAAA;IACA,WAAA;IACA,YAAA;IACA,WAAA;IACA,YAAA;ECPV;EDSU;IACI,YAAA;IACA,WAAA;IACA,UAAA;ECPd;AACF;AA1SI;EACI,kBAAA;AA4SR","sourcesContent":["\n.bigcrunch-unit.bigcrunch-unit-sticky\n    position: fixed\n\n.bigcrunch-unit.collapsed\n    max-height: 0px !important\n\n.bigcrunch-unit.expanded\n    max-height: 1000px\n\n.bigcrunch-unit.bigcrunch-outstream-wrapper\n    // position: fixed\n    // bottom: 0px\n    position: relative\n    display: block\n    z-index: 100000\n    width: 300px\n    aspect-ratio: 16/9\n    margin-bottom: 10px\n    background: black\n\n    &.expandable\n        -webkit-transition: max-height .75s ease-in-out\n        transition: max-height .75s ease-in-out\n        overflow: hidden\n        max-height: 1000px\n\n    #ad-container \n        > div\n            width: 100%\n            height: 100%\n\n    video\n        position: absolute\n\n    &:hover \n        #control_bar\n            opacity: 1\n\n    #control_bar\n        height: 43px\n        background-image: linear-gradient(180deg, rgba(255, 255, 255, 0), rgba(0, 0, 0, .56))\n        bottom: -1px\n        opacity: 0\n        position: absolute\n        -webkit-transition: opacity 0.5s ease-in-out\n        transition: opacity 0.3s ease-in-out\n        width: 100%\n        z-index: 4\n        right: 0\n        left: 0        \n\n        .top-progress-bar\n            left: 15px\n            position: absolute\n            top: 0px\n            width: calc(100% - 30px)\n            z-index: 9\n\n        .top-progress-bar \n            #progress_bar\n                -webkit-appearance: none\n                background: none\n                background-color: #dededeb3\n                background-image: -webkit-gradient(linear, 50% 0, 50% 100%, color-stop(0, #ef2b1d), color-stop(100%, #ef2b1d))\n                background-repeat: no-repeat\n                background-size: 0% 100%\n                cursor: pointer\n                display: block\n                height: 4px\n                margin: 0\n                padding: 0\n                width: 100%\n                transition: height 0.3s ease-in-out\n\n                &:hover::-webkit-slider-thumb\n                    opacity: 1\n                    visibility: visible\n\n                &::-webkit-slider-thumb\n                    -webkit-appearance: none\n                    visibility: hidden\n                    opacity: 0\n                    width: 14px\n                    height: 14px\n                    border-radius: 50px\n                    background: #ef2b1d\n                    margin-left: -2px\n                    transition: opacity 0.3s ease-in-out\n\n        .bottom-controls\n            bottom: 2px\n            display: flex\n            height: 36px\n            justify-content: space-between\n            position: absolute\n            width: 100%\n\n            .left-group\n                align-items: center\n                display: flex\n                height: 100%\n            \n            button\n                align-items: center\n                background: transparent\n                border: none\n                color: #fff\n                cursor: pointer\n                display: flex\n                font-size: 16px\n                height: 30px\n                justify-content: center\n                opacity: 0.8\n                padding: 0\n                width: 30px\n\n                &#play_button\n                    margin: 0 8px 0 14px\n                \n                &:hover\n                    opacity: 1\n\n                svg\n                    width: 15px\n                    height: 15px\n\n        #right-group\n            align-items: center\n            display: flex\n            margin-right: 14px\n            padding-right: 30px\n\n        \n        #time span\n            color: #fff\n            opacity: 0.8\n            font-size: 13px\n\n    #time_progress_finish_top\n        color: #fff\n        opacity: 0.8\n        font-size: 15px\n        top: 0px\n        padding: 8px\n        position: absolute\n        background: rgb(0 0 0 / 50%)\n\n    #volume-group\n        bottom: 11px\n        line-height: normal\n        position: absolute\n        right: 18px\n        z-index: 5\n        display: flex\n        align-items: center\n\n        button\n            background: transparent\n            border: none\n            color: #fff\n            cursor: pointer\n            padding: 0\n            width: 20px\n            height: 18px\n\n            svg\n                height: 18px\n                width: 18px\n\n            &.mute_icon\n                height: 14px\n                margin-right: 2px\n                margin-top: 2px\n\n        input\n            -webkit-appearance: none\n            background: #fff\n            bottom: 70px\n            cursor: pointer\n            height: 3px\n            opacity: 0\n            padding: 0\n            position: absolute\n            right: -29px\n            transform: rotate(-90deg)\n            transition: visibility 0.5s, opacity 0.5s linear\n            vertical-align: middle\n            visibility: hidden\n            width: 75px\n\n            &::-webkit-slider-thumb\n                -webkit-appearance: none\n                width: 12px\n                height: 12px\n                border-radius: 50px\n                background: #ef2b1d\n                margin-right: -3px\n\n        &:hover input\n            opacity: 1\n            visibility: visible\n\n    #overlay_container\n        width: 100%\n        background-image: linear-gradient(180deg, rgba(255, 255, 255, 0), #000)\n        position: absolute\n        top: 0\n        bottom: 0\n        left: 0\n        right: 0\n        display: flex\n        align-items: center\n        z-index: 4\n        justify-content: center\n        cursor: pointer\n        -webkit-transition: opacity 0.5s ease-in-out\n        transition: opacity 0.3s ease-in-out\n        opacity: 0\n\n        svg\n            width: 50px\n            height: 50px\n            color: white\n\n    &:hover\n        opacity: 1\n\n        #title_container\n            opacity: 1\n\n\n@media(min-width: 941px)\n    .bigcrunch-unit \n        .close-btn-group\n            display: none\n    \n\n\n@media(max-width: 940px)\n    .bigcrunch-unit.bigcrunch-outstream-wrapper\n        display: flex\n        justify-content: center\n        align-items: center\n        position: fixed !important\n        bottom: 0px !important\n        right: 0 !important\n        width: 100%\n        left: 0\n        margin-bottom: 0px\n        background-color: #ffffffde\n        // background-image: radial-gradient(white 50%, rgb(255 255 255 / 0%))\n        background-image: url(https://snopes.com/favicon-32x32.png), linear-gradient(rgb(255 255 255 / 50%), rgb(255 255 255 / 50%))\n        background-blend-mode: overlay\n        background-repeat: repeat, repeat\n        border-top: 5px solid #fbd458\n        border-left: 5px solid #fbd458\n        border-right: 5px solid #fbd458\n        border-radius: 25px 25px 0px 0px\n        aspect-ratio: unset\n\n        .bigcrunch-video-wrapper\n            width: 200px\n            aspect-ratio: 16/9\n            position: relative\n            left: 0\n            right: 0\n        \n        .bigcrunch-video-meta\n            width: 50%\n            min-width: 200px\n            position: relative\n            padding: 0px 10px\n            display: none\n\n        .bigcrunch-video-title \n            font-weight: bold\n            margin: 0.2rem 0px\n            display: none\n\n        .bigcrunch-video-description\n            color: gray\n            font-size: small\n            -webkit-line-clamp: 4\n            -webkit-box-orient: vertical\n            overflow: hidden\n            margin: 0.1rem\n            display: none\n\n        .bigcrunch-video-wrapper #volume-group:hover input\n            display: none\n    \n\n        .close-btn-group\n            display: none\n            align-items: center\n            cursor: pointer\n            justify-content: center\n            position: fixed\n            right: 15px\n            bottom: 85px\n            width: 20px\n            height: 20px\n    \n            svg\n                color: black\n                height: 90%\n                width: 90%","@import '_outstreamStyle'\n\n.bigcrunch-unit\n    &:not(.bigcrunch-outstream-wrapper)\n        text-align: center"],"sourceRoot":""}]);
// Exports
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (___CSS_LOADER_EXPORT___);


/***/ }),

/***/ "./node_modules/css-loader/dist/runtime/api.js":
/*!*****************************************************!*\
  !*** ./node_modules/css-loader/dist/runtime/api.js ***!
  \*****************************************************/
/***/ ((module) => {

"use strict";


/*
  MIT License http://www.opensource.org/licenses/mit-license.php
  Author Tobias Koppers @sokra
*/
module.exports = function (cssWithMappingToString) {
  var list = [];

  // return the list of modules as css string
  list.toString = function toString() {
    return this.map(function (item) {
      var content = "";
      var needLayer = typeof item[5] !== "undefined";
      if (item[4]) {
        content += "@supports (".concat(item[4], ") {");
      }
      if (item[2]) {
        content += "@media ".concat(item[2], " {");
      }
      if (needLayer) {
        content += "@layer".concat(item[5].length > 0 ? " ".concat(item[5]) : "", " {");
      }
      content += cssWithMappingToString(item);
      if (needLayer) {
        content += "}";
      }
      if (item[2]) {
        content += "}";
      }
      if (item[4]) {
        content += "}";
      }
      return content;
    }).join("");
  };

  // import a list of modules into the list
  list.i = function i(modules, media, dedupe, supports, layer) {
    if (typeof modules === "string") {
      modules = [[null, modules, undefined]];
    }
    var alreadyImportedModules = {};
    if (dedupe) {
      for (var k = 0; k < this.length; k++) {
        var id = this[k][0];
        if (id != null) {
          alreadyImportedModules[id] = true;
        }
      }
    }
    for (var _k = 0; _k < modules.length; _k++) {
      var item = [].concat(modules[_k]);
      if (dedupe && alreadyImportedModules[item[0]]) {
        continue;
      }
      if (typeof layer !== "undefined") {
        if (typeof item[5] === "undefined") {
          item[5] = layer;
        } else {
          item[1] = "@layer".concat(item[5].length > 0 ? " ".concat(item[5]) : "", " {").concat(item[1], "}");
          item[5] = layer;
        }
      }
      if (media) {
        if (!item[2]) {
          item[2] = media;
        } else {
          item[1] = "@media ".concat(item[2], " {").concat(item[1], "}");
          item[2] = media;
        }
      }
      if (supports) {
        if (!item[4]) {
          item[4] = "".concat(supports);
        } else {
          item[1] = "@supports (".concat(item[4], ") {").concat(item[1], "}");
          item[4] = supports;
        }
      }
      list.push(item);
    }
  };
  return list;
};

/***/ }),

/***/ "./node_modules/css-loader/dist/runtime/sourceMaps.js":
/*!************************************************************!*\
  !*** ./node_modules/css-loader/dist/runtime/sourceMaps.js ***!
  \************************************************************/
/***/ ((module) => {

"use strict";


module.exports = function (item) {
  var content = item[1];
  var cssMapping = item[3];
  if (!cssMapping) {
    return content;
  }
  if (typeof btoa === "function") {
    var base64 = btoa(unescape(encodeURIComponent(JSON.stringify(cssMapping))));
    var data = "sourceMappingURL=data:application/json;charset=utf-8;base64,".concat(base64);
    var sourceMapping = "/*# ".concat(data, " */");
    return [content].concat([sourceMapping]).join("\n");
  }
  return [content].join("\n");
};

/***/ }),

/***/ "./node_modules/deepmerge/dist/cjs.js":
/*!********************************************!*\
  !*** ./node_modules/deepmerge/dist/cjs.js ***!
  \********************************************/
/***/ ((module) => {

"use strict";


var isMergeableObject = function isMergeableObject(value) {
	return isNonNullObject(value)
		&& !isSpecial(value)
};

function isNonNullObject(value) {
	return !!value && typeof value === 'object'
}

function isSpecial(value) {
	var stringValue = Object.prototype.toString.call(value);

	return stringValue === '[object RegExp]'
		|| stringValue === '[object Date]'
		|| isReactElement(value)
}

// see https://github.com/facebook/react/blob/b5ac963fb791d1298e7f396236383bc955f916c1/src/isomorphic/classic/element/ReactElement.js#L21-L25
var canUseSymbol = typeof Symbol === 'function' && Symbol.for;
var REACT_ELEMENT_TYPE = canUseSymbol ? Symbol.for('react.element') : 0xeac7;

function isReactElement(value) {
	return value.$$typeof === REACT_ELEMENT_TYPE
}

function emptyTarget(val) {
	return Array.isArray(val) ? [] : {}
}

function cloneUnlessOtherwiseSpecified(value, options) {
	return (options.clone !== false && options.isMergeableObject(value))
		? deepmerge(emptyTarget(value), value, options)
		: value
}

function defaultArrayMerge(target, source, options) {
	return target.concat(source).map(function(element) {
		return cloneUnlessOtherwiseSpecified(element, options)
	})
}

function getMergeFunction(key, options) {
	if (!options.customMerge) {
		return deepmerge
	}
	var customMerge = options.customMerge(key);
	return typeof customMerge === 'function' ? customMerge : deepmerge
}

function getEnumerableOwnPropertySymbols(target) {
	return Object.getOwnPropertySymbols
		? Object.getOwnPropertySymbols(target).filter(function(symbol) {
			return Object.propertyIsEnumerable.call(target, symbol)
		})
		: []
}

function getKeys(target) {
	return Object.keys(target).concat(getEnumerableOwnPropertySymbols(target))
}

function propertyIsOnObject(object, property) {
	try {
		return property in object
	} catch(_) {
		return false
	}
}

// Protects from prototype poisoning and unexpected merging up the prototype chain.
function propertyIsUnsafe(target, key) {
	return propertyIsOnObject(target, key) // Properties are safe to merge if they don't exist in the target yet,
		&& !(Object.hasOwnProperty.call(target, key) // unsafe if they exist up the prototype chain,
			&& Object.propertyIsEnumerable.call(target, key)) // and also unsafe if they're nonenumerable.
}

function mergeObject(target, source, options) {
	var destination = {};
	if (options.isMergeableObject(target)) {
		getKeys(target).forEach(function(key) {
			destination[key] = cloneUnlessOtherwiseSpecified(target[key], options);
		});
	}
	getKeys(source).forEach(function(key) {
		if (propertyIsUnsafe(target, key)) {
			return
		}

		if (propertyIsOnObject(target, key) && options.isMergeableObject(source[key])) {
			destination[key] = getMergeFunction(key, options)(target[key], source[key], options);
		} else {
			destination[key] = cloneUnlessOtherwiseSpecified(source[key], options);
		}
	});
	return destination
}

function deepmerge(target, source, options) {
	options = options || {};
	options.arrayMerge = options.arrayMerge || defaultArrayMerge;
	options.isMergeableObject = options.isMergeableObject || isMergeableObject;
	// cloneUnlessOtherwiseSpecified is added to `options` so that custom arrayMerge()
	// implementations can use it. The caller may not replace it.
	options.cloneUnlessOtherwiseSpecified = cloneUnlessOtherwiseSpecified;

	var sourceIsArray = Array.isArray(source);
	var targetIsArray = Array.isArray(target);
	var sourceAndTargetTypesMatch = sourceIsArray === targetIsArray;

	if (!sourceAndTargetTypesMatch) {
		return cloneUnlessOtherwiseSpecified(source, options)
	} else if (sourceIsArray) {
		return options.arrayMerge(target, source, options)
	} else {
		return mergeObject(target, source, options)
	}
}

deepmerge.all = function deepmergeAll(array, options) {
	if (!Array.isArray(array)) {
		throw new Error('first argument should be an array')
	}

	return array.reduce(function(prev, next) {
		return deepmerge(prev, next, options)
	}, {})
};

var deepmerge_1 = deepmerge;

module.exports = deepmerge_1;


/***/ }),

/***/ "./node_modules/dset/dist/index.js":
/*!*****************************************!*\
  !*** ./node_modules/dset/dist/index.js ***!
  \*****************************************/
/***/ ((__unused_webpack_module, exports) => {

function dset(obj, keys, val) {
	keys.split && (keys=keys.split('.'));
	var i=0, l=keys.length, t=obj, x, k;
	while (i < l) {
		k = keys[i++];
		if (k === '__proto__' || k === 'constructor' || k === 'prototype') break;
		t = t[k] = (i === l) ? val : (typeof(x=t[k])===typeof(keys)) ? x : (keys[i]*0 !== 0 || !!~(''+keys[i]).indexOf('.')) ? {} : [];
	}
}

exports.dset = dset;

/***/ }),

/***/ "./src/styles/sass/main.sass":
/*!***********************************!*\
  !*** ./src/styles/sass/main.sass ***!
  \***********************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _node_modules_style_loader_dist_runtime_injectStylesIntoStyleTag_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! !../../../node_modules/style-loader/dist/runtime/injectStylesIntoStyleTag.js */ "./node_modules/style-loader/dist/runtime/injectStylesIntoStyleTag.js");
/* harmony import */ var _node_modules_style_loader_dist_runtime_injectStylesIntoStyleTag_js__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_node_modules_style_loader_dist_runtime_injectStylesIntoStyleTag_js__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var _node_modules_style_loader_dist_runtime_styleDomAPI_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! !../../../node_modules/style-loader/dist/runtime/styleDomAPI.js */ "./node_modules/style-loader/dist/runtime/styleDomAPI.js");
/* harmony import */ var _node_modules_style_loader_dist_runtime_styleDomAPI_js__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(_node_modules_style_loader_dist_runtime_styleDomAPI_js__WEBPACK_IMPORTED_MODULE_1__);
/* harmony import */ var _node_modules_style_loader_dist_runtime_insertBySelector_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! !../../../node_modules/style-loader/dist/runtime/insertBySelector.js */ "./node_modules/style-loader/dist/runtime/insertBySelector.js");
/* harmony import */ var _node_modules_style_loader_dist_runtime_insertBySelector_js__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(_node_modules_style_loader_dist_runtime_insertBySelector_js__WEBPACK_IMPORTED_MODULE_2__);
/* harmony import */ var _node_modules_style_loader_dist_runtime_setAttributesWithoutAttributes_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! !../../../node_modules/style-loader/dist/runtime/setAttributesWithoutAttributes.js */ "./node_modules/style-loader/dist/runtime/setAttributesWithoutAttributes.js");
/* harmony import */ var _node_modules_style_loader_dist_runtime_setAttributesWithoutAttributes_js__WEBPACK_IMPORTED_MODULE_3___default = /*#__PURE__*/__webpack_require__.n(_node_modules_style_loader_dist_runtime_setAttributesWithoutAttributes_js__WEBPACK_IMPORTED_MODULE_3__);
/* harmony import */ var _node_modules_style_loader_dist_runtime_insertStyleElement_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! !../../../node_modules/style-loader/dist/runtime/insertStyleElement.js */ "./node_modules/style-loader/dist/runtime/insertStyleElement.js");
/* harmony import */ var _node_modules_style_loader_dist_runtime_insertStyleElement_js__WEBPACK_IMPORTED_MODULE_4___default = /*#__PURE__*/__webpack_require__.n(_node_modules_style_loader_dist_runtime_insertStyleElement_js__WEBPACK_IMPORTED_MODULE_4__);
/* harmony import */ var _node_modules_style_loader_dist_runtime_styleTagTransform_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! !../../../node_modules/style-loader/dist/runtime/styleTagTransform.js */ "./node_modules/style-loader/dist/runtime/styleTagTransform.js");
/* harmony import */ var _node_modules_style_loader_dist_runtime_styleTagTransform_js__WEBPACK_IMPORTED_MODULE_5___default = /*#__PURE__*/__webpack_require__.n(_node_modules_style_loader_dist_runtime_styleTagTransform_js__WEBPACK_IMPORTED_MODULE_5__);
/* harmony import */ var _node_modules_css_loader_dist_cjs_js_node_modules_sass_loader_dist_cjs_js_main_sass__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! !!../../../node_modules/css-loader/dist/cjs.js!../../../node_modules/sass-loader/dist/cjs.js!./main.sass */ "./node_modules/css-loader/dist/cjs.js!./node_modules/sass-loader/dist/cjs.js!./src/styles/sass/main.sass");

      
      
      
      
      
      
      
      
      

var options = {};

options.styleTagTransform = (_node_modules_style_loader_dist_runtime_styleTagTransform_js__WEBPACK_IMPORTED_MODULE_5___default());
options.setAttributes = (_node_modules_style_loader_dist_runtime_setAttributesWithoutAttributes_js__WEBPACK_IMPORTED_MODULE_3___default());

      options.insert = _node_modules_style_loader_dist_runtime_insertBySelector_js__WEBPACK_IMPORTED_MODULE_2___default().bind(null, "head");
    
options.domAPI = (_node_modules_style_loader_dist_runtime_styleDomAPI_js__WEBPACK_IMPORTED_MODULE_1___default());
options.insertStyleElement = (_node_modules_style_loader_dist_runtime_insertStyleElement_js__WEBPACK_IMPORTED_MODULE_4___default());

var update = _node_modules_style_loader_dist_runtime_injectStylesIntoStyleTag_js__WEBPACK_IMPORTED_MODULE_0___default()(_node_modules_css_loader_dist_cjs_js_node_modules_sass_loader_dist_cjs_js_main_sass__WEBPACK_IMPORTED_MODULE_6__["default"], options);




       /* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (_node_modules_css_loader_dist_cjs_js_node_modules_sass_loader_dist_cjs_js_main_sass__WEBPACK_IMPORTED_MODULE_6__["default"] && _node_modules_css_loader_dist_cjs_js_node_modules_sass_loader_dist_cjs_js_main_sass__WEBPACK_IMPORTED_MODULE_6__["default"].locals ? _node_modules_css_loader_dist_cjs_js_node_modules_sass_loader_dist_cjs_js_main_sass__WEBPACK_IMPORTED_MODULE_6__["default"].locals : undefined);


/***/ }),

/***/ "./node_modules/style-loader/dist/runtime/injectStylesIntoStyleTag.js":
/*!****************************************************************************!*\
  !*** ./node_modules/style-loader/dist/runtime/injectStylesIntoStyleTag.js ***!
  \****************************************************************************/
/***/ ((module) => {

"use strict";


var stylesInDOM = [];
function getIndexByIdentifier(identifier) {
  var result = -1;
  for (var i = 0; i < stylesInDOM.length; i++) {
    if (stylesInDOM[i].identifier === identifier) {
      result = i;
      break;
    }
  }
  return result;
}
function modulesToDom(list, options) {
  var idCountMap = {};
  var identifiers = [];
  for (var i = 0; i < list.length; i++) {
    var item = list[i];
    var id = options.base ? item[0] + options.base : item[0];
    var count = idCountMap[id] || 0;
    var identifier = "".concat(id, " ").concat(count);
    idCountMap[id] = count + 1;
    var indexByIdentifier = getIndexByIdentifier(identifier);
    var obj = {
      css: item[1],
      media: item[2],
      sourceMap: item[3],
      supports: item[4],
      layer: item[5]
    };
    if (indexByIdentifier !== -1) {
      stylesInDOM[indexByIdentifier].references++;
      stylesInDOM[indexByIdentifier].updater(obj);
    } else {
      var updater = addElementStyle(obj, options);
      options.byIndex = i;
      stylesInDOM.splice(i, 0, {
        identifier: identifier,
        updater: updater,
        references: 1
      });
    }
    identifiers.push(identifier);
  }
  return identifiers;
}
function addElementStyle(obj, options) {
  var api = options.domAPI(options);
  api.update(obj);
  var updater = function updater(newObj) {
    if (newObj) {
      if (newObj.css === obj.css && newObj.media === obj.media && newObj.sourceMap === obj.sourceMap && newObj.supports === obj.supports && newObj.layer === obj.layer) {
        return;
      }
      api.update(obj = newObj);
    } else {
      api.remove();
    }
  };
  return updater;
}
module.exports = function (list, options) {
  options = options || {};
  list = list || [];
  var lastIdentifiers = modulesToDom(list, options);
  return function update(newList) {
    newList = newList || [];
    for (var i = 0; i < lastIdentifiers.length; i++) {
      var identifier = lastIdentifiers[i];
      var index = getIndexByIdentifier(identifier);
      stylesInDOM[index].references--;
    }
    var newLastIdentifiers = modulesToDom(newList, options);
    for (var _i = 0; _i < lastIdentifiers.length; _i++) {
      var _identifier = lastIdentifiers[_i];
      var _index = getIndexByIdentifier(_identifier);
      if (stylesInDOM[_index].references === 0) {
        stylesInDOM[_index].updater();
        stylesInDOM.splice(_index, 1);
      }
    }
    lastIdentifiers = newLastIdentifiers;
  };
};

/***/ }),

/***/ "./node_modules/style-loader/dist/runtime/insertBySelector.js":
/*!********************************************************************!*\
  !*** ./node_modules/style-loader/dist/runtime/insertBySelector.js ***!
  \********************************************************************/
/***/ ((module) => {

"use strict";


var memo = {};

/* istanbul ignore next  */
function getTarget(target) {
  if (typeof memo[target] === "undefined") {
    var styleTarget = document.querySelector(target);

    // Special case to return head of iframe instead of iframe itself
    if (window.HTMLIFrameElement && styleTarget instanceof window.HTMLIFrameElement) {
      try {
        // This will throw an exception if access to iframe is blocked
        // due to cross-origin restrictions
        styleTarget = styleTarget.contentDocument.head;
      } catch (e) {
        // istanbul ignore next
        styleTarget = null;
      }
    }
    memo[target] = styleTarget;
  }
  return memo[target];
}

/* istanbul ignore next  */
function insertBySelector(insert, style) {
  var target = getTarget(insert);
  if (!target) {
    throw new Error("Couldn't find a style target. This probably means that the value for the 'insert' parameter is invalid.");
  }
  target.appendChild(style);
}
module.exports = insertBySelector;

/***/ }),

/***/ "./node_modules/style-loader/dist/runtime/insertStyleElement.js":
/*!**********************************************************************!*\
  !*** ./node_modules/style-loader/dist/runtime/insertStyleElement.js ***!
  \**********************************************************************/
/***/ ((module) => {

"use strict";


/* istanbul ignore next  */
function insertStyleElement(options) {
  var element = document.createElement("style");
  options.setAttributes(element, options.attributes);
  options.insert(element, options.options);
  return element;
}
module.exports = insertStyleElement;

/***/ }),

/***/ "./node_modules/style-loader/dist/runtime/setAttributesWithoutAttributes.js":
/*!**********************************************************************************!*\
  !*** ./node_modules/style-loader/dist/runtime/setAttributesWithoutAttributes.js ***!
  \**********************************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";


/* istanbul ignore next  */
function setAttributesWithoutAttributes(styleElement) {
  var nonce =  true ? __webpack_require__.nc : 0;
  if (nonce) {
    styleElement.setAttribute("nonce", nonce);
  }
}
module.exports = setAttributesWithoutAttributes;

/***/ }),

/***/ "./node_modules/style-loader/dist/runtime/styleDomAPI.js":
/*!***************************************************************!*\
  !*** ./node_modules/style-loader/dist/runtime/styleDomAPI.js ***!
  \***************************************************************/
/***/ ((module) => {

"use strict";


/* istanbul ignore next  */
function apply(styleElement, options, obj) {
  var css = "";
  if (obj.supports) {
    css += "@supports (".concat(obj.supports, ") {");
  }
  if (obj.media) {
    css += "@media ".concat(obj.media, " {");
  }
  var needLayer = typeof obj.layer !== "undefined";
  if (needLayer) {
    css += "@layer".concat(obj.layer.length > 0 ? " ".concat(obj.layer) : "", " {");
  }
  css += obj.css;
  if (needLayer) {
    css += "}";
  }
  if (obj.media) {
    css += "}";
  }
  if (obj.supports) {
    css += "}";
  }
  var sourceMap = obj.sourceMap;
  if (sourceMap && typeof btoa !== "undefined") {
    css += "\n/*# sourceMappingURL=data:application/json;base64,".concat(btoa(unescape(encodeURIComponent(JSON.stringify(sourceMap)))), " */");
  }

  // For old IE
  /* istanbul ignore if  */
  options.styleTagTransform(css, styleElement, options.options);
}
function removeStyleElement(styleElement) {
  // istanbul ignore if
  if (styleElement.parentNode === null) {
    return false;
  }
  styleElement.parentNode.removeChild(styleElement);
}

/* istanbul ignore next  */
function domAPI(options) {
  if (typeof document === "undefined") {
    return {
      update: function update() {},
      remove: function remove() {}
    };
  }
  var styleElement = options.insertStyleElement(options);
  return {
    update: function update(obj) {
      apply(styleElement, options, obj);
    },
    remove: function remove() {
      removeStyleElement(styleElement);
    }
  };
}
module.exports = domAPI;

/***/ }),

/***/ "./node_modules/style-loader/dist/runtime/styleTagTransform.js":
/*!*********************************************************************!*\
  !*** ./node_modules/style-loader/dist/runtime/styleTagTransform.js ***!
  \*********************************************************************/
/***/ ((module) => {

"use strict";


/* istanbul ignore next  */
function styleTagTransform(css, styleElement) {
  if (styleElement.styleSheet) {
    styleElement.styleSheet.cssText = css;
  } else {
    while (styleElement.firstChild) {
      styleElement.removeChild(styleElement.firstChild);
    }
    styleElement.appendChild(document.createTextNode(css));
  }
}
module.exports = styleTagTransform;

/***/ }),

/***/ "./src/classes/AmazonAps.ts":
/*!**********************************!*\
  !*** ./src/classes/AmazonAps.ts ***!
  \**********************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";

var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.AmazonAps = void 0;
var Auction_1 = __importDefault(__webpack_require__(/*! ./Auction */ "./src/classes/Auction.ts"));
var utils_1 = __webpack_require__(/*! ../utils/utils */ "./src/utils/utils.ts");
var __1 = __webpack_require__(/*! .. */ "./src/index.ts");
var log_1 = __webpack_require__(/*! ../utils/log */ "./src/utils/log.ts");
var AmazonAps = /** @class */ (function () {
    function AmazonAps(pubId) {
        this.loadApsTag();
        this.init(pubId);
    }
    AmazonAps.prototype.loadApsTag = function () {
        (function (a9, a, p, s, t) {
            if (a[a9])
                return;
            var q = function (c, r) {
                a[a9]._Q.push([c, r]);
            };
            a[a9] = {
                init: function () {
                    // eslint-disable-next-line prefer-rest-params
                    q("i", arguments);
                },
                fetchBids: function () {
                    // eslint-disable-next-line prefer-rest-params
                    q("f", arguments);
                },
                setDisplayBids: function () { },
                targetingKeys: function () {
                    return [];
                },
                _Q: []
            };
            var A = p.createElement(s);
            A.async = true;
            A.src = t;
            var g = p.getElementsByTagName(s)[0];
            g.parentNode.insertBefore(A, g);
        })("apstag", window, document, "script", "//c.amazon-adsystem.com/aax2/apstag.js");
    };
    AmazonAps.prototype.init = function (pubId) {
        globalThis.apstag.init({
            pubID: pubId,
            adServer: 'googletag',
            bidTimeout: 2e3,
            debug: false
            // deals: true, // Enable if you have specific deal IDs to target
            // gdpr: {
            //     consent: 'CONSENT_STRING', // GDPR consent string
            //     applies: true // Set to true if GDPR applies
            // },
            // usp: {
            //     consent: '1YNN' // CCPA consent string
            // }
        });
        // listen for custom event to build slots
        document.addEventListener('BcAuctionSend', function (event) {
            if (event.detail instanceof Auction_1.default) {
                var auction = event.detail;
                this.fetchBids(auction);
            }
        }.bind(this));
    };
    AmazonAps.prototype.fetchBids = function (auction) {
        var auctionSlots = {};
        var slotConfigs = auction.slots.filter(function (slot) {
            return slot.amazon_aps.enabled === true;
        }).map(function (slot) {
            auctionSlots[slot.div_id] = slot;
            var sizes = slot.sizes.filter(function (size) {
                return ['fluid'].indexOf(size) === -1;
            }).map(function (size) {
                return size.split('x').map(function (s) { return (0, utils_1.isNumber)(parseInt(s)) ? parseInt(s) : s; });
            });
            slot.amazon_aps.auction_started = true;
            var slotConfig = {
                slotID: slot.div_id,
                slotName: slot.prebid.gam_slot_code,
                sizes: sizes,
            };
            var floor = slot.floor || __1.globalSettings.floor.default || 0;
            if (floor) {
                slotConfig.floor = {
                    "value": Math.round(floor * 100),
                    "currency": "USD"
                };
            }
            return slotConfig;
        }).filter(function (slotConfig) {
            return slotConfig.sizes.length > 0;
        });
        if (slotConfigs.length === 0)
            return;
        globalThis.apstag.fetchBids({
            slots: slotConfigs,
            timeout: 2e3
        }, function (bids) {
            (0, log_1.logInfo)('Amazon APS Bids:', bids);
            Object.keys(auctionSlots).forEach(function (slotID) {
                var slot = auctionSlots[slotID];
                slot.amazon_aps.auction_finished = true;
            });
            // fire custom event that auction has finished
            var event = new CustomEvent('AmazonAuctionFinished', { detail: Object.values(auctionSlots) });
            document.dispatchEvent(event);
        });
    };
    return AmazonAps;
}());
exports.AmazonAps = AmazonAps;


/***/ }),

/***/ "./src/classes/Analytics.ts":
/*!**********************************!*\
  !*** ./src/classes/Analytics.ts ***!
  \**********************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";

var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.globalAnalytics = exports.Analytics = void 0;
var ua_parser_js_1 = __importDefault(__webpack_require__(/*! ua-parser-js */ "./node_modules/ua-parser-js/src/ua-parser.js"));
var __1 = __webpack_require__(/*! .. */ "./src/index.ts");
var Session_1 = __webpack_require__(/*! ./Session */ "./src/classes/Session.ts");
var Page_1 = __webpack_require__(/*! ./Page */ "./src/classes/Page.ts");
var User_1 = __webpack_require__(/*! ./User */ "./src/classes/User.ts");
var utils_1 = __webpack_require__(/*! ../utils/utils */ "./src/utils/utils.ts");
var log_1 = __webpack_require__(/*! ../utils/log */ "./src/utils/log.ts");
var ConsentHandler_1 = __webpack_require__(/*! ./consent/ConsentHandler */ "./src/classes/consent/ConsentHandler.ts");
var envVars_1 = __webpack_require__(/*! ../envVars */ "./src/envVars.ts");
var Analytics = /** @class */ (function () {
    function Analytics() {
        // impression request queue
        this.impression_queue = [];
        this.impression_queue_timer = null;
        // viewability request queue
        this.viewability_queue = [];
        this.viewability_queue_timer = null;
        // session and page fail count
        this.session_fail_count = 0;
        this.page_fail_count = 0;
    }
    Analytics.prototype.sendSessionPageAnalytics = function () {
        var _a;
        if (Session_1.globalSession.id && Page_1.globalPage.id && (!Session_1.globalSession.session_analytics_logged || !Page_1.globalPage.page_analytics_logged)) {
            Session_1.globalSession.session_analytics_logged = true;
            Page_1.globalPage.page_analytics_logged = true;
            // Parse User Agent
            var ua = new ua_parser_js_1.default((0, utils_1.getUserAgent)());
            var referrer = ((_a = (0, utils_1.getReferrer)()) === null || _a === void 0 ? void 0 : _a.href) || "";
            var url = (0, utils_1.getURL)();
            // const href = url?.href || "";
            var origin_1 = (url === null || url === void 0 ? void 0 : url.origin) || "";
            var path = (url === null || url === void 0 ? void 0 : url.pathname) || "";
            var search = (url === null || url === void 0 ? void 0 : url.search) || "";
            if (__1.globalSettings.analytics.url_path_groupings.length) {
                var path_groupings = __1.globalSettings.analytics.url_path_groupings;
                for (var _i = 0, path_groupings_1 = path_groupings; _i < path_groupings_1.length; _i++) {
                    var path_grouping = path_groupings_1[_i];
                    var regex = (0, utils_1.escapeRegExp)(path_grouping);
                    if (path.match("^".concat(regex, ".*"))) {
                        path = path_grouping;
                        break;
                    }
                }
            }
            var page_url = origin_1 + path;
            if (!ua.getOS().name || !ua.getBrowser().name) {
                var error_message = 'Couldn\'t parse UA: ' + (0, utils_1.getUserAgent)();
                // Create a new standard Error object
                var error = new Error(error_message);
                // Send error analytics
                exports.globalAnalytics.sendErrorAnalytics(error, 'UA_PARSER');
            }
            var postData = {
                'payload_version': (0, utils_1.validateValue)(__1.VERSION, 'string', '', 256),
                'config_version': (0, utils_1.validateValue)(__1.globalSettings.version, 'number', '', 9999),
                'session_id': (0, utils_1.validateValue)(Session_1.globalSession.id, 'string', '', 256),
                'property_id': (0, utils_1.validateValue)(__1.globalSettings.property_id, 'string', '', 256),
                'browser': (0, utils_1.validateValue)((ua.getBrowser().name || ""), 'string', '', 256),
                'device': (0, utils_1.validateValue)((ua.getDevice().type || "desktop"), 'string', '', 256),
                'os': (0, utils_1.validateValue)((ua.getOS().name || ""), 'string', '', 256),
                'page_id': (0, utils_1.validateValue)(Page_1.globalPage.id, 'string', '', 256),
                'session_depth': (0, utils_1.validateValue)(Session_1.globalSession.data.depth, 'number', '', 999),
                'page_url': (0, utils_1.validateValue)(page_url, 'string', '', 2048),
                'page_search': (0, utils_1.validateValue)(search, 'string', '', 2048),
                'page_referrer': (0, utils_1.validateValue)(referrer, 'string', '', 2048),
                'utm_source': (0, utils_1.validateValue)(Session_1.globalSession.data.utm.source, 'string', '', 256),
                'utm_medium': (0, utils_1.validateValue)(Session_1.globalSession.data.utm.medium, 'string', '', 256),
                'utm_campaign': (0, utils_1.validateValue)(Session_1.globalSession.data.utm.campaign, 'string', '', 256),
                'utm_term': (0, utils_1.validateValue)(Session_1.globalSession.data.utm.term, 'string', '', 256),
                'utm_content': (0, utils_1.validateValue)(Session_1.globalSession.data.utm.content, 'string', '', 256),
                'gclid': (0, utils_1.validateValue)(Session_1.globalSession.data.gclid, 'string', '', 256),
                'fbclid': (0, utils_1.validateValue)(Session_1.globalSession.data.fbclid, 'string', '', 256),
                'user_id': (0, utils_1.validateValue)(User_1.globalUser.getUUID(), 'string', '', 256),
                'new_user': (0, utils_1.validateValue)(Session_1.globalSession.data.new_user, 'boolean', false, 1),
                'browser_timestamp': (0, utils_1.validateValue)((0, utils_1.getISOTimestamp)(), 'string', '', 256),
            };
            if (__1.globalSettings.analytics.bigcrunch_page_meta && !checkNoIndex()) {
                var jsonLdMetaData = getJsonLdMetaData();
                var metaData = getMetaData();
                var page_meta = void 0;
                if (Object.keys(__1.globalSettings.analytics.page_meta_overrides).length) {
                    var page_meta_overrides = __1.globalSettings.analytics.page_meta_overrides;
                    for (var key in page_meta_overrides) {
                        if (key === path) {
                            page_meta = page_meta_overrides[key];
                            page_meta.url = (0, utils_1.validateValue)(page_url, 'string', '', 2048);
                            break;
                        }
                    }
                }
                if (!page_meta) {
                    page_meta = {
                        "url": (0, utils_1.validateValue)(page_url || jsonLdMetaData.url || metaData.url, 'string', '', 2048),
                        "author": (0, utils_1.validateValue)(jsonLdMetaData.author || metaData.author, 'string', '', 256),
                        "title": (0, utils_1.validateValue)(jsonLdMetaData.title || metaData.title, 'string', '', 256),
                        "thumbnailUrl": (0, utils_1.validateValue)(jsonLdMetaData.thumbnailUrl || metaData.thumbnailUrl, 'string', '', 256),
                        "articleSection": (0, utils_1.validateValue)(jsonLdMetaData.articleSection || metaData.articleSection, 'string', '', 256),
                        "keywords": (0, utils_1.validateValue)(jsonLdMetaData.keywords || metaData.keywords, 'string', '', 256),
                        "dateCreated": (0, utils_1.validateValue)(jsonLdMetaData.dateCreated || metaData.dateCreated, 'string', '', 256),
                        "dateModified": (0, utils_1.validateValue)(jsonLdMetaData.dateModified || metaData.dateModified, 'string', '', 256),
                        "datePublished": (0, utils_1.validateValue)(jsonLdMetaData.datePublished || metaData.datePublished, 'string', '', 256),
                    };
                }
                postData['page_meta_data'] = page_meta || {};
            }
            // Send session data to server
            Analytics.sendAnalyticsRequest("https://".concat(envVars_1.endpoint_prefix, "analytics-cf.bigcrunch.com/session-pages"), postData).then(function (data) {
                if (data.country === 'US' && data.region) {
                    // set session location data
                    __1.globalSettings.consent_region_code = data.region;
                    // save consent region code
                    ConsentHandler_1.allConsentHandler.saveConsentRegionCode(data.region);
                    // fire event for consent country code
                    var event_1 = new CustomEvent('BcConsentRegionCode', { detail: { "country": data.country, "region": data.region } });
                    document.dispatchEvent(event_1);
                }
                (0, log_1.logInfo)('session and page logged');
                // globalSession.setSessionData();
            }).catch(function (error) {
                console.error(error);
            });
        }
    };
    /**
     * Send impression data to server
     */
    Analytics.prototype.sendImpressionAnalytics = function (bidObj) {
        var _this = this;
        if (this.impression_queue_timer) {
            clearTimeout(this.impression_queue_timer);
        }
        // add bid to queue
        this.impression_queue.push({
            "page_id": (0, utils_1.validateValue)(bidObj.page_id, 'string', '', 256),
            "slot_id": (0, utils_1.validateValue)(bidObj.slotObj.id, 'string', '', 256),
            "impression_id": (0, utils_1.validateValue)(bidObj.impression_id, 'string', '', 256),
            // "auction_id": validateValue(bidObj.auction_id, 'string', '', 256),
            "refresh_count": (0, utils_1.validateValue)(bidObj.slotObj.refresh.count, 'number', '', 99),
            "ad_bidder": (0, utils_1.validateValue)(bidObj.bidder, 'string', '', 256),
            "ad_size": (0, utils_1.validateValue)(bidObj.data.w + 'x' + bidObj.data.h, 'string', '', 256),
            "ad_price": (0, utils_1.validateValue)(bidObj.data.price, 'number', '', 99),
            "ad_floor_price": (0, utils_1.validateValue)(bidObj.floor, 'number', '', 99),
            "min_bid_to_win": (0, utils_1.validateValue)(bidObj.min_bid_to_win, 'number', '', 99),
            // "ad_impid": validateValue(bidObj.data.impid, 'string', '', 256),
            // "ad_adid": validateValue(bidObj.data.adid, 'string', '', 256),
            // "ad_cid": validateValue(bidObj.data.cid, 'string', '', 256),
            // "ad_crid": validateValue(bidObj.data.crid, 'string', '', 256),
            // "ad_dealid": validateValue(bidObj.data.dealid, 'string', '', 256),
            "ad_amznbid": (0, utils_1.validateValue)(bidObj.amznbid, 'string', '', 256),
            "ad_amznp": (0, utils_1.validateValue)(bidObj.amznp, 'string', '', 256),
            "ad_demand_type": (0, utils_1.validateValue)(bidObj.demand_type, 'string', '', 256),
            "demand_channel": (0, utils_1.validateValue)(bidObj.demand_channel, 'string', '', 256),
            "browser_timestamp": (0, utils_1.validateValue)((0, utils_1.getISOTimestamp)(), 'string', '', 256),
        });
        // set a timer to queue more impressions and then send request when timer is up
        this.impression_queue_timer = setTimeout(function () {
            var impressions = _this.impression_queue;
            _this.impression_queue = [];
            Analytics.sendAnalyticsRequest("https://".concat(envVars_1.endpoint_prefix, "analytics-cf.bigcrunch.com/impression"), {
                'property_id': (0, utils_1.validateValue)(__1.globalSettings.property_id, 'string', '', 256),
                'impressions': impressions
            }).then(function () {
                (0, log_1.logInfo)('impressions logged');
            }).catch(function (error) {
                console.error(error);
            });
        }, 250);
    };
    Analytics.prototype.sendAdViewabilityAnalytics = function (bidObj) {
        var _this = this;
        var _a;
        if (this.viewability_queue_timer) {
            clearTimeout(this.viewability_queue_timer);
        }
        this.viewability_queue.push({
            'page_id': (0, utils_1.validateValue)(bidObj.page_id, 'string', '', 256),
            'slot_id': (0, utils_1.validateValue)(((_a = bidObj === null || bidObj === void 0 ? void 0 : bidObj.slotObj) === null || _a === void 0 ? void 0 : _a.id) || bidObj.slot_id, 'string', '', 256),
            'impression_id': (0, utils_1.validateValue)(bidObj.impression_id, 'string', '', 256),
            'browser_timestamp': (0, utils_1.validateValue)((0, utils_1.getISOTimestamp)(), 'string', '', 256),
        });
        // set a timer to queue more impressions and then send request when timer is up
        this.viewability_queue_timer = setTimeout(function () {
            var viewability = _this.viewability_queue;
            _this.viewability_queue = [];
            Analytics.sendAnalyticsRequest("https://".concat(envVars_1.endpoint_prefix, "analytics-cf.bigcrunch.com/viewability"), {
                'property_id': (0, utils_1.validateValue)(__1.globalSettings.property_id, 'string', '', 256),
                'viewability': viewability
            }).then(function () {
                (0, log_1.logInfo)('viewability logged');
            }).catch(function (error) {
                console.error(error);
            });
        }, 250);
    };
    Analytics.prototype.sendErrorAnalytics = function (errorObj, errorType) {
        // Parse User Agent
        var ua = new ua_parser_js_1.default((0, utils_1.getUserAgent)());
        Analytics.sendAnalyticsRequest("https://".concat(envVars_1.endpoint_prefix, "analytics-cf.bigcrunch.com/error"), {
            'property_id': (0, utils_1.validateValue)(__1.globalSettings.property_id, 'string', '', 256),
            'error_type': (0, utils_1.validateValue)(errorType, 'string', '', 256),
            'error_name': (0, utils_1.validateValue)(errorObj.name, 'string', '', 2048),
            'error_message': (0, utils_1.validateValue)(errorObj.message, 'string', '', 2048),
            'error_stack': (0, utils_1.validateValue)(errorObj.stack, 'string', '', 2048),
            'browser': (0, utils_1.validateValue)((ua.getBrowser().name || ""), 'string', '', 256),
            'device': (0, utils_1.validateValue)((ua.getDevice().type || "desktop"), 'string', '', 256),
            'os': (0, utils_1.validateValue)((ua.getOS().name || ""), 'string', '', 256),
            'browser_timestamp': (0, utils_1.validateValue)((0, utils_1.getISOTimestamp)(), 'string', '', 256),
        }).then(function () {
            (0, log_1.logInfo)('error logged');
        }).catch(function (error) {
            console.error(error);
        });
    };
    Analytics.sendAnalyticsRequest = function (endpoint, postData) {
        return new Promise(function (resolve, reject) {
            (0, utils_1.fetchWithTimeout)(endpoint, 2000, {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json'
                },
                body: JSON.stringify(postData)
            })
                .then(function (response) { return response.json(); })
                .then(function (data) {
                // if success
                if (data.status === 200) {
                    resolve(data);
                }
                else {
                    reject();
                }
            })
                .catch(function (error) {
                console.error(error);
                reject();
            });
        });
    };
    return Analytics;
}());
exports.Analytics = Analytics;
function checkNoIndex() {
    var metaRobots = document.querySelector('meta[name="robots"]');
    if (metaRobots) {
        var content = metaRobots.getAttribute('content');
        if (content.includes('noindex')) {
            return true;
        }
    }
    return false;
}
function getMetaData() {
    var _a, _b, _c, _d, _e, _f, _g, _h;
    // Select relevant meta tags
    var url = ((_a = document.querySelector('meta[property="og:url"]')) === null || _a === void 0 ? void 0 : _a.getAttribute('content')) || document.querySelector('link[rel="canonical"]')['href'] || "";
    var author = ((_b = document.querySelector('meta[property="article:author"]')) === null || _b === void 0 ? void 0 : _b.getAttribute('content')) || "";
    var title = ((_c = document.querySelector('meta[property="og:title"]')) === null || _c === void 0 ? void 0 : _c.getAttribute('content')) || document.title;
    var imageUrl = ((_d = document.querySelector('meta[property="og:image"]')) === null || _d === void 0 ? void 0 : _d.getAttribute('content')) || "";
    var articleSection = ((_e = document.querySelector('meta[property="article:section"]')) === null || _e === void 0 ? void 0 : _e.getAttribute('content')) || "";
    var dateCreated = ((_f = document.querySelector('meta[property="article:published_time"]')) === null || _f === void 0 ? void 0 : _f.getAttribute('content')) || "";
    var dateModified = ((_g = document.querySelector('meta[property="article:modified_time"]')) === null || _g === void 0 ? void 0 : _g.getAttribute('content')) || "";
    var datePublished = ((_h = document.querySelector('meta[property="article:published_time"]')) === null || _h === void 0 ? void 0 : _h.getAttribute('content')) || "";
    var keywords = [];
    document.querySelectorAll('meta[property="article:tag"]').forEach(function (tag) {
        keywords.push(tag.getAttribute('content'));
    });
    // Create an object to store the metadata
    var metaData = {
        url: url,
        author: author,
        title: title,
        thumbnailUrl: imageUrl,
        articleSection: articleSection,
        keywords: keywords.toString(),
        dateCreated: dateCreated,
        dateModified: dateModified,
        datePublished: datePublished,
    };
    return metaData;
}
function getJsonLdMetaData() {
    // Select all JSON-LD script tags
    var jsonLdScripts = document.querySelectorAll('script[type="application/ld+json"]');
    // const jsonLdDataArray = [];
    var jsonLdMetaData = {
        url: "",
        author: "",
        title: "",
        thumbnailUrl: "",
        articleSection: "",
        keywords: "",
        dateCreated: "",
        dateModified: "",
        datePublished: "",
    };
    // found flag
    var found = false;
    // Loop through each script tag and parse its content
    jsonLdScripts.forEach(function (jsonLdScript) {
        var _a;
        try {
            // if found, return
            if (found) {
                return;
            }
            // Parse JSON-LD
            var jsonData = JSON.parse(jsonLdScript.textContent.trim());
            if (jsonData.author) {
                found = true;
                jsonLdMetaData = {
                    url: jsonData.url || "",
                    author: ((_a = jsonData.author) === null || _a === void 0 ? void 0 : _a.name) || "",
                    title: jsonData.headline || jsonData.name || "",
                    thumbnailUrl: jsonData.thumbnailUrl || "",
                    articleSection: (jsonData.articleSection || "").toString(),
                    keywords: (jsonData.keywords || "").toString(),
                    dateCreated: jsonData.dateCreated || "",
                    dateModified: jsonData.dateModified || "",
                    datePublished: jsonData.datePublished || "",
                };
            }
            // jsonLdDataArray.push(jsonData);
        }
        catch (error) {
            (0, log_1.logWarn)('Error parsing JSON-LD:', error);
        }
    });
    // return jsonLdDataArray.length > 0 ? jsonLdDataArray : null;
    return jsonLdMetaData;
}
exports.globalAnalytics = new Analytics();


/***/ }),

/***/ "./src/classes/AnalyticsPrebid.ts":
/*!****************************************!*\
  !*** ./src/classes/AnalyticsPrebid.ts ***!
  \****************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";

var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.AnalyticsPrebid = void 0;
var utils_1 = __webpack_require__(/*! ../utils/utils */ "./src/utils/utils.ts");
var log_1 = __webpack_require__(/*! ../utils/log */ "./src/utils/log.ts");
var Analytics_1 = __webpack_require__(/*! ./Analytics */ "./src/classes/Analytics.ts");
var __1 = __webpack_require__(/*! .. */ "./src/index.ts");
var Page_1 = __webpack_require__(/*! ./Page */ "./src/classes/Page.ts");
var Slot_1 = __importDefault(__webpack_require__(/*! ./Slot */ "./src/classes/Slot.ts"));
var Bid_1 = __webpack_require__(/*! ./Bid */ "./src/classes/Bid.ts");
var AnalyticsPrebid = /** @class */ (function () {
    function AnalyticsPrebid() {
        this.impression_data = {};
        // impression request queue
        this.impression_queue = [];
        this.impression_queue_timer = null;
        // viewability request queue
        this.viewability_queue = [];
        this.viewability_queue_timer = null;
        try {
            // load prebid
            globalThis.pbjs = globalThis.pbjs || {};
            globalThis.pbjs.que = globalThis.pbjs.que || [];
            globalThis.pbjs.que.push(function () {
                this.prebidBidWon();
            }.bind(this));
            globalThis.googletag.cmd.push(function () {
                this.gamSlotRenderEnded();
                this.gamImpressionViewable();
            }.bind(this));
        }
        catch (error) {
            console.error(error);
            // Send error analytics
            Analytics_1.globalAnalytics.sendErrorAnalytics(error, 'PREBID_ANALYTICS_ERROR');
        }
    }
    AnalyticsPrebid.prototype.prebidBidWon = function () {
        try {
            globalThis.pbjs.onEvent('bidWon', function (winningBid) {
                var _a, _b, _c;
                // const pbjsWinningBids = globalThis.pbjs.getAllWinningBids();
                var slotAdUnitCode = winningBid.adUnitCode;
                var allbids = globalThis.pbjs.getBidResponses();
                var slotBids = ((_a = allbids[slotAdUnitCode]) === null || _a === void 0 ? void 0 : _a.bids) || [];
                if (!this.impression_data[slotAdUnitCode]) {
                    this.impression_data[slotAdUnitCode] = {
                        refresh_count: 0
                    };
                }
                else {
                    this.impression_data[slotAdUnitCode].refresh_count++;
                }
                this.impression_data[slotAdUnitCode].impression_id = (0, utils_1.generateUUID)(),
                    this.impression_data[slotAdUnitCode].page_id = Page_1.globalPage.id;
                var slotName = slotAdUnitCode;
                var slotId = slotAdUnitCode.replace('bigcrunch-unit-', '');
                (0, log_1.logInfo)('Prebid bidWon', slotId, winningBid);
                try {
                    var gam_slot = globalThis.googletag.pubads().getSlots().find(function (slot) {
                        return slot.getSlotElementId() == slotAdUnitCode;
                    });
                    if (gam_slot && gam_slot.getAdUnitPath()) {
                        slotName = gam_slot.getAdUnitPath().split('/').pop() || gam_slot.getAdUnitPath();
                    }
                }
                catch (error) {
                    (0, log_1.logWarn)(error);
                }
                // loop through slotBids and get highest bidObj by bid.cpm
                var nextHighestBid = null;
                for (var i = 0; i < slotBids.length; i++) {
                    var bid = slotBids[i];
                    if (winningBid.adId !== bid.adId) {
                        if (!nextHighestBid) {
                            nextHighestBid = bid;
                        }
                        else if (bid.cpm > nextHighestBid.cpm) {
                            nextHighestBid = bid;
                        }
                    }
                }
                var floor = ((_b = winningBid === null || winningBid === void 0 ? void 0 : winningBid.floorData) === null || _b === void 0 ? void 0 : _b.floorValue) || 0;
                var min_bid_to_win = ((nextHighestBid === null || nextHighestBid === void 0 ? void 0 : nextHighestBid.cpm) || floor) + 0.01;
                var slot;
                if (Page_1.globalPage.slots[slotId]) {
                    slot = Page_1.globalPage.slots[slotId];
                }
                else {
                    slot = {
                        "id": slotName,
                        "refresh": {
                            "count": this.impression_data[slotAdUnitCode].refresh_count
                        }
                    };
                }
                var bidResponse = {
                    "floor": floor,
                    "min_bid_to_win": min_bid_to_win,
                    "demand_type": winningBid.mediaType == 'banner' ? 'display' : winningBid.mediaType,
                    "demand_channel": "Prebid Header",
                    "bidder": winningBid.bidder,
                    "impression_id": this.impression_data[slotAdUnitCode].impression_id,
                    "auction_id": winningBid.auctionId,
                    "page_id": this.impression_data[slotAdUnitCode].page_id,
                    "data": {
                        "id": this.impression_data[slotAdUnitCode].impression_id,
                        "impid": this.impression_data[slotAdUnitCode].impression_id,
                        "price": winningBid.cpm,
                        "nurl": winningBid.nurl || '',
                        "burl": winningBid.burl || '',
                        "lurl": winningBid.lurl || '',
                        "adm": winningBid.ad,
                        "adid": winningBid.adId,
                        "adomain": ((_c = winningBid === null || winningBid === void 0 ? void 0 : winningBid.meta) === null || _c === void 0 ? void 0 : _c.advertiserDomains) || [],
                        "crid": winningBid.creativeId,
                        "w": winningBid.width,
                        "h": winningBid.height,
                        "exp": winningBid.ttl,
                        "ext": {},
                    }
                };
                var bidObj = new Bid_1.Bid(bidResponse, slot);
                // set slot as displayed
                if (__1.globalSettings.prebid.enabled &&
                    slot instanceof Slot_1.default &&
                    slot.prebid.enabled) {
                    slot.displayedBid = bidObj;
                    slot.ad_injected = true;
                    slot.displayedBid.displayed = true;
                    slot.setDisplayed();
                }
                if (bidObj) {
                    Analytics_1.globalAnalytics.sendImpressionAnalytics(bidObj);
                }
            }.bind(this));
        }
        catch (error) {
            // Send error analytics
            Analytics_1.globalAnalytics.sendErrorAnalytics(error, 'PREBID_BIDWON_ERROR');
        }
    };
    AnalyticsPrebid.prototype.gamSlotRenderEnded = function () {
        var _this = this;
        try {
            globalThis.googletag.pubads().addEventListener("slotRenderEnded", (function (event) {
                (0, log_1.logInfo)("Slot", event.slot.getSlotElementId(), "slotRenderEnded");
                var advertiser = __1.globalSettings.gam_advertiser_ids[event.advertiserId];
                if (event.isEmpty || advertiser == 'prebid_ads') {
                    if (event.isEmpty) {
                        (0, log_1.logInfo)("Slot", event.slot.getSlotElementId(), "is empty");
                    }
                    return;
                }
                var gam_slot = event.slot;
                if (gam_slot && gam_slot.getSlotElementId()) {
                    var slotName = gam_slot.getAdUnitPath().split('/').pop() || gam_slot.getAdUnitPath();
                    var slotElementId = gam_slot.getSlotElementId();
                    var slotId = slotElementId.replace('bigcrunch-unit-', '');
                    var gam_targeting = globalThis.pbjs.getAdserverTargeting() || {};
                    if (!_this.impression_data[slotElementId]) {
                        _this.impression_data[slotElementId] = {
                            refresh_count: 0
                        };
                    }
                    else {
                        _this.impression_data[slotElementId].refresh_count++;
                    }
                    _this.impression_data[slotElementId].impression_id = (0, utils_1.generateUUID)(),
                        _this.impression_data[slotElementId].page_id = Page_1.globalPage.id;
                    var slot_gam_targeting = gam_targeting[slotElementId] || {};
                    var floor = 0;
                    var ad_price = 0;
                    var min_bid_to_win = 0;
                    // If not a house ad, calculate the price
                    if (advertiser !== "house_ads") {
                        floor = (Number((slot_gam_targeting === null || slot_gam_targeting === void 0 ? void 0 : slot_gam_targeting.hb_pb) || (gam_slot.getTargeting('hb_pb') || [])[0]) || 0);
                        ad_price = floor + 0.01;
                        min_bid_to_win = floor;
                    }
                    var demand_channel = (advertiser === 'amazon') ? 'Amazon' : 'GAM';
                    var demand_type = (slot_gam_targeting === null || slot_gam_targeting === void 0 ? void 0 : slot_gam_targeting.hb_format) || (gam_slot.getTargeting('hb_format') || [])[0] || 'banner';
                    var amznbid = (gam_slot.getTargeting('amznbid') || [])[0] || '';
                    var amznp = (gam_slot.getTargeting('amznp') || [])[0] || '';
                    var slot = void 0;
                    if (Page_1.globalPage.slots[slotId]) {
                        slot = Page_1.globalPage.slots[slotId];
                    }
                    else {
                        slot = {
                            "id": slotName,
                            "refresh": {
                                "count": _this.impression_data[slotElementId].refresh_count
                            }
                        };
                    }
                    var bidResponse = {
                        "floor": floor,
                        "min_bid_to_win": min_bid_to_win,
                        "demand_type": demand_type,
                        "demand_channel": demand_channel,
                        "bidder": advertiser,
                        "impression_id": _this.impression_data[slotElementId].impression_id,
                        "page_id": _this.impression_data[slotElementId].page_id,
                        "data": {
                            "id": _this.impression_data[slotElementId].impression_id,
                            "impid": _this.impression_data[slotElementId].impression_id,
                            "price": ad_price,
                            "adid": event.advertiserId,
                            "crid": event.campaignId,
                            "w": event.size[0],
                            "h": event.size[1],
                            "ext": {},
                        }
                    };
                    var bidObj = new Bid_1.Bid(bidResponse, slot);
                    if (advertiser === 'amazon') {
                        bidObj.amznbid = amznbid;
                        bidObj.amznp = amznp;
                    }
                    // set slot as displayed
                    if (__1.globalSettings.prebid.enabled &&
                        slot instanceof Slot_1.default &&
                        slot.prebid.enabled) {
                        slot.displayedBid = bidObj;
                        slot.ad_injected = true;
                        slot.displayedBid.displayed = true;
                        slot.setDisplayed();
                    }
                    if (bidObj) {
                        Analytics_1.globalAnalytics.sendImpressionAnalytics(bidObj);
                    }
                }
            }).bind(this));
        }
        catch (error) {
            // Send error analytics
            Analytics_1.globalAnalytics.sendErrorAnalytics(error, 'GAM_BIDWON_ERROR');
        }
    };
    AnalyticsPrebid.prototype.gamImpressionViewable = function () {
        globalThis.googletag.pubads().addEventListener("impressionViewable", function (event) {
            var gam_slot = event.slot;
            if (gam_slot && gam_slot.getSlotElementId()) {
                var slotName = gam_slot.getAdUnitPath().split('/').pop() || gam_slot.getAdUnitPath();
                var slotElementId = gam_slot.getSlotElementId();
                (0, log_1.logInfo)("Impression for slot", slotElementId, "became viewable.");
                var viewabilityObj = {
                    'page_id': (0, utils_1.validateValue)(this.impression_data[slotElementId].page_id, 'string', '', 256),
                    'slot_id': (0, utils_1.validateValue)(slotName, 'string', '', 256),
                    'impression_id': (0, utils_1.validateValue)(this.impression_data[slotElementId].impression_id, 'string', '', 256),
                    'browser_timestamp': (0, utils_1.validateValue)((0, utils_1.getISOTimestamp)(), 'string', '', 256),
                };
                Analytics_1.globalAnalytics.sendAdViewabilityAnalytics(viewabilityObj);
            }
        }.bind(this));
    };
    return AnalyticsPrebid;
}());
exports.AnalyticsPrebid = AnalyticsPrebid;


/***/ }),

/***/ "./src/classes/Auction.ts":
/*!********************************!*\
  !*** ./src/classes/Auction.ts ***!
  \********************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";

var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (g && (g = 0, op[0] && (_ = 0)), _) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", ({ value: true }));
var log_1 = __webpack_require__(/*! ../utils/log */ "./src/utils/log.ts");
var utils_1 = __webpack_require__(/*! ../utils/utils */ "./src/utils/utils.ts");
var __1 = __webpack_require__(/*! .. */ "./src/index.ts");
var AuctionHandler_1 = __webpack_require__(/*! ./AuctionHandler */ "./src/classes/AuctionHandler.ts");
var OpenRtb_1 = __webpack_require__(/*! ./OpenRtb */ "./src/classes/OpenRtb.ts");
var Slot_1 = __importDefault(__webpack_require__(/*! ./Slot */ "./src/classes/Slot.ts"));
var Bid_1 = __webpack_require__(/*! ./Bid */ "./src/classes/Bid.ts");
var ConsentHandler_1 = __webpack_require__(/*! ./consent/ConsentHandler */ "./src/classes/consent/ConsentHandler.ts");
var moduleTypes_1 = __webpack_require__(/*! ../modules/consent/moduleTypes */ "./src/modules/consent/moduleTypes.ts");
var activities_1 = __webpack_require__(/*! ../modules/consent/activities */ "./src/modules/consent/activities.ts");
var UserSync_1 = __webpack_require__(/*! ./UserSync */ "./src/classes/UserSync.ts");
var Storage_1 = __importDefault(__webpack_require__(/*! ./Storage */ "./src/classes/Storage.ts"));
var Page_1 = __webpack_require__(/*! ./Page */ "./src/classes/Page.ts");
var envVars_1 = __webpack_require__(/*! ../envVars */ "./src/envVars.ts");
var Auction = /** @class */ (function () {
    function Auction() {
        this._id = '';
        this.endpoint = "https://".concat(envVars_1.endpoint_prefix, "pulsar.bigcrunch.com/s2s/bids");
        this.openRtb = {};
        this.slots = [];
        this.done = false;
        this._id = (0, utils_1.generateUUID)();
    }
    Object.defineProperty(Auction.prototype, "id", {
        get: function () {
            return this._id;
        },
        enumerable: false,
        configurable: true
    });
    Auction.prototype.init = function () {
        try {
            if (!this.openRtb || !Object.keys(this.openRtb).length) {
                this.openRtb = OpenRtb_1.ortbObject;
            }
        }
        catch (err) {
            (0, log_1.logWarn)("Error initializing auction.", err);
        }
    };
    /**
     * Function to add slots to payload
     * @param slots
     * @returns void
     */
    Auction.prototype.addSlotsToAuction = function (slots) {
        var _a;
        (_a = this.slots).push.apply(_a, slots);
    };
    /**
     * Function to prepare payload
     * @returns object
     */
    Auction.prototype.preparePayload = function () {
        var _a, _b;
        // prepare payload
        var payload = {
            property_id: __1.globalSettings.property_id,
            auction_id: this._id,
            page_id: Page_1.globalPage.id,
            ortb: this.openRtb,
            slots: {},
            bidders: {},
            cookies: {},
            consent: (_a = {},
                _a[activities_1.ACTIVITY_ACCESS_DEVICE] = ConsentHandler_1.allConsentHandler.isActivityAllowed(activities_1.ACTIVITY_ACCESS_DEVICE, { 'componentType': moduleTypes_1.MODULE_TYPE_BIDDER, 'gvlid': {} }),
                _a[activities_1.ACTIVITY_TRANSMIT_EIDS] = ConsentHandler_1.allConsentHandler.isActivityAllowed(activities_1.ACTIVITY_TRANSMIT_EIDS, { 'componentType': moduleTypes_1.MODULE_TYPE_BIDDER, 'gvlid': {} }),
                _a[activities_1.ACTIVITY_TRANSMIT_PRECISE_GEO] = ConsentHandler_1.allConsentHandler.isActivityAllowed(activities_1.ACTIVITY_TRANSMIT_PRECISE_GEO, { 'componentType': moduleTypes_1.MODULE_TYPE_BIDDER, 'gvlid': {} }),
                _a),
        };
        // slot name to slot object map
        var slotNameToSlots = {};
        var slotIdsWithNoBcBidders = [];
        // loop through slots
        this.slots.forEach(function (slot) {
            // check if slot has sizes
            if (slot.sizes.length) {
                var payloadSlot = {
                    id: slot.id,
                    name: slot.name,
                    slotid: slot.slot_id,
                    divid: slot.div_id,
                    sizes: slot.sizes,
                    floor: slot.floor || 0.10
                };
                // add slot to payload
                payload.slots[slot.slot_id] = payloadSlot;
                // add slot name to slots map
                if (!slotNameToSlots[slot.name]) {
                    slotNameToSlots[slot.name] = [];
                }
                slotNameToSlots[slot.name].push(slot);
                // add slot to no bidders list unitl a bidder is found
                slotIdsWithNoBcBidders.push(slot.slot_id);
            }
        });
        // copy bidders from global settings
        var bidders = (0, utils_1.deepCopy)(__1.globalSettings.bidders);
        // loop through bidders
        for (var bidder_name in bidders) {
            // get bidder
            var bidder = bidders[bidder_name];
            // check if test is enabled
            if (__1.globalSettings.test.enabled && __1.globalSettings.test.bidders.length) {
                // check if bidder is in test bidders
                if (!__1.globalSettings.test.bidders.includes(bidder_name)) {
                    // delete bidder
                    delete bidders[bidder_name];
                    continue;
                }
                // check if bidder is enabled
            }
            else if (!bidder.config.enabled) {
                // delete bidder
                delete bidders[bidder_name];
                continue;
            }
            // check if user id exists in storage
            var buyeruid = UserSync_1.globalUserSync.getUserIdFromStorage(bidder_name);
            if (buyeruid) {
                bidder.config.buyeruid = buyeruid;
                // add buyeruid to payload cookies
                payload.cookies["".concat(UserSync_1.USYNC_STORAGE_PREFIX).concat(bidder_name)] = buyeruid;
            }
            var bidderSlots = (0, utils_1.deepCopy)(bidder.slots);
            bidder.slots = {};
            // loop through bidder slots
            for (var slot_name in bidderSlots) {
                // check if slot exists in payload
                if (slotNameToSlots[slot_name] &&
                    slotNameToSlots[slot_name].length) {
                    var _loop_1 = function (slot) {
                        var slot_id = slot.slot_id;
                        bidder.slots[slot_id] = [];
                        for (var tag_index in bidderSlots[slot_name]) {
                            var tag_config = bidderSlots[slot_name][tag_index];
                            // get all sizes that are in both bidder and payload slots arrays
                            var sizes = tag_config["sizes"].filter(function (size) {
                                return payload.slots[slot_id].sizes.includes(size);
                            });
                            if (sizes.length) {
                                // add slot to bidder
                                tag_config["sizes"] = sizes;
                                bidder.slots[slot_id].push(tag_config);
                            }
                        }
                        if (!bidder.slots[slot_id].length) {
                            // delete slot from bidder
                            delete bidder.slots[slot_id];
                            return "continue";
                        }
                        else if (slotIdsWithNoBcBidders.indexOf(slot_id) !== -1) {
                            // remove slot from no bidders list
                            slotIdsWithNoBcBidders.splice(slotIdsWithNoBcBidders.indexOf(slot_id), 1);
                        }
                    };
                    for (var _i = 0, _c = slotNameToSlots[slot_name]; _i < _c.length; _i++) {
                        var slot = _c[_i];
                        _loop_1(slot);
                    }
                }
            }
            if (!Object.keys(bidder.slots).length) {
                // delete bidder
                delete bidders[bidder_name];
            }
            else {
                // add consent to bidder
                bidders[bidder_name].consent = (_b = {},
                    _b[activities_1.ACTIVITY_ACCESS_DEVICE] = ConsentHandler_1.allConsentHandler.isActivityAllowed(activities_1.ACTIVITY_ACCESS_DEVICE, { 'componentType': moduleTypes_1.MODULE_TYPE_BIDDER, 'componentName': bidder_name }),
                    _b[activities_1.ACTIVITY_TRANSMIT_EIDS] = ConsentHandler_1.allConsentHandler.isActivityAllowed(activities_1.ACTIVITY_TRANSMIT_EIDS, { 'componentType': moduleTypes_1.MODULE_TYPE_BIDDER, 'componentName': bidder_name }),
                    _b[activities_1.ACTIVITY_TRANSMIT_PRECISE_GEO] = ConsentHandler_1.allConsentHandler.isActivityAllowed(activities_1.ACTIVITY_TRANSMIT_PRECISE_GEO, { 'componentType': moduleTypes_1.MODULE_TYPE_BIDDER, 'componentName': bidder_name }),
                    _b);
            }
        }
        // Log BigCrunch auction finished for slots with no bidders
        if (slotIdsWithNoBcBidders.length) {
            for (var _d = 0, slotIdsWithNoBcBidders_1 = slotIdsWithNoBcBidders; _d < slotIdsWithNoBcBidders_1.length; _d++) {
                var slot_id = slotIdsWithNoBcBidders_1[_d];
                var slot = Page_1.globalPage.slots[slot_id];
                if (slot instanceof Slot_1.default) {
                    slot.auctionFinished([]);
                    delete payload.slots[slot.slot_id];
                }
            }
        }
        if (Object.keys(bidders).length) {
            payload.bidders = bidders;
        }
        return payload;
    };
    /**
     * Function to send auction request to server URL
     */
    Auction.prototype.sendAuctionRequest = function () {
        return __awaiter(this, void 0, void 0, function () {
            var event, payload, endpoint;
            var _this = this;
            return __generator(this, function (_a) {
                event = new CustomEvent('BcAuctionSend', { detail: this });
                document.dispatchEvent(event);
                // if slots lnegth is 0 then return
                if (!this.slots.length) {
                    (0, log_1.logInfo)("Auction: No slots to send auction request.");
                    return [2 /*return*/, false];
                }
                payload = this.preparePayload();
                if ((!payload.bidders ||
                    !Object.keys(payload.bidders).length) ||
                    (!payload.slots ||
                        !Object.keys(payload.slots).length)) {
                    // set auction finished
                    AuctionHandler_1.auctionHandler.auctionFinished(this);
                    (0, log_1.logInfo)("Auction: No bidders or slots to send auction request.");
                    return [2 /*return*/, false];
                }
                (0, log_1.logInfo)("Sending Auction Request.");
                endpoint = this.endpoint + (__1.globalSettings.test.enabled && __1.globalSettings.test.ads ? '/test' : '');
                // Send post request with JSON payload using fetch API with timeout
                (0, utils_1.fetchWithTimeout)(endpoint, 2000, {
                    method: 'POST',
                    body: JSON.stringify(payload),
                    headers: new Headers({
                        'Content-Type': 'application/json',
                    }),
                    credentials: 'include',
                })
                    .then(function (response) {
                    // set done to true
                    _this.done = true;
                    // get response json
                    return response.json();
                }).then(function (json) {
                    // parse response
                    _this.parseResponse(json);
                }).catch(function (err) {
                    (0, log_1.logWarn)("Error sending auction request.", err);
                }).finally(function () {
                    // set auction finished
                    AuctionHandler_1.auctionHandler.auctionFinished(_this);
                });
                return [2 /*return*/, true];
            });
        });
    };
    Auction.prototype.parseResponse = function (json) {
        if (json.slots && Object.keys(json.slots).length) {
            var _loop_2 = function (slot_id) {
                // get slot
                var slot = this_1.slots.find(function (slot) {
                    return slot.slot_id === slot_id;
                });
                if (slot) {
                    var bids = (json.slots[slot_id].bids || []).map(function (bid) { return new Bid_1.Bid(bid, slot); });
                    // add bids to slot
                    slot.auctionFinished(bids);
                }
            };
            var this_1 = this;
            for (var slot_id in json.slots) {
                _loop_2(slot_id);
            }
        }
        if (json.cookies &&
            ConsentHandler_1.allConsentHandler.isActivityAllowed(activities_1.ACTIVITY_ACCESS_DEVICE, { gvlid: {} })) {
            for (var cookie_name in json.cookies) {
                var bidder_name = cookie_name.replace(UserSync_1.USYNC_STORAGE_PREFIX, '');
                var storageObj = { 'componentType': moduleTypes_1.MODULE_TYPE_BIDDER, 'componentName': bidder_name };
                // check if cookie exists
                if (Storage_1.default.getItemFromStorage(cookie_name, storageObj)) {
                    // check if cookie value is different
                    if (Storage_1.default.getItemFromStorage(cookie_name, storageObj) !== json.cookies[cookie_name]) {
                        // update cookie
                        Storage_1.default.setItemInStorage(cookie_name, json.cookies[cookie_name], storageObj);
                    }
                }
                else {
                    // set cookie
                    Storage_1.default.setItemInStorage(cookie_name, json.cookies[cookie_name], storageObj);
                }
            }
        }
    };
    return Auction;
}());
exports["default"] = Auction;


/***/ }),

/***/ "./src/classes/AuctionHandler.ts":
/*!***************************************!*\
  !*** ./src/classes/AuctionHandler.ts ***!
  \***************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";

var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (g && (g = 0, op[0] && (_ = 0)), _) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.auctionHandler = void 0;
var ConsentHandler_1 = __webpack_require__(/*! ./consent/ConsentHandler */ "./src/classes/consent/ConsentHandler.ts");
var Auction_1 = __importDefault(__webpack_require__(/*! ./Auction */ "./src/classes/Auction.ts"));
var UserSync_1 = __webpack_require__(/*! ./UserSync */ "./src/classes/UserSync.ts");
var __1 = __webpack_require__(/*! .. */ "./src/index.ts");
var log_1 = __webpack_require__(/*! ../utils/log */ "./src/utils/log.ts");
var AuctionHandler = /** @class */ (function () {
    function AuctionHandler() {
        this.queued_auction = null;
        this.active_auctions = new Map();
        this.finished_auctions = new Map();
        this.timout = null;
    }
    AuctionHandler.prototype.initNewAuction = function () {
        // check if auction is already queued
        if (!this.queued_auction) {
            // create new auction
            this.queued_auction = new Auction_1.default();
        }
        return this.queued_auction;
    };
    AuctionHandler.prototype.addSlotsToAuction = function (slots) {
        this.initNewAuction();
        this.queued_auction.addSlotsToAuction(slots);
        return this.queued_auction;
    };
    AuctionHandler.prototype.sendAuctionRequest = function (delay) {
        var _this = this;
        if (delay === void 0) { delay = 100; }
        if (this.queued_auction && this.queued_auction.slots.length > 0) {
            if (this.timout) {
                clearTimeout(this.timout);
                this.timout = null;
            }
            if (delay) {
                this.timout = setTimeout((function () {
                    // Queue commands for execution when consent is ready
                    ConsentHandler_1.allConsentHandler.cmd.push((function () {
                        if (ConsentHandler_1.allConsentHandler.checkIfMissing()) {
                            (0, log_1.logInfo)("AuctionHandler: Missing Consent");
                            ConsentHandler_1.allConsentHandler.loadIfMissing((function () {
                                (0, log_1.logInfo)("AuctionHandler: Load If Missing Callback");
                                // Sync users
                                UserSync_1.globalUserSync.syncUsers(__1.globalSettings.user_syncs, __1.globalSettings.bidders);
                                // TODO: Run Indentity Adapters
                                if (_this.queued_auction) {
                                    // init auction
                                    _this.queued_auction.init();
                                    _this.send();
                                }
                            }).bind(_this));
                        }
                        else {
                            if (_this.queued_auction) {
                                _this.queued_auction.init();
                                _this.send();
                            }
                        }
                    }).bind(_this));
                }).bind(this), delay);
            }
            else {
                this.queued_auction.init();
                this.send();
            }
        }
    };
    AuctionHandler.prototype.send = function () {
        return __awaiter(this, void 0, void 0, function () {
            var auction_id;
            return __generator(this, function (_a) {
                (0, log_1.logInfo)("AuctionHandler: send");
                if (UserSync_1.globalUserSync.ready) {
                    if (this.queued_auction) {
                        auction_id = this.queued_auction.id;
                        this.active_auctions.set(this.queued_auction.id, this.queued_auction);
                        this.queued_auction = null;
                        this.active_auctions.get(auction_id).sendAuctionRequest();
                    }
                }
                else {
                    UserSync_1.globalUserSync.callback = this.send.bind(this);
                }
                return [2 /*return*/];
            });
        });
    };
    AuctionHandler.prototype.auctionFinished = function (auction) {
        this.active_auctions.delete(auction.id);
        this.finished_auctions.set(auction.id, auction);
        // fire custom event that auction has finished
        var event = new CustomEvent('BcAuctionFinished', { detail: auction });
        document.dispatchEvent(event);
    };
    return AuctionHandler;
}());
exports.auctionHandler = new AuctionHandler();


/***/ }),

/***/ "./src/classes/Bid.ts":
/*!****************************!*\
  !*** ./src/classes/Bid.ts ***!
  \****************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.replaceMacros = exports.Bid = void 0;
var Analytics_1 = __webpack_require__(/*! ./Analytics */ "./src/classes/Analytics.ts");
var log_1 = __webpack_require__(/*! ../utils/log */ "./src/utils/log.ts");
var DEFAULT_BID_EXPIRATION = 30; // 30 seconds
var Bid = /** @class */ (function () {
    function Bid(bidResponse, slotObj) {
        this.floor = 0;
        this.min_bid_to_win = 0;
        this.impression_id = '';
        this.auction_id = '';
        this.bidid = '';
        this.page_id = '';
        this.displayed = false;
        this.demand_channel = '';
        this.data = {
            id: '',
            impid: '',
            price: 0,
            nurl: '',
            burl: '',
            lurl: '',
            adm: '',
            adid: '',
            adomain: [],
            bundle: '',
            iurl: '',
            cid: '',
            crid: '',
            tactic: '',
            cat: [],
            attr: [],
            api: [],
            protocol: 0,
            qagmediarating: 0,
            language: '',
            dealid: '',
            w: 0,
            h: 0,
            wratio: 0,
            hratio: 0,
            exp: DEFAULT_BID_EXPIRATION,
            ext: {},
        };
        // Set slot object
        this.slotObj = slotObj;
        //set floor
        this.floor = bidResponse.floor;
        // Set min bid to win
        this.min_bid_to_win = bidResponse.min_bid_to_win;
        // Set demand type
        this.demand_type = bidResponse.demand_type;
        // Set demand channel
        this.demand_channel = bidResponse.demand_channel;
        // Set bidder name
        this.bidder = bidResponse.bidder;
        // Set impression id
        this.impression_id = bidResponse.impression_id;
        // Set auction id
        this.auction_id = bidResponse.auction_id;
        // Set bid id
        this.bidid = bidResponse.bidid;
        // Set page id
        this.page_id = bidResponse.page_id;
        // Set data
        Object.assign(this.data, bidResponse.data);
        // Set expiration from current time
        this.expiration = Date.now() + ((this.data.exp || DEFAULT_BID_EXPIRATION) * 1000);
        // Set viewability
        this.viewability = {
            timeout_left: 2000,
            timer: null,
            pixel_sent: false,
            video_duration_met: false,
            inview_duration_met: false,
        };
    }
    Bid.prototype.isExpired = function () {
        return Date.now() > this.expiration;
    };
    Bid.prototype.setViewabilityTimer = function () {
        var _this = this;
        // set a timer for 2 seconds if the slot is inview
        if (this.displayed &&
            !this.viewability.pixel_sent &&
            this.viewability.timer === null &&
            this.slotObj.viewability.inview) {
            setTimeout(function () {
                (0, log_1.logInfo)('Viewability duration met');
                _this.viewability.inview_duration_met = true;
                _this.sendViewabilityPixel();
            }, this.viewability.timeout_left);
        }
    };
    // Clear viewability timer but save time since displayed
    Bid.prototype.clearViewabilityTimer = function () {
        if (this.viewability.timer) {
            clearTimeout(this.viewability.timer);
            this.viewability.timer = null;
        }
        if (!this.viewability.pixel_sent) {
            var time_inview_since_displayed = this.slotObj.viewability.time_inview_since_displayed;
            this.viewability.timeout_left = Math.max(this.viewability.timeout_left - time_inview_since_displayed, 0);
        }
    };
    Bid.prototype.setVideoViewabilityMet = function () {
        (0, log_1.logInfo)('Video viewability met');
        this.viewability.video_duration_met = true;
        this.sendViewabilityPixel();
    };
    Bid.prototype.sendViewabilityPixel = function () {
        if (!this.viewability.pixel_sent &&
            this.viewability.inview_duration_met &&
            (this.demand_type !== 'video' ||
                this.viewability.video_duration_met)) {
            (0, log_1.logInfo)('Sending viewability pixel');
            this.viewability.pixel_sent = true;
            Analytics_1.globalAnalytics.sendAdViewabilityAnalytics(this);
        }
    };
    // Send provisional win notice
    Bid.prototype.sendNurlPixel = function () {
        if (this.data.nurl) {
            // replace macros
            var nurl = replaceMacros(this.data.nurl, this);
            // send impression analytics
            var impression = new Image();
            impression.src = nurl;
        }
    };
    Bid.prototype.sendImpressionAnalytics = function () {
        this.displayed = true;
        this.slotObj.setDisplayed();
        if (this.data.burl) {
            // replace macros
            // replace macros
            var burl = replaceMacros(this.data.burl, this);
            // send impression analytics
            var impression = new Image();
            impression.src = burl;
        }
        Analytics_1.globalAnalytics.sendImpressionAnalytics(this);
    };
    return Bid;
}());
exports.Bid = Bid;
function replaceMacros(url, bid) {
    var _a, _b, _c, _d;
    try {
        return url.replace(/\${AUCTION_ID}/g, bid.auction_id || '')
            .replace(/\${AUCTION_BID_ID}/g, bid.bidid || '')
            .replace(/\${AUCTION_IMP_ID}/g, ((_a = bid.data) === null || _a === void 0 ? void 0 : _a.impid) || '')
            .replace(/\${AUCTION_AD_ID}/g, ((_b = bid.data) === null || _b === void 0 ? void 0 : _b.adid) || '')
            .replace(/\${AUCTION_PRICE}/g, ((_d = (_c = bid.data) === null || _c === void 0 ? void 0 : _c.price) === null || _d === void 0 ? void 0 : _d.toString()) || '')
            .replace(/\${AUCTION_CURRENCY}/g, 'USD');
    }
    catch (e) {
        console.error(e);
        return url;
    }
}
exports.replaceMacros = replaceMacros;


/***/ }),

/***/ "./src/classes/OpenRtb.ts":
/*!********************************!*\
  !*** ./src/classes/OpenRtb.ts ***!
  \********************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";

var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.ortbObject = exports.OpenRtb = void 0;
// import Bid from './Bid';
var ua_parser_js_1 = __importDefault(__webpack_require__(/*! ua-parser-js */ "./node_modules/ua-parser-js/src/ua-parser.js"));
var utils_1 = __webpack_require__(/*! ../utils/utils */ "./src/utils/utils.ts");
var ConsentHandler_1 = __webpack_require__(/*! ./consent/ConsentHandler */ "./src/classes/consent/ConsentHandler.ts");
var __1 = __webpack_require__(/*! .. */ "./src/index.ts");
var IdentityAdapeterHandler_1 = __webpack_require__(/*! ./identityAdapters/IdentityAdapeterHandler */ "./src/classes/identityAdapters/IdentityAdapeterHandler.ts");
var User_1 = __webpack_require__(/*! ./User */ "./src/classes/User.ts");
/**
 * @class OpenRtb
 * @description Class to create an OpenRTB Object
 * OpenRTB 2.5 Spec: https://www.iab.com/wp-content/uploads/2016/03/OpenRTB-API-Specification-Version-2-5-FINAL.pdf
 */
var OpenRtb = /** @class */ (function () {
    function OpenRtb() {
    }
    /**
     * @param {Object} json - JSON Object
     * @returns {Object} - OpenRTB Object
     * @description Returns the OpenRTB Object
     */
    OpenRtb.prototype.initObj = function (json) {
        if (json === void 0) { json = {}; }
        // Set test mode
        var test = __1.globalSettings.test.enabled && __1.globalSettings.test.ids ? 1 : 0;
        // Set default values
        var defaultJson = {
            id: (0, utils_1.generateUUID)(),
            at: 1,
            imp: [],
            site: this.createSiteObj(),
            device: this.createDeviceObj(),
            user: this.createUserObj(),
            regs: this.createRegsObj(),
            source: this.createSourceObj(),
            cur: ["USD"],
            test: test,
            tmax: 450,
            ext: {}, // Ext Object
        };
        return (0, utils_1.deepMerge)(defaultJson, json);
    };
    OpenRtb.prototype.createSiteObj = function () {
        var _a;
        var url = (0, utils_1.getURL)();
        var referrer = ((_a = (0, utils_1.getReferrer)()) === null || _a === void 0 ? void 0 : _a.href) || "";
        return {
            // id: "", // Site ID
            name: __1.globalSettings.site_name || "",
            domain: url.hostname || "",
            page: url.href || "",
            ref: referrer || "",
            search: url.search || "",
            publisher: this.createPublisherObj(url), // Publisher Object
            // mobile: "", // Mobile-optimized site
            // cat: [], // Array of IAB content categories
            // sectioncat: [], // Array of IAB content categories
            // pagecat: [], // Array of IAB content categories
            // content: {}, // Content Object
            // keywords: "", // Comma separated list of keywords
            // ext: {}, // Ext Object
        };
    };
    OpenRtb.prototype.createPublisherObj = function (url) {
        return {
            // id: "", // Publisher ID
            name: __1.globalSettings.site_name || "",
            // cat: [], // Array of IAB content categories
            domain: url.hostname || "", // Publisher Domain
            // ext: {}, // Ext Object
        };
    };
    /**
     * @returns {Object} - Device Object
     * @description Creates a Device Object
     */
    OpenRtb.prototype.createDeviceObj = function () {
        // Parse User Agent
        var ua = new ua_parser_js_1.default((0, utils_1.getUserAgent)());
        // Set device type
        var devicetype = 0;
        switch (ua.getDevice().type) {
            case 'mobile':
                devicetype = 4;
                break;
            case 'tablet':
                devicetype = 5;
                break;
            case 'smarttv':
                devicetype = 3;
                break;
            case 'console':
                devicetype = 2;
                break;
            default:
                devicetype = 2;
                break;
        }
        return {
            ua: (0, utils_1.getUserAgent)() || "",
            geo: this.createGeoObj(),
            dnt: (0, utils_1.getDNT)() || 0,
            devicetype: devicetype,
            make: ua.getDevice().vendor || "",
            model: ua.getDevice().model || "",
            os: ua.getOS().name || "",
            osv: ua.getOS().version || "",
            // hwv: "",
            // h: 0,
            // w: 0,
            js: 1,
            language: (0, utils_1.getBrowserLanguage)(), // Browser language using ISO-639-1-alpha-2
            // connectiontype: 0, // 0 = Unknown, 1 = Ethernet, 2 = WIFI, 3 = Cellular Network – Unknown Generation, 4 = Cellular Network – 2G, 5 = Cellular Network – 3G, 6 = Cellular Network – 4G
            // ext: {}, // Ext Object
        };
    };
    /**
     * @returns {Object} - Geo Object
     * @description Creates a Geo Object
     */
    OpenRtb.prototype.createGeoObj = function () {
        return {};
    };
    /**
     * @returns {Object} - User Object
     * @description Creates a User Object
     */
    OpenRtb.prototype.createUserObj = function () {
        var eids = IdentityAdapeterHandler_1.globalIdentityAdapeterHandler.getUserIdsAsEids() || [];
        return {
            id: User_1.globalUser.getUUID(),
            buyeruid: "",
            geo: this.createGeoObj(),
            // data: [], // Data Object
            ext: {
                consent: ConsentHandler_1.gdprConsentHandler.getGdprString(),
                eids: eids, // Array of User ID Objects
            }
        };
    };
    /**
     * @returns {Object} - Regs Object
     * @description Creates a Regs Object
     */
    OpenRtb.prototype.createRegsObj = function () {
        var gpp = ConsentHandler_1.gppConsentHandler.getGppString();
        var gpp_sid = ConsentHandler_1.gppConsentHandler.getApplicableSections();
        var regs = {
            coppa: Number(ConsentHandler_1.coppaDataHandler.getCoppa()),
            ext: {
                gdpr: Number(ConsentHandler_1.gdprConsentHandler.getGdprApplies()),
                us_privacy: ConsentHandler_1.uspConsentHandler.getUsPrivacy(),
                gpp: gpp,
                gpp_sid: gpp_sid,
            }
        };
        if (!gpp || !gpp_sid.length || gpp_sid.includes(-1)) {
            delete regs.ext.gpp;
            delete regs.ext.gpp_sid;
        }
        return regs;
    };
    /**
     * @returns {Object} - Source Object
     * @description Creates a Source Object
     */
    OpenRtb.prototype.createSourceObj = function () {
        return {
            tid: (0, utils_1.generateUUID)(),
            ext: {
                schain: __1.globalSettings.schain || { complete: 1, nodes: [], ver: "1.0" },
            }
        };
    };
    return OpenRtb;
}());
exports.OpenRtb = OpenRtb;
exports.ortbObject = new OpenRtb();


/***/ }),

/***/ "./src/classes/Page.ts":
/*!*****************************!*\
  !*** ./src/classes/Page.ts ***!
  \*****************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";

var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.globalPage = exports.Page = void 0;
var utils_1 = __webpack_require__(/*! ../utils/utils */ "./src/utils/utils.ts");
var Slot_1 = __importDefault(__webpack_require__(/*! ./Slot */ "./src/classes/Slot.ts"));
var Analytics_1 = __webpack_require__(/*! ./Analytics */ "./src/classes/Analytics.ts");
var Page = /** @class */ (function () {
    function Page() {
        this.slots = {};
        this.isTabActive = true;
        this.page_analytics_logged = false;
        this.slot_instance_counter = {};
    }
    Page.prototype.init = function () {
        // generate page id
        this.id = (0, utils_1.generateUUID)();
        // detect viewport width change
        this.detectViewportWidthChange();
        // send page data to server
        Analytics_1.globalAnalytics.sendSessionPageAnalytics();
    };
    /**
     * Build slots
     * @param slots
     * @description Build slots from config
     * @returns void
     */
    Page.prototype.buildSlots = function (slots) {
        // loop through slots
        for (var slotName in slots) {
            // get slot config
            var slotConfig = slots[slotName];
            // search page for slot
            var elements = this.searchPageDomForSlot(slotConfig.css_selector);
            if (elements.length) {
                // loop through elements
                for (var _i = 0, elements_1 = elements; _i < elements_1.length; _i++) {
                    var element = elements_1[_i];
                    // If slot found
                    if (element instanceof HTMLElement) {
                        // set reference element
                        slotConfig.referenceElement = element;
                        // increment slot instance counter
                        if (slotConfig.name in this.slot_instance_counter) {
                            this.slot_instance_counter[slotConfig.name]++;
                        }
                        else {
                            this.slot_instance_counter[slotConfig.name] = 0;
                        }
                        slotConfig.instance_number = this.slot_instance_counter[slotConfig.name];
                        // create slot
                        var slot = new Slot_1.default(slotConfig);
                        // build slot
                        if (slot.buildSlot()) {
                            // add slot to page
                            this.slots[slot.slot_id] = slot;
                        }
                    }
                }
            }
        }
    };
    /**
     * Search page for slot
     * @param css_selector
     * @returns Element | boolean
     * @description Search page for slot by css selector
     */
    Page.prototype.searchPageDomForSlot = function (css_selector) {
        var elements = document.querySelectorAll("".concat(css_selector, ":not(.bigcrunch-unit-injected)")) || [];
        if (elements.length) {
            return elements;
        }
        return [];
    };
    /**
     * Detect when viewport width changes
     */
    Page.prototype.detectViewportWidthChange = function () {
        var _this = this;
        var width = (0, utils_1.getPageWidth)();
        window.addEventListener('resize', function () {
            if (width !== (0, utils_1.getPageWidth)()) {
                // loop through slots and update sizes array for each slot
                for (var slotName in _this.slots) {
                    var slot = _this.slots[slotName];
                    if (slot instanceof Slot_1.default) {
                        slot.setSizes();
                    }
                }
            }
        });
    };
    Page.prototype.handleTabVisabilityStateChange = function (isTabActive) {
        this.isTabActive = isTabActive;
        // loop through slots
        for (var slotName in this.slots) {
            var slot = this.slots[slotName];
            if (slot instanceof Slot_1.default) {
                if (!this.isTabActive) {
                    slot.handleViewabilityChange(this.isTabActive);
                    slot.removeViewabilityTracker();
                    slot.removeLazyloadTrackers();
                }
                else {
                    slot.setViewabilityTracker();
                    slot.setLazyLoadTrackers();
                }
            }
        }
    };
    return Page;
}());
exports.Page = Page;
exports.globalPage = new Page();


/***/ }),

/***/ "./src/classes/Prebid.ts":
/*!*******************************!*\
  !*** ./src/classes/Prebid.ts ***!
  \*******************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";

var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.Prebid = void 0;
var Slot_1 = __importDefault(__webpack_require__(/*! ./Slot */ "./src/classes/Slot.ts"));
var Auction_1 = __importDefault(__webpack_require__(/*! ./Auction */ "./src/classes/Auction.ts"));
var __1 = __webpack_require__(/*! .. */ "./src/index.ts");
var User_1 = __webpack_require__(/*! ./User */ "./src/classes/User.ts");
var Analytics_1 = __webpack_require__(/*! ./Analytics */ "./src/classes/Analytics.ts");
var utils_1 = __webpack_require__(/*! ../utils/utils */ "./src/utils/utils.ts");
var log_1 = __webpack_require__(/*! ../utils/log */ "./src/utils/log.ts");
var envVars_1 = __webpack_require__(/*! ../envVars */ "./src/envVars.ts");
var Prebid = /** @class */ (function () {
    function Prebid(property_id) {
        this.adUnits = {};
        this.gamAdUnits = {};
        try {
            // load gpt
            this.loadGpt();
            this.initGpt();
            // load prebid
            this.loadPrebid(property_id);
            this.initPrebid();
        }
        catch (error) {
            console.error('Error:', error);
        }
    }
    Prebid.prototype.loadGpt = function () {
        // check if gpt is already loaded
        if (globalThis.googletag &&
            (globalThis.googletag._loaded_ ||
                globalThis.googletag._loadStarted_)) {
            return;
        }
        // load prebid tag
        globalThis.pbjs = globalThis.pbjs || {};
        globalThis.pbjs.que = globalThis.pbjs.que || [];
        // add gpt library
        var gpt = document.createElement('script');
        gpt.src = 'https://securepubads.g.doubleclick.net/tag/js/gpt.js';
        gpt.async = true;
        document.head.appendChild(gpt);
    };
    Prebid.prototype.initGpt = function () {
        globalThis.googletag.cmd.push(function () {
            globalThis.googletag.pubads().disableInitialLoad();
            globalThis.googletag.pubads().enableSingleRequest();
            globalThis.googletag.pubads().setPublisherProvidedId(User_1.globalUser.getUUID());
            globalThis.googletag.enableServices();
        });
    };
    Prebid.prototype.loadPrebid = function (property_id) {
        // load prebid
        globalThis.pbjs = globalThis.pbjs || {};
        globalThis.pbjs.que = globalThis.pbjs.que || [];
        // check if prebid is already loaded
        if (globalThis.pbjs && globalThis.pbjs.libLoaded) {
            return;
        }
        globalThis.pbjs.bidderSettings = {
            standard: {
                storageAllowed: true
            }
        };
        // add prebid library
        var prebid_payload = document.createElement('script');
        prebid_payload.src = "https://".concat(envVars_1.endpoint_prefix, "ship.bigcrunch.com/prebid/").concat(property_id, ".js");
        prebid_payload.async = true;
        // prebid_payload.onload = function() {
        //     globalThis.pbjs.libLoaded = true;
        // }
        prebid_payload.onerror = function () {
            var error_message = "Prebid failed to load";
            // Create a new standard Error object
            var error = new Error(error_message);
            // Handle the error logging.
            (0, log_1.logError)(error);
            // Send error analytics
            Analytics_1.globalAnalytics.sendErrorAnalytics(error, 'PREBID_LOAD_ERROR');
        };
        document.head.appendChild(prebid_payload);
    };
    Prebid.prototype.initPrebid = function () {
        globalThis.pbjs.que.push(function () {
            var _a, _b, _c, _d, _e, _f;
            if (__1.globalSettings.consent_country_code !== 'EU') {
                (0, utils_1.deepSetValue)(__1.globalSettings, 'prebid.config.consentManagement.gdpr', {
                    cmpApi: 'static',
                    consentData: {
                        getTCData: {
                            tcString: '',
                            gdprApplies: false,
                        }
                    },
                    defaultGdprScope: false,
                });
            }
            // Overwite cmp section names
            if (((_a = globalThis === null || globalThis === void 0 ? void 0 : globalThis.BigcrunchCmpTag) === null || _a === void 0 ? void 0 : _a.loaded) &&
                ((_c = (_b = __1.globalSettings === null || __1.globalSettings === void 0 ? void 0 : __1.globalSettings.cmp[__1.globalSettings.consent_country_code]) === null || _b === void 0 ? void 0 : _b.fc_fallback) === null || _c === void 0 ? void 0 : _c.mspa)) {
                (0, utils_1.deepSetValue)(__1.globalSettings, 'prebid.config.consentManagement.gpp.mspa', (_e = (_d = __1.globalSettings.cmp[__1.globalSettings.consent_country_code]) === null || _d === void 0 ? void 0 : _d.fc_fallback) === null || _e === void 0 ? void 0 : _e.mspa);
            }
            if ((_f = __1.globalSettings === null || __1.globalSettings === void 0 ? void 0 : __1.globalSettings.prebid) === null || _f === void 0 ? void 0 : _f.config) {
                globalThis.pbjs.setConfig(__1.globalSettings.prebid.config);
            }
        });
        // listen for custom event to build slots
        document.addEventListener('BcSlotBuilt', function (event) {
            if (event.detail instanceof Slot_1.default) {
                var slot = event.detail;
                this.buildAdUnit(slot);
            }
        }.bind(this));
        // listen for custom event to refresh slots
        document.addEventListener('BcSlotRefresh', function (event) {
            if (event.detail instanceof Slot_1.default) {
                var slot = event.detail;
                // reset prebid values
                slot.prebid.header_winning_bid = null,
                    slot.prebid.header_auction_started = false,
                    slot.prebid.header_auction_finished = false,
                    slot.prebid.gam_auction_started = false,
                    slot.prebid.gam_auction_finished = false;
            }
        });
        // listen for custom event to build slots
        document.addEventListener('BcSlotRemoved', function (event) {
            if (event.detail instanceof Slot_1.default) {
                var slot = event.detail;
                this.removeAdUnit(slot);
            }
        }.bind(this));
        // listen for custom event to build slots
        document.addEventListener('BcAuctionSend', function (event) {
            if (event.detail instanceof Auction_1.default) {
                var auction = event.detail;
                this.sendAuctionRequest(auction);
            }
        }.bind(this));
        // listen for custom event to build slots
        document.addEventListener('BcAuctionFinished', function (event) {
            if (event.detail instanceof Auction_1.default) {
                var auction = event.detail;
                this.bcAuctionFinished(auction);
            }
        }.bind(this));
        // listen for custom event to build slots
        document.addEventListener('AmazonAuctionFinished', function (event) {
            if (event.detail) {
                var auctionSlots = event.detail;
                this.amazonAuctionFinished(auctionSlots);
            }
        }.bind(this));
        // listen for custom event to build slots
        document.addEventListener('BcSlotLazyloadChange', function (event) {
            if (event.detail.slot instanceof Slot_1.default &&
                event.detail.isIntersecting == true) {
                var slot = event.detail.slot;
                if (event.detail.threshold_type == 'display') {
                    if (slot.prebid.enabled &&
                        slot.checkIfShouldDisplayWinningBid()) {
                        slot.prebid.gam_auction_started = true;
                        this.defineGamSlot(slot);
                        var gam_slots = [slot];
                        this.refreshGamSlots(gam_slots);
                        // console.log('HERE Prebid: Display Winning Bid 3', slot.slot_id, globalThis.pbjs.getHighestCpmBids(slot.div_id))
                    }
                }
                else if (event.detail.threshold_type == 'fetch') {
                    if (slot.prebid.enabled) {
                        this.defineGamSlot(slot);
                    }
                }
            }
        }.bind(this));
        // TODO: Override renderAd function to add bigcrunch demand
        // const prebidRenderAdFunction = globalThis.pbjs.renderAd;
        // globalThis.pbjs.renderAd = function(doc: Document, id: string, options: object) {
        //     prebidRenderAdFunction(doc, id, options);
        // }
    };
    // "https"://docs.prebid.org/dev-docs/adunit-reference.html#adunitbids
    Prebid.prototype.buildAdUnit = function (slot) {
        // check if prebid is enabled for slot
        if (slot.prebid.enabled === false)
            return;
        slot.prebid.gam_slot_code = this.createAdUnitCode(slot);
        var gpid = "".concat(slot.prebid.gam_slot_code, "#").concat(slot.instance_number + 1);
        var sizes = slot.sizes.filter(function (size) {
            return ['fluid'].indexOf(size) === -1;
        }).map(function (size) {
            return size.split('x').map(function (s) { return isNaN(parseInt(s)) ? s : parseInt(s); });
        });
        globalThis.pbjs.que.push(function () {
            var _a;
            var bids = [];
            var bidderIdGroups = slot.prebid.bidderIdGroups || [];
            for (var _i = 0, bidderIdGroups_1 = bidderIdGroups; _i < bidderIdGroups_1.length; _i++) {
                var bid_group_name = bidderIdGroups_1[_i];
                var bid_group = ((_a = __1.globalSettings === null || __1.globalSettings === void 0 ? void 0 : __1.globalSettings.prebid) === null || _a === void 0 ? void 0 : _a.adUnitBidders[bid_group_name]) || [];
                bids = bids.concat(bid_group);
            }
            if (bids.length) {
                var adUnit = {
                    "code": slot.div_id,
                    "mediaTypes": {
                        "banner": {
                            "sizes": sizes
                        }
                    },
                    "bids": bids,
                    "ortb2Imp": {
                        "ext": {
                            "gpid": gpid,
                            "data": {
                                "pbadslot": gpid
                            }
                        }
                    },
                    "floors": {},
                };
                // set floors
                var floor_1 = slot.floor || 0;
                if (floor_1) {
                    var floor_values_1 = {};
                    slot.media_types.map(function (mediaType) {
                        floor_values_1[mediaType] = floor_1;
                    });
                    adUnit.floors = {
                        currency: 'USD',
                        schema: {
                            fields: ['mediaType']
                        },
                        values: floor_values_1
                    };
                }
                (0, log_1.logInfo)('Prebid: Adding Ad Unit', adUnit);
                globalThis.pbjs.addAdUnits([adUnit]);
                this.adUnits[slot.slot_id] = adUnit;
            }
        }.bind(this));
        // define gam slot
        // this.defineGamSlot(slot);
    };
    Prebid.prototype.defineGamSlot = function (slot) {
        if (slot.prebid.enabled) {
            globalThis.googletag.cmd.push(function () {
                if (!this.gamAdUnits[slot.slot_id]) {
                    var sizes = slot.sizes.map(function (size) {
                        return size.split('x').map(function (s) { return isNaN(parseInt(s)) ? s : parseInt(s); });
                    });
                    this.gamAdUnits[slot.slot_id] = globalThis.googletag.defineSlot(slot.prebid.gam_slot_code, sizes, slot.div_id).addService(globalThis.googletag.pubads());
                    try {
                        var targeting = slot.getTargeting();
                        if (targeting && Object.keys(targeting).length) {
                            for (var key in targeting) {
                                this.gamAdUnits[slot.slot_id].setTargeting(key, targeting[key].toString());
                            }
                        }
                    }
                    catch (error) {
                        console.error('Error:', error);
                    }
                    globalThis.googletag.enableServices();
                    globalThis.googletag.display(slot.div_id);
                }
            }.bind(this));
        }
    };
    Prebid.prototype.refreshGamSlots = function (gam_slots) {
        try {
            if (gam_slots.length) {
                globalThis.googletag.cmd.push(function () {
                    globalThis.pbjs.que.push(function () {
                        var _a;
                        var gam_ad_units_ids = [];
                        var gam_ad_units = [];
                        gam_slots.forEach(function (slot) {
                            if (this.gamAdUnits[slot.slot_id]) {
                                gam_ad_units_ids.push(slot.div_id);
                                gam_ad_units.push(this.gamAdUnits[slot.slot_id]);
                            }
                        }.bind(this));
                        if (gam_ad_units.length) {
                            (0, log_1.logInfo)('Prebid: Refreshing GPT Slots', gam_ad_units_ids, gam_ad_units);
                            // set gam targeting
                            globalThis.pbjs.setTargetingForGPTAsync(gam_ad_units_ids);
                            if (__1.globalSettings.amazon_aps.enabled &&
                                typeof ((_a = globalThis === null || globalThis === void 0 ? void 0 : globalThis.apstag) === null || _a === void 0 ? void 0 : _a.setDisplayBids) === 'function') {
                                globalThis.apstag.setDisplayBids();
                            }
                            globalThis.googletag.pubads().refresh(gam_ad_units);
                        }
                    }.bind(this));
                }.bind(this));
            }
        }
        catch (error) {
            console.error('Error:', error);
        }
    };
    Prebid.prototype.sendAuctionRequest = function (auction) {
        globalThis.pbjs.que.push(function () {
            var _this = this;
            var auctionSlots = [];
            var adUnitCodes = auction.slots.filter(function (slot) {
                return slot.slot_id in _this.adUnits && slot.prebid.enabled === true;
            }).map(function (slot) {
                auctionSlots.push(slot);
                slot.prebid.header_auction_started = true;
                return slot.div_id;
            }) || [];
            (0, log_1.logInfo)('Prebid: Sending Auction Request', adUnitCodes);
            if (adUnitCodes.length) {
                globalThis.pbjs.requestBids({
                    adUnitCodes: adUnitCodes,
                    bidsBackHandler: function (bids, timedOut, auctionId) {
                        if (timedOut) {
                            (0, log_1.logWarn)("Prebid: Auction Timed Out");
                        }
                        else {
                            (0, log_1.logInfo)("Prebid: Auction Complete", adUnitCodes);
                        }
                        // fire custom event
                        var event = new CustomEvent('BcPrebidAuctionFinished', { detail: { bids: bids, timedOut: timedOut, auctionId: auctionId } });
                        document.dispatchEvent(event);
                        var gam_slots = [];
                        // loop through each slot in auction
                        for (var _i = 0, auctionSlots_1 = auctionSlots; _i < auctionSlots_1.length; _i++) {
                            var slot = auctionSlots_1[_i];
                            slot.prebid.header_auction_finished = true;
                            // check if slot should display winning bid
                            if (slot.prebid.enabled &&
                                slot.checkIfShouldDisplayWinningBid()) {
                                slot.prebid.gam_auction_started = true;
                                this.defineGamSlot(slot);
                                gam_slots.push(slot);
                                // console.log('HERE Prebid: Display Winning Bid 1', slot.slot_id, globalThis.pbjs.getHighestCpmBids(slot.div_id))
                            }
                        }
                        // refresh gam slots
                        this.refreshGamSlots(gam_slots);
                    }.bind(this),
                    timeout: 2000
                });
            }
        }.bind(this));
    };
    Prebid.prototype.bcAuctionFinished = function (auction) {
        if (auction.slots.length) {
            var gam_slots = [];
            for (var _i = 0, _a = auction.slots; _i < _a.length; _i++) {
                var slot = _a[_i];
                if (slot.prebid.enabled &&
                    slot.checkIfShouldDisplayWinningBid()) {
                    slot.prebid.gam_auction_started = true;
                    this.defineGamSlot(slot);
                    gam_slots.push(slot);
                }
            }
            // refresh gam slots
            this.refreshGamSlots(gam_slots);
        }
    };
    Prebid.prototype.amazonAuctionFinished = function (auctionSlots) {
        if (auctionSlots.length) {
            var gam_slots = [];
            for (var _i = 0, auctionSlots_2 = auctionSlots; _i < auctionSlots_2.length; _i++) {
                var slot = auctionSlots_2[_i];
                if (slot.prebid.enabled &&
                    slot.checkIfShouldDisplayWinningBid()) {
                    slot.prebid.gam_auction_started = true;
                    this.defineGamSlot(slot);
                    gam_slots.push(slot);
                }
            }
            // refresh gam slots
            this.refreshGamSlots(gam_slots);
        }
    };
    Prebid.prototype.removeAdUnit = function (slot) {
        globalThis.pbjs.que.push(function () {
            globalThis.pbjs.removeAdUnit(slot.div_id);
            this.adUnits[slot.slot_id] = null;
        }.bind(this));
        globalThis.googletag.cmd.push(function () {
            globalThis.googletag.destroySlots([this.gamAdUnits[slot.slot_id]]);
            this.gamAdUnits[slot.slot_id] = null;
        }.bind(this));
    };
    Prebid.prototype.createAdUnitCode = function (slot) {
        return "/".concat(__1.globalSettings.gam_network_code, "/").concat(slot.prebid.gam_unit);
    };
    return Prebid;
}());
exports.Prebid = Prebid;


/***/ }),

/***/ "./src/classes/Session.ts":
/*!********************************!*\
  !*** ./src/classes/Session.ts ***!
  \********************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";

var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var _a;
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.globalSession = exports.Session = void 0;
var moduleTypes_1 = __webpack_require__(/*! ../modules/consent/moduleTypes */ "./src/modules/consent/moduleTypes.ts");
var utils_1 = __webpack_require__(/*! ../utils/utils */ "./src/utils/utils.ts");
var Storage_1 = __importStar(__webpack_require__(/*! ./Storage */ "./src/classes/Storage.ts"));
var Analytics_1 = __webpack_require__(/*! ./Analytics */ "./src/classes/Analytics.ts");
var User_1 = __webpack_require__(/*! ./User */ "./src/classes/User.ts");
var SESSION_STORAGE_NAME = "".concat(Storage_1.STORAGE_PREFIX, "session_id");
var SESSION_STORAGE_OPTIONS = {
    'maxAge': 60 * 30,
    'expires': '',
    'path': '/',
    'domain': '.' + (0, utils_1.getDomain)() || (0),
    'sameSite': 'None',
    'secure': 1 // cookie will only be sent over SSL
};
var SESSION_STORAGE_OBJ = { 'componentType': moduleTypes_1.MODULE_TYPE_CORE };
var Session = /** @class */ (function () {
    function Session() {
        this.session_analytics_logged = false;
        this.data = {
            new_user: false,
            revenue: 0,
            floors: {},
            depth: 0,
            utm: {
                source: null,
                medium: null,
                campaign: null,
                term: null,
                content: null
            },
            gclid: '',
            fbclid: '',
            referrer: ''
        };
    }
    Session.prototype.startNewSession = function () {
        // delete session data
        this.deleteSessionData();
        // reset session depth
        this.data.depth = 1;
        // generate new id
        this.id = (0, utils_1.generateUUID)();
        // set session data in storage
        this.data.utm = this.getUtmData();
        // set clid data
        var clids = this.getClids();
        this.data.gclid = clids.gclid || '';
        this.data.fbclid = clids.fbclid || '';
        // set referrer
        this.data.referrer = this.getReferrer();
        // set new user flag
        this.data.new_user = User_1.globalUser.new_user;
        // reset revenue
        this.data.revenue = 0;
        // reset session analytics logged
        this.session_analytics_logged = false;
        // set session data in storage
        this.setSessionData();
    };
    /**
     * @returns {string}
     * @description Get session id from storage
     */
    Session.prototype.getSessionId = function () {
        // get session id from storage
        this.id = Storage_1.default.getCookie(SESSION_STORAGE_NAME, SESSION_STORAGE_OBJ);
        // get stored session data
        this.getSessionData();
        // check if utms/clids changed
        if (this.checkReferrerChange()) {
            // set utm data
            this.data.utm = this.getUtmData();
            // set clid data
            var clids = this.getClids();
            this.data.gclid = clids.gclid || '';
            this.data.fbclid = clids.fbclid || '';
            // set referrer
            this.data.referrer = this.getReferrer();
        }
        // if session id is not set or utm has changed
        if (!this.id) {
            this.startNewSession();
        }
        else {
            this.incrementDepth();
            this.session_analytics_logged = true;
        }
        // set session id in storage
        Storage_1.default.setCookie(SESSION_STORAGE_NAME, this.id, SESSION_STORAGE_OBJ, SESSION_STORAGE_OPTIONS);
        return true;
    };
    // function that checks if referrer has changed from the current referrer
    // if it has, then it will start a new session
    Session.prototype.checkReferrerChange = function () {
        // get current referrer
        var currentReferrer = this.data.referrer || '';
        // get referrer from url
        var referrer = (0, utils_1.getReferrer)();
        // if referrer has changed
        if (referrer && // if referrer exists
            referrer.hostname !== (0, utils_1.getDomain)() && // if referrer is not current domain
            referrer.href !== currentReferrer // if referrer is not current referrer
        ) {
            return true;
        }
        return false;
    };
    Session.prototype.getReferrer = function () {
        var referrer = (0, utils_1.getReferrer)();
        return referrer && referrer.hostname !== (0, utils_1.getDomain)() ? referrer.href : '';
    };
    // function that checks if session data's utm has changed from the current utm
    // if it has, then it will start a new session
    Session.prototype.checkUtmChange = function () {
        // get current utm data
        var currentUtm = this.data.utm;
        // get utm data from url
        var utm = this.getUtmData();
        // loop through utm keys
        for (var key in utm) {
            // if utm key has changed
            if (utm[key] && utm[key] !== currentUtm[key]) {
                return true;
            }
        }
        return false;
    };
    Session.prototype.getUtmData = function () {
        var utm = {
            source: '',
            medium: '',
            campaign: '',
            term: '',
            content: ''
        };
        // get utm data from url
        var url = (0, utils_1.getURL)();
        if (url) {
            utm = {
                source: url.searchParams.get('utm_source') || '',
                medium: url.searchParams.get('utm_medium') || '',
                campaign: url.searchParams.get('utm_campaign') || '',
                term: url.searchParams.get('utm_term') || '',
                content: url.searchParams.get('utm_content') || ''
            };
        }
        return utm;
    };
    Session.prototype.checkClidChange = function () {
        // get current clid data
        var currentClids = {
            gclid: this.data.gclid,
            fbclid: this.data.fbclid
        };
        // get clid data from url
        var clids = this.getClids();
        // loop through clid keys
        for (var key in clids) {
            // if clid key has changed
            if (clids[key] && clids[key] !== currentClids[key]) {
                return true;
            }
        }
        return false;
    };
    Session.prototype.getClids = function () {
        var url = (0, utils_1.getURL)();
        if (url) {
            return {
                gclid: url.searchParams.get('gclid') || '',
                fbclid: url.searchParams.get('fbclid') || ''
            };
        }
        return {};
    };
    Session.prototype.incrementRevenue = function (revenue) {
        // set revenue
        this.data.revenue += revenue;
        // set session data in storage
        this.setSessionData();
    };
    Session.prototype.incrementDepth = function () {
        // increment depth
        this.data.depth++;
        // set session data in storage
        this.setSessionData();
    };
    Session.prototype.getSessionData = function () {
        // Get session data from storage
        this.data = JSON.parse(Storage_1.default.getItemFromStorage(this.id, SESSION_STORAGE_OBJ)) || this.data;
    };
    Session.prototype.setSessionData = function () {
        // Set session data in storage
        Storage_1.default.setItemInStorage(this.id, JSON.stringify(this.data), SESSION_STORAGE_OBJ, SESSION_STORAGE_OPTIONS);
        // send session data to server
        if (!exports.globalSession.session_analytics_logged) {
            Analytics_1.globalAnalytics.sendSessionPageAnalytics();
        }
    };
    Session.prototype.deleteSessionData = function () {
        // Delete session data from storage
        Storage_1.default.removeDataFromLocalStorage(this.id, SESSION_STORAGE_OBJ);
    };
    return Session;
}());
exports.Session = Session;
exports.globalSession = new Session();


/***/ }),

/***/ "./src/classes/Slot.ts":
/*!*****************************!*\
  !*** ./src/classes/Slot.ts ***!
  \*****************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
var log_1 = __webpack_require__(/*! ../utils/log */ "./src/utils/log.ts");
var __1 = __webpack_require__(/*! .. */ "./src/index.ts");
var utils_1 = __webpack_require__(/*! ../utils/utils */ "./src/utils/utils.ts");
var AuctionHandler_1 = __webpack_require__(/*! ./AuctionHandler */ "./src/classes/AuctionHandler.ts");
var Bid_1 = __webpack_require__(/*! ./Bid */ "./src/classes/Bid.ts");
var ViewabilityTracker_1 = __webpack_require__(/*! ./ViewabilityTracker */ "./src/classes/ViewabilityTracker.ts");
var Page_1 = __webpack_require__(/*! ./Page */ "./src/classes/Page.ts");
var VideoInstance_1 = __webpack_require__(/*! ./VideoInstance */ "./src/classes/VideoInstance.ts");
var Slot = /** @class */ (function () {
    /**
     * @param slotConfig
     * @description Slot constructor
     */
    function Slot(slotConfig) {
        this.sizes = [];
        this.min_height = 0;
        this.floor = 0.10;
        this.bids = [];
        this.media_types = [];
        this.auction_finished = false;
        this.ad_injected = false;
        this.displayed = false;
        this.displayed_ts = 0;
        this.auction_min_interval = 15000;
        this.auction_interval_met = true;
        this.auction_no_bid_count = 0;
        this.instance_number = 0;
        this.refresh = {
            force: false,
            enabled: false,
            interval: 15000,
            interval_met: false,
            interval_timer: null,
            current_interval: 0,
            inview_interval: 5000,
            inview_interval_met: false,
            inview_interval_timer: null,
            current_inview_interval: 0,
            count: 0
        };
        this.viewability = {
            enabled: true,
            inview: null,
            active_tab: true,
            entered_inview_ts: 0,
            time_inview_since_displayed: 0
        };
        this.lazyload = {
            enabled: false,
            fetch_threshold: 100,
            in_fetch_range: false,
            display_threshold: 50,
            in_display_range: false
        };
        this.auto_delete = {
            enabled: false,
            threshold: 100
        };
        this.prebid = {
            enabled: false,
            gam_unit: '',
            gam_slot_code: '',
            bidderIdGroups: [],
            header_winning_bid: null,
            header_auction_started: false,
            header_auction_finished: false,
            gam_auction_started: false,
            gam_auction_finished: false
        };
        this.amazon_aps = {
            enabled: false,
            auction_started: false,
            auction_finished: false
        };
        this.config = slotConfig;
        this.id = slotConfig['id'];
        this.name = slotConfig['name'];
        this.floor = slotConfig['floor'];
        this.sticky = slotConfig['sticky'];
        this.outstream = slotConfig['outstream'];
        this.media_types = slotConfig['media_types'] || [];
        this.instance_number = slotConfig['instance_number'] || 0;
        this.slot_id = "".concat(this.name, "-").concat(this.instance_number);
        this.div_id = "bigcrunch-unit-".concat(this.slot_id);
        this.css_seselector = slotConfig['css_seselector'] || '';
        this.referenceElement = slotConfig['referenceElement'];
        Object.assign(this.lazyload, slotConfig['lazyload']);
        Object.assign(this.refresh, slotConfig['refresh']);
        Object.assign(this.auto_delete, slotConfig['auto_delete']);
        Object.assign(this.prebid, slotConfig['prebid']);
        Object.assign(this.amazon_aps, slotConfig['amazon_aps']);
    }
    Slot.prototype.buildSlot = function () {
        // Set sizes for slot
        this.sizes = this.setSizes();
        // Set min height for slot
        this.getMinHeight();
        // Insert slot into dom
        if (!this.insertSlot()) {
            (0, log_1.logWarn)("Unable to insert slot into dom.", this.slot_id);
            return false;
        }
        // fire custom event that slot has been built
        var event = new CustomEvent('BcSlotBuilt', { detail: this });
        document.dispatchEvent(event);
        // set viewability tracker
        this.setViewabilityTracker();
        // check lazyload is enabled
        if (this.lazyload.enabled) {
            this.setLazyLoadTrackers();
        }
        else {
            this.lazyload.in_fetch_range = true;
            this.lazyload.in_display_range = true;
            this.sendNewAuction();
        }
        // set auto delete tracker
        this.setAutoDeleteTracker();
        return true;
    };
    // get data-targeting property from slots div id element and parse it as JSON
    Slot.prototype.getTargeting = function () {
        try {
            var targeting = this.referenceElement.getAttribute('data-targeting');
            if (targeting) {
                return JSON.parse(targeting);
            }
        }
        catch (error) {
            (0, log_1.logWarn)("Unable to parse data-targeting attribute.", this.slot_id);
        }
        return {};
    };
    Slot.prototype.setViewabilityTracker = function () {
        var _this = this;
        if (this.viewability.enabled) {
            // track element viewability
            ViewabilityTracker_1.viewabilityTracker.trackElement(this.element, function (entry) {
                _this.handleViewabilityChange(entry.isIntersecting);
            });
        }
    };
    Slot.prototype.removeViewabilityTracker = function () {
        if (this.viewability.enabled) {
            // track element viewability
            ViewabilityTracker_1.viewabilityTracker.untrackElement(this.element);
        }
    };
    Slot.prototype.setLazyLoadTrackers = function () {
        var _this = this;
        if (this.lazyload.enabled) {
            // set lazyload fetch threshold if it is less than display threshold
            if (this.lazyload.fetch_threshold < this.lazyload.display_threshold) {
                this.lazyload.fetch_threshold = this.lazyload.display_threshold;
            }
            // set lazyload fetch observer
            var lazyload_fetch_options = {
                root: null,
                rootMargin: this.lazyload.fetch_threshold + '%',
                threshold: 0.5
            };
            this.lazyloadFetchObserver = new ViewabilityTracker_1.ViewabilityTracker(false, lazyload_fetch_options);
            this.lazyloadFetchObserver.trackElement(this.element, function (entry) {
                if (_this.lazyload.fetch_threshold !== _this.lazyload.display_threshold) {
                    _this.handleLazyLoadChange('fetch', entry);
                }
                else {
                    _this.handleLazyLoadChange('fetch', entry);
                    _this.handleLazyLoadChange('display', entry);
                }
            });
            if (this.lazyload.fetch_threshold !== this.lazyload.display_threshold) {
                // set lazyload display observer
                var lazyload_display_options = {
                    root: null,
                    rootMargin: this.lazyload.display_threshold + '%',
                    threshold: 0.5
                };
                this.lazyloaddisplayObserver = new ViewabilityTracker_1.ViewabilityTracker(false, lazyload_display_options);
                this.lazyloaddisplayObserver.trackElement(this.element, function (entry) {
                    _this.handleLazyLoadChange('display', entry);
                });
            }
        }
    };
    Slot.prototype.removeLazyloadTrackers = function () {
        if (this.lazyloadFetchObserver) {
            // remove lazyload fetch observer
            this.lazyloadFetchObserver.untrackElement(this.element);
        }
        if (this.lazyloaddisplayObserver) {
            // remove lazyload display observer
            this.lazyloaddisplayObserver.untrackElement(this.element);
        }
    };
    Slot.prototype.setAutoDeleteTracker = function () {
        var _this = this;
        if (this.auto_delete.enabled) {
            // set lazyload fetch observer
            var auto_delete_options = {
                root: null,
                rootMargin: this.auto_delete.threshold + '%',
                threshold: 0.5
            };
            this.autoDeleteObserver = new ViewabilityTracker_1.ViewabilityTracker(false, auto_delete_options);
            this.autoDeleteObserver.trackElement(this.element, function (entry) {
                var boundingClientRect = entry.boundingClientRect, rootBounds = entry.rootBounds;
                // Check if the element is above the viewport
                if (boundingClientRect.bottom <= rootBounds.top) {
                    // console.log('Element is above the viewport.');
                    _this.removeSlot();
                }
            });
        }
    };
    Slot.prototype.removeAutoDeleteTracker = function () {
        if (this.autoDeleteObserver) {
            // remove lazyload fetch observer
            this.autoDeleteObserver.untrackElement(this.element);
        }
    };
    Slot.prototype.handleLazyLoadChange = function (threshold_type, entry) {
        var isIntersecting = entry.isIntersecting;
        if (threshold_type === 'fetch') {
            // Check if lazyload fetch has changed
            if (this.lazyload.in_fetch_range === isIntersecting)
                return;
            // set lazyload fetch range
            this.lazyload.in_fetch_range = isIntersecting;
            // fire custom event
            var event_1 = new CustomEvent('BcSlotLazyloadChange', { detail: { slot: this, threshold_type: threshold_type, isIntersecting: isIntersecting } });
            document.dispatchEvent(event_1);
            // check if slot needs a new auction
            if ((!this.auction &&
                !this.auction_finished &&
                this.refresh.count == 0) ||
                this.checkIfRefreshIsAllowed()) {
                this.sendNewAuction();
            }
        }
        else if (threshold_type === 'display') {
            if (this.lazyload.in_display_range === isIntersecting)
                return;
            // set lazyload display range
            this.lazyload.in_display_range = isIntersecting;
            // fire custom event
            var event_2 = new CustomEvent('BcSlotLazyloadChange', { detail: { slot: this, threshold_type: threshold_type, isIntersecting: isIntersecting } });
            document.dispatchEvent(event_2);
            // check if slot has winning bid
            if (this.checkIfShouldDisplayWinningBid()) {
                // display winning bid
                this.displayWinningBid();
            }
        }
    };
    Slot.prototype.sendNewAuction = function () {
        // check if an auction has already been sent
        if (!this.auction) {
            (0, log_1.logInfo)("sendNewAuction", this.slot_id, this.sizes);
            // set auction finished to false
            this.auction_finished = false;
            // add slot to auction
            this.auction = AuctionHandler_1.auctionHandler.addSlotsToAuction([this]);
            // send auction request. Allow 100 ms to queue up other slots
            AuctionHandler_1.auctionHandler.sendAuctionRequest(100);
        }
    };
    /**
     * Insert slot into element
     * @returns boolean
     */
    Slot.prototype.insertSlot = function () {
        try {
            this.referenceElement.classList.add('bigcrunch-unit-injected');
            // insert div inside wrapper div
            var inner_div = document.createElement('div');
            // add id to div
            inner_div.id = this.div_id;
            inner_div.classList.add('bigcrunch-unit');
            if (this.sticky.enabled) {
                inner_div.style.position = 'fixed';
                inner_div.classList.add('bigcrunch-unit-sticky');
            } // TODO: Add min height for non stick display units
            // append to reference element
            this.referenceElement.appendChild(inner_div);
            // set element
            this.element = inner_div;
            return true;
        }
        catch (error) {
            return false;
        }
    };
    /**
     * @returns Array<string>
     * @description Set sizes for slot
     */
    Slot.prototype.setSizes = function () {
        try {
            var resolutionSizes = this.config['resolutionSizes'];
            var sizes = [];
            var current_resolution = 0;
            var page_width = (0, utils_1.getPageWidth)();
            // loop through resolution sizes
            for (var resolution in resolutionSizes) {
                if (parseInt(resolution) <= page_width &&
                    parseInt(resolution) >= current_resolution) {
                    current_resolution = parseInt(resolution);
                    sizes = resolutionSizes[resolution];
                }
            }
            return sizes;
        }
        catch (error) {
            (0, log_1.logWarn)("Unable to set sizes for slot.", this.slot_id);
            return [];
        }
    };
    Slot.prototype.getMinHeight = function () {
        if (this.sizes.length) {
            // loop through sizes
            for (var _i = 0, _a = this.sizes; _i < _a.length; _i++) {
                var size = _a[_i];
                // get height
                var height = parseInt(size.split('x')[1]);
                // check if height is greater than min_height
                if (height < this.min_height || this.min_height == 0) {
                    this.min_height = height;
                }
            }
        }
    };
    Slot.prototype.checkIfShouldDisplayWinningBid = function () {
        // check if slot has winning bid
        return ((( // First impession
        this.ad_injected === false &&
            this.displayed === false &&
            this.refresh.count == 0) ||
            ( // Refresh impression
            this.refresh.force ||
                (this.refresh.enabled &&
                    this.refresh.interval_met &&
                    this.refresh.inview_interval_met) &&
                    this.refresh.count > 0)) &&
            ( // Lazyload requirements are met
            !this.lazyload.enabled ||
                this.lazyload.in_display_range) &&
            !this.auction &&
            this.auction_finished &&
            Page_1.globalPage.isTabActive &&
            (!this.prebid.enabled ||
                !__1.globalSettings.prebid.enabled ||
                (!this.prebid.gam_auction_started &&
                    this.prebid.header_auction_finished)) &&
            (!this.amazon_aps.enabled ||
                !__1.globalSettings.amazon_aps.enabled ||
                (!this.prebid.gam_auction_started &&
                    this.amazon_aps.auction_finished)));
    };
    Slot.prototype.auctionFinished = function (bids) {
        var _this = this;
        // increment no bid count if no bids are returned
        this.auction_no_bid_count = (bids.length === 0) ? this.auction_no_bid_count + 1 : 0;
        // add bids to slot
        this.addBids(bids);
        // set auction finished to true
        this.auction = null;
        this.auction_finished = true;
        this.auction_interval_met = false;
        // Set timeout until next auction is allowed
        setTimeout(function () {
            _this.auction_interval_met = true;
            _this.checkIfRefreshIsAllowed();
        }, this.auction_min_interval || 5000);
        // check if slot has winning bid
        if (this.checkIfShouldDisplayWinningBid()) {
            // display winning bid
            this.displayWinningBid();
        }
    };
    /**
     * @param {Array<Bid>} bids
     * @returns void
     * @description Add bids to slot
     */
    Slot.prototype.addBids = function (bids) {
        var _a;
        // add bids to slot
        (_a = this.bids).push.apply(_a, bids);
        // sort bids by price from highest to lowest
        this.bids.sort(function (a, b) {
            return b.data.price - a.data.price;
        });
        // remove expired bids
        if (this.bids.length) {
            // remove expired bids
            this.removeExpiredBids();
        }
    };
    /**
     * @returns boolean
     */
    Slot.prototype.getWinningBid = function () {
        if (this.hasWinningBid()) {
            this.addBids([this.winningBid]);
        }
        if (this.bids.length) {
            var min_bid_to_win = this.getMinBidToWin();
            this.winningBid = this.bids.shift() || null;
            if (min_bid_to_win) {
                this.winningBid.min_bid_to_win = min_bid_to_win;
            }
        }
        return this.hasWinningBid();
    };
    /**
     * @returns number
     * @description Get minimum bid to win
     */
    Slot.prototype.getMinBidToWin = function () {
        if (this.bids.length > 1) {
            return this.bids[1].data.price;
        }
        return 0;
    };
    /**
     * @returns boolean
     */
    Slot.prototype.hasWinningBid = function () {
        return this.winningBid instanceof Bid_1.Bid;
    };
    /**
     * @returns boolean
     * @description Display winning bid
     */
    Slot.prototype.displayWinningBid = function () {
        // check if slot has winning bid
        if (this.getWinningBid()) {
            // check if lazyload is enabled and slot is not in display range
            if (this.lazyload.enabled &&
                this.lazyload.in_display_range === false)
                return false;
            // set displayed data
            this.ad_injected = true;
            // Send provisional win notice
            this.winningBid.sendNurlPixel();
            // check if winning bid is a video
            if (this.winningBid.demand_type === 'video') {
                this.insertOutstreamPlayer();
                // check if winning bid is a display
            }
            else if (this.winningBid.demand_type === 'display') {
                // Remove an existing video ad
                if (this.videoPlayer) {
                    this.videoPlayer.deleteVideoPlayerFromDom(function () {
                        // delete video player
                        delete this.videoPlayer;
                        this.videoPlayer = null;
                        // insert display ad
                        this.injectAdCode(this.winningBid.data);
                    }.bind(this));
                }
                else {
                    // insert display ad
                    this.injectAdCode(this.winningBid.data);
                }
            }
        }
        else {
            if (!this.displayed &&
                !this.ad_injected &&
                this.refresh.count == 0) {
                // fire custom event
                var event_3 = new CustomEvent('BcFirstImpressionUnfilled', { detail: this });
                document.dispatchEvent(event_3);
            }
            else {
                // fire custom event
                var event_4 = new CustomEvent('BcRefreshImpressionUnfilled', { detail: this });
                document.dispatchEvent(event_4);
                if (this.videoPlayer) {
                    this.videoPlayer.deleteVideoPlayerFromDom(function () {
                        // delete video player
                        delete this.videoPlayer;
                        this.videoPlayer = null;
                    }.bind(this));
                }
            }
        }
        return true;
    };
    // function to put ad code into an iframe and display it in the slots element with the div_id
    // @param {string} adCode
    // @returns {boolean}
    Slot.prototype.injectAdCode = function (ad) {
        try {
            // Insert Display Ad
            // create iframe
            var iframe = document.createElement('iframe');
            // set iframe id
            iframe.id = this.div_id;
            // set iframe srcdoc
            iframe.srcdoc = ad.adm;
            // set iframe style
            iframe.style.width = ad.w;
            iframe.style.height = ad.h;
            // insert iframe into element
            this.element.appendChild(iframe);
            return true;
        }
        catch (error) {
            return false;
        }
    };
    /**
     * @returns void
     * @description Reset refresh
     */
    Slot.prototype.resetRefresh = function () {
        // Reset Flags
        this.refresh.interval_met = false;
        this.refresh.inview_interval_met = false;
        // Clear Timeouts
        clearTimeout(this.refresh.interval_timer);
        this.refresh.interval_timer = null;
        clearTimeout(this.refresh.inview_interval_timer);
        this.refresh.inview_interval_timer = null;
        // Reset Intervals
        this.refresh.current_interval = this.refresh.interval;
        this.refresh.current_inview_interval = this.refresh.inview_interval;
    };
    Slot.prototype.disableRefresh = function () {
        this.refresh.enabled = false;
        this.resetRefresh();
    };
    Slot.prototype.resetViewability = function () {
        // Reset Viewability Data
        this.viewability.time_inview_since_displayed = 0;
        var isInView = this.viewability.inview;
        this.viewability.inview = null;
        this.handleViewabilityChange(isInView);
    };
    /**
     * @returns boolean
     * @description Check if refresh is allowed
     */
    Slot.prototype.checkIfRefreshIsAllowed = function () {
        if (!this.auction &&
            this.displayed &&
            this.refresh.enabled &&
            this.refresh.interval_met &&
            this.refresh.inview_interval_met &&
            // this.auction_no_bid_count < 5 &&
            this.auction_interval_met &&
            (!this.lazyload.enabled ||
                this.lazyload.in_fetch_range)) {
            return true;
        }
        return false;
    };
    // function to set displayed flag
    Slot.prototype.setDisplayed = function () {
        // set displayed flag
        this.displayed = true;
        this.displayed_ts = Date.now();
        // reset viewability
        this.resetViewability();
        // set refresh timer
        this.setRefreshTimer();
        // If slot is inview
        if (this.viewability.inview) {
            // Set entered inview timestamp
            this.viewability.entered_inview_ts = Date.now();
            // set inview refresh timer if allowed
            this.setInviewRefreshTimer();
            // set viewability timer
            this.displayedBid.setViewabilityTimer();
        }
        // reset force refresh flag
        if (this.refresh.force) {
            this.refresh.force = false;
        }
        // fire custom evert
        var event = new CustomEvent('BcSlotDisplayed', { detail: this });
        document.dispatchEvent(event);
    };
    /**
     * @returns boolean
     * @description Refresh slot
     */
    Slot.prototype.refreshSlot = function (force) {
        if (force === void 0) { force = false; }
        if (this.checkIfRefreshIsAllowed() || force) {
            if (force) {
                this.refresh.force = true;
                this.resetRefresh();
            }
            // fire custom event
            var event_5 = new CustomEvent('BcSlotRefresh', { detail: this });
            document.dispatchEvent(event_5);
            // send new auction
            this.sendNewAuction();
            // increment refresh count
            this.refresh.count++;
        }
        return true;
    };
    /**
     * @returns boolean
     * @description Refresh slot
     */
    Slot.prototype.setRefreshTimer = function () {
        var _this = this;
        // check if refresh is enabled
        if ((!this.refresh.interval_met &&
            this.refresh.count > 0) ||
            !this.refresh.enabled ||
            !this.displayed) {
            return false;
        }
        // reset refresh
        this.resetRefresh();
        // Get time since slot was displayed
        var time_since_displayed = Date.now() - this.displayed_ts;
        // Set current interval
        this.refresh.current_interval = Math.max(this.refresh.interval - time_since_displayed, 0);
        if (this.refresh.current_interval > 0) {
            (0, log_1.logInfo)("Refresh interval for ".concat(this.slot_id, ": ").concat(this.refresh.current_interval));
            // set refresh timer
            this.refresh.interval_timer = setTimeout(function () {
                if (!_this.refresh.interval_met) {
                    _this.setRefreshIntervalMet();
                }
            }, this.refresh.current_interval);
        }
        else {
            if (!this.refresh.interval_met) {
                this.setRefreshIntervalMet();
            }
        }
        return true;
    };
    Slot.prototype.setRefreshIntervalMet = function () {
        this.refresh.interval_met = true;
        if (this.checkIfRefreshIsAllowed()) {
            // refresh slot
            this.refreshSlot();
        }
    };
    Slot.prototype.setInviewRefreshTimer = function () {
        var _this = this;
        if (!this.displayed ||
            !this.refresh.enabled ||
            !this.viewability.inview ||
            this.refresh.inview_interval_met) {
            return true;
        }
        // check if inview refresh is enabled
        if (this.refresh.inview_interval == -1) {
            this.setInviewIntervalMet();
        }
        else {
            // Clear inview refresh timer if it exists
            if (this.refresh.inview_interval_timer !== null) {
                clearTimeout(this.refresh.inview_interval_timer);
                this.refresh.inview_interval_timer = null;
            }
            // Set current inview interval to inview interval if it is not set
            this.refresh.current_inview_interval = this.refresh.current_inview_interval || this.refresh.inview_interval;
            // Set current interval
            this.refresh.current_inview_interval = Math.max(this.refresh.current_inview_interval - this.viewability.time_inview_since_displayed, 0);
            if (this.refresh.current_inview_interval > 0) {
                // set invew refresh timer
                this.refresh.inview_interval_timer = setTimeout(function () {
                    _this.setInviewIntervalMet();
                }, this.refresh.current_inview_interval);
            }
            else {
                this.setInviewIntervalMet();
            }
        }
        return true;
    };
    Slot.prototype.setInviewIntervalMet = function () {
        this.refresh.inview_interval_met = true;
        if (this.checkIfRefreshIsAllowed()) {
            // refresh slot
            this.refreshSlot();
        }
    };
    Slot.prototype.handleViewabilityChange = function (isInView) {
        var _a, _b, _c;
        // Check if viewability has changed
        if (this.viewability.inview === isInView)
            return;
        // Set inView
        this.viewability.inview = isInView;
        // Perform actions when the element is in view
        (0, log_1.logInfo)("Element ".concat(this.slot_id, ",  inview: ").concat(isInView));
        // Check if the element is in view
        if (isInView) {
            // Check if slot is displayed and bid is displayed
            if (this.displayed && ((_a = this.displayedBid) === null || _a === void 0 ? void 0 : _a.displayed)) {
                // Set entered inview timestamp
                this.viewability.entered_inview_ts = Date.now();
                // set inview refresh timer if allowed
                this.setInviewRefreshTimer();
                // set viewability timer
                this.displayedBid.setViewabilityTimer();
            }
            // check if video player is paused
            if (this.videoPlayer &&
                (!this.videoPlayer.ad_started ||
                    this.videoPlayer.ad_paused)) {
                // play ads
                this.videoPlayer.playAds();
            }
        }
        else { // Element is out of view
            // Check if slot is displayed and bid is displayed
            if (this.displayed && ((_b = this.displayedBid) === null || _b === void 0 ? void 0 : _b.displayed)) {
                if (this.refresh.inview_interval !== null) {
                    clearTimeout(this.refresh.inview_interval_timer);
                    this.refresh.inview_interval_timer = null;
                }
                // set time since slot was displayed
                this.setTimeInviewSinceDisplayed();
                // clear viewability timer
                (_c = this.displayedBid) === null || _c === void 0 ? void 0 : _c.clearViewabilityTimer();
            }
            // check if video player is paused
            if (this.videoPlayer &&
                this.videoPlayer.ad_started &&
                !this.videoPlayer.ad_paused) {
                // pause ads
                this.videoPlayer.pauseAds();
            }
        }
    };
    /**
     * @returns void
     * @description Set time since slot was displayed
     */
    Slot.prototype.setTimeInviewSinceDisplayed = function () {
        // Get time since slot was displayed
        this.viewability.time_inview_since_displayed = this.viewability.time_inview_since_displayed || 0;
        if (this.viewability.entered_inview_ts) {
            var entered_inview_ts = Math.max(this.viewability.entered_inview_ts, this.displayed_ts);
            this.viewability.time_inview_since_displayed += Math.max(Date.now() - entered_inview_ts, 0);
        }
    };
    /**
     * Insert video div into element
     * @returns boolean
     */
    Slot.prototype.insertOutstreamPlayer = function () {
        var _this = this;
        try {
            if (!this.videoPlayer) {
                // Create video instance
                this.videoPlayer = new VideoInstance_1.VideoInstance(this.div_id, this, function (success, deleteSlot) {
                    if (deleteSlot) {
                        delete _this.videoPlayer;
                        _this.videoPlayer = null;
                        _this.removeSlot();
                    }
                    else if (success) {
                        // Refresh slot
                        _this.refreshSlot();
                    }
                    else if (!success) {
                        // Reset flags
                        _this.displayed = false;
                        _this.ad_injected = false;
                        // Display winning bid
                        _this.displayWinningBid();
                    }
                });
            }
            else {
                this.videoPlayer.initializeIma();
            }
            return true;
        }
        catch (error) {
            console.error("Unable to insert outstream player into slot.", this.slot_id, error);
            return false;
        }
    };
    /**
     * @returns void
     * @description Remove expired bids
     */
    Slot.prototype.removeExpiredBids = function () {
        var i = 0;
        while (i < this.bids.length) {
            // Check if the element is expired
            if (this.bids[i].isExpired()) {
                // Remove the element from the array
                this.bids.splice(i, 1);
            }
            else {
                // Increment the index only if no element is removed
                i++;
            }
        }
    };
    /**
     * @returns void
     * @description Remove slot from page
    */
    Slot.prototype.removeSlot = function () {
        // remove slot from page
        this.element.remove();
        // remove viewability tracker
        this.removeViewabilityTracker();
        // remove lazyload trackers
        this.removeLazyloadTrackers();
        // remove lazyload trackers
        this.removeAutoDeleteTracker();
        // fire custom event that slot has been removed
        var event = new CustomEvent('BcSlotRemoved', { detail: this });
        document.dispatchEvent(event);
        // remove slot from page
        delete Page_1.globalPage.slots[this.slot_id];
    };
    return Slot;
}());
exports["default"] = Slot;


/***/ }),

/***/ "./src/classes/Storage.ts":
/*!********************************!*\
  !*** ./src/classes/Storage.ts ***!
  \********************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";

var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var _a;
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.DEFAULT_STORAGE_OPTIONS = exports.STORAGE_PREFIX = void 0;
// import { openDB, deleteDB, wrap, unwrap } from 'idb';
var ConsentHandler_1 = __webpack_require__(/*! ./consent/ConsentHandler */ "./src/classes/consent/ConsentHandler.ts");
var activities_1 = __webpack_require__(/*! ../modules/consent/activities */ "./src/modules/consent/activities.ts");
var utils_1 = __webpack_require__(/*! ../utils/utils */ "./src/utils/utils.ts");
var moduleTypes_1 = __webpack_require__(/*! ../modules/consent/moduleTypes */ "./src/modules/consent/moduleTypes.ts");
var STORAGE_TYPE_LOCALSTORAGE = 'html5';
var STORAGE_TYPE_COOKIES = 'cookie';
var DEFAULT_MAX_AGE = 60 * 60 * 24 * 30;
exports.STORAGE_PREFIX = '__bc_lh_';
exports.DEFAULT_STORAGE_OPTIONS = {
    'maxAge': DEFAULT_MAX_AGE,
    'expires': '',
    'path': '/',
    'domain': '.' + (0, utils_1.getDomain)() || (0),
    'sameSite': 'None',
    'secure': 1 // cookie will only be sent over SSL
};
var Storage = /** @class */ (function () {
    function Storage() {
    }
    Storage.isValid = function (cb, storageType, storageObj) {
        if (storageObj.componentType === moduleTypes_1.MODULE_TYPE_CORE) {
            return cb({ valid: true });
        }
        var params = __assign({ storageType: storageType }, storageObj);
        var result = {
            valid: ConsentHandler_1.allConsentHandler.isActivityAllowed(activities_1.ACTIVITY_ACCESS_DEVICE, params)
        };
        return cb(result);
    };
    /**
     *
     * @param key
     * @param value
     * @param storageObj
     * @param options
     * @returns
     */
    Storage.setItemInStorage = function (key, value, storageObj, options) {
        if (options === void 0) { options = exports.DEFAULT_STORAGE_OPTIONS; }
        // First try localStorage
        if (Storage.localStorageIsEnabled(storageObj)) {
            var maxAge = options.maxAge || DEFAULT_MAX_AGE;
            Storage.setDataInLocalStorage(key, value, storageObj, maxAge);
        }
        else if (Storage.cookiesAreEnabled(storageObj)) {
            Storage.setCookie(key, value, storageObj, options);
        }
        return true;
    };
    /**
     * @param {string} key
     * @param {string} [storageObj]
    */
    Storage.getItemFromStorage = function (key, storageObj) {
        var value = null;
        // First try localStorage
        if (Storage.localStorageIsEnabled(storageObj)) {
            value = Storage.getDataFromLocalStorage(key, storageObj);
        }
        if (!value && Storage.cookiesAreEnabled(storageObj)) {
            value = Storage.getCookie(key, storageObj);
        }
        return value;
    };
    Storage.setCookie = function (name, value, storageObj, options) {
        var cb = function (result) {
            if (result && result.valid) {
                value = encodeURIComponent(value);
                var cookieParts = ["".concat(name, "=").concat(value)];
                if (options) {
                    if (options.path) {
                        cookieParts.push("Path=".concat(options.path));
                    }
                    if (options.maxAge) {
                        cookieParts.push("Max-Age=".concat(options.maxAge));
                    }
                    else if (options.expires) {
                        var expires = new Date(options.expires).toUTCString();
                        cookieParts.push("Expires=".concat(expires));
                    }
                    if (options.domain) {
                        cookieParts.push("Domain=".concat(options.domain));
                    }
                    if (options.secure) {
                        cookieParts.push('Secure');
                    }
                    if (options.httpOnly) {
                        cookieParts.push('HttpOnly');
                    }
                    if (options.sameSite) {
                        cookieParts.push("SameSite=".concat(options.sameSite));
                    }
                }
                document.cookie = cookieParts.join('; ');
            }
        };
        return Storage.isValid(cb, STORAGE_TYPE_COOKIES, storageObj);
    };
    /**
     * @param {string} name
     * @returns {(string|null)}
     */
    Storage.getCookie = function (name, storageObj) {
        var cb = function (result) {
            if (result && result.valid) {
                var m = window.document.cookie.match('(^|;)\\s*' + name + '\\s*=\\s*([^;]*)\\s*(;|$)');
                return m ? decodeURIComponent(m[2]) : null;
            }
            return null;
        };
        return Storage.isValid(cb, STORAGE_TYPE_COOKIES, storageObj);
    };
    /**
     * @returns {boolean}
     */
    Storage.localStorageIsEnabled = function (storageObj) {
        var cb = function (result) {
            if (result && result.valid) {
                try {
                    localStorage.setItem("".concat(exports.STORAGE_PREFIX, ".cookieTest"), '1');
                    return localStorage.getItem("".concat(exports.STORAGE_PREFIX, ".cookieTest")) === '1';
                }
                catch (error) {
                    console.error('Local storage api disabled');
                }
                finally {
                    try {
                        localStorage.removeItem("".concat(exports.STORAGE_PREFIX, ".cookieTest"));
                    }
                    catch (error) {
                        console.error('Local storage api disabled');
                    }
                }
            }
            return false;
        };
        return Storage.isValid(cb, STORAGE_TYPE_LOCALSTORAGE, storageObj);
    };
    /**
     * @returns {boolean}
     */
    Storage.cookiesAreEnabled = function (storageObj) {
        var cb = function (result) {
            if (result && result.valid) {
                return Storage.checkCookieSupport();
            }
            return false;
        };
        return Storage.isValid(cb, STORAGE_TYPE_COOKIES, storageObj);
    };
    /**
     * @param {string} key
     * @param {string} value
     */
    Storage.setDataInLocalStorage = function (key, value, storageObj, maxAge) {
        var cb = function (result) {
            if (result && result.valid && Storage.hasLocalStorage()) {
                window.localStorage.setItem(key, value);
                // set expiration in Days
                maxAge = maxAge || DEFAULT_MAX_AGE;
                maxAge = new Date().getTime() + (maxAge * 1000);
                window.localStorage.setItem("".concat(key, "_exp"), maxAge);
            }
        };
        return Storage.isValid(cb, STORAGE_TYPE_LOCALSTORAGE, storageObj);
    };
    /**
     * @param {string} key
     * @returns {(string|null)}
     */
    Storage.getDataFromLocalStorage = function (key, storageObj) {
        var cb = function (result) {
            if (result && result.valid && Storage.hasLocalStorage()) {
                return window.localStorage.getItem(key);
            }
            return null;
        };
        return Storage.isValid(cb, STORAGE_TYPE_LOCALSTORAGE, storageObj);
    };
    // Garbage collection for local storage
    // If the expiration date has passed, remove the item from storage
    // @param {string} key
    // @returns {boolean}
    Storage.garbageCollectLocalStorage = function (key, storageObj) {
        var cb = function (result) {
            if (result && result.valid && Storage.hasLocalStorage()) {
                var expiration = window.localStorage.getItem("".concat(key, "_exp"));
                if (expiration && new Date().getTime() > parseInt(expiration)) {
                    Storage.removeDataFromLocalStorage(key, storageObj);
                    return true;
                }
            }
            return false;
        };
        return Storage.isValid(cb, STORAGE_TYPE_LOCALSTORAGE, storageObj);
    };
    /**
     * @param {string} key
     */
    Storage.removeDataFromLocalStorage = function (key, storageObj) {
        var cb = function (result) {
            if (result && result.valid && Storage.hasLocalStorage()) {
                window.localStorage.removeItem(key);
                window.localStorage.removeItem("".concat(key, "_exp"));
            }
        };
        return Storage.isValid(cb, STORAGE_TYPE_LOCALSTORAGE, storageObj);
    };
    /**
     * @returns {boolean}
     */
    Storage.hasLocalStorage = function () {
        try {
            return !!window.localStorage;
        }
        catch (e) {
            console.error('Local storage api disabled');
        }
        return false;
    };
    /**
     * @returns {(boolean|undefined)}
     */
    Storage.checkCookieSupport = function () {
        if (window.navigator.cookieEnabled || !!document.cookie.length) {
            return true;
        }
        return false;
    };
    /**
     *
     * @param storageObj
     * @returns {boolean}
     */
    Storage.hasIndexedDB = function (storageObj) {
        var cb = function (result) {
            if (result && result.valid) {
                try {
                    return !!window.indexedDB;
                }
                catch (e) {
                    console.error('IndexedDB api disabled');
                }
            }
            return false;
        };
        return Storage.isValid(cb, STORAGE_TYPE_LOCALSTORAGE, storageObj);
    };
    return Storage;
}());
exports["default"] = Storage;


/***/ }),

/***/ "./src/classes/User.ts":
/*!*****************************!*\
  !*** ./src/classes/User.ts ***!
  \*****************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";

var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.globalUser = exports.User = void 0;
var utils_1 = __webpack_require__(/*! ../utils/utils */ "./src/utils/utils.ts");
var Storage_1 = __importStar(__webpack_require__(/*! ./Storage */ "./src/classes/Storage.ts"));
var User = /** @class */ (function () {
    function User() {
        this._uuid_storage_name = "".concat(Storage_1.STORAGE_PREFIX, "uuid");
        this.new_user = false;
        this._storageObj = { 'componentType': 'core' };
        this.getUUID();
        this.saveUUID();
    }
    User.prototype.getUUID = function () {
        // if uuid is already set, return it
        if (this._uuid)
            return this._uuid;
        // get uuid from local storage
        this._uuid = Storage_1.default.getItemFromStorage(this._uuid_storage_name, this._storageObj);
        // if uuid is not set, generate new one
        if (!this._uuid) {
            this._uuid = (0, utils_1.generateUUID)();
            // set new user flag
            this.new_user = true;
        }
        return this._uuid;
    };
    User.prototype.saveUUID = function () {
        var _a;
        // if uuid is not set, return false
        if (!this._uuid)
            return false;
        var maxAge = 60 * 60 * 24 * 365 * 1; // 1 years
        // set storage options
        var storageOptions = {
            'maxAge': maxAge,
            'expires': '',
            'path': '/',
            'domain': '.' + (0, utils_1.getDomain)() || (0),
            'sameSite': 'None',
            'secure': 1 // cookie will only be sent over SSL
        };
        // save id to local storage
        Storage_1.default.setItemInStorage(this._uuid_storage_name, this._uuid, this._storageObj, storageOptions);
        return true;
    };
    return User;
}());
exports.User = User;
exports.globalUser = new User();


/***/ }),

/***/ "./src/classes/UserSync.ts":
/*!*********************************!*\
  !*** ./src/classes/UserSync.ts ***!
  \*********************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";

var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (g && (g = 0, op[0] && (_ = 0)), _) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.globalUserSync = exports.USYNC_STORAGE_PREFIX = void 0;
var ua_parser_js_1 = __importDefault(__webpack_require__(/*! ua-parser-js */ "./node_modules/ua-parser-js/src/ua-parser.js"));
var activities_1 = __webpack_require__(/*! ../modules/consent/activities */ "./src/modules/consent/activities.ts");
var ConsentHandler_1 = __webpack_require__(/*! ./consent/ConsentHandler */ "./src/classes/consent/ConsentHandler.ts");
var Storage_1 = __importDefault(__webpack_require__(/*! ./Storage */ "./src/classes/Storage.ts"));
var moduleTypes_1 = __webpack_require__(/*! ../modules/consent/moduleTypes */ "./src/modules/consent/moduleTypes.ts");
var User_1 = __webpack_require__(/*! ./User */ "./src/classes/User.ts");
var __1 = __webpack_require__(/*! .. */ "./src/index.ts");
var utils_1 = __webpack_require__(/*! ../utils/utils */ "./src/utils/utils.ts");
var log_1 = __webpack_require__(/*! ../utils/log */ "./src/utils/log.ts");
var envVars_1 = __webpack_require__(/*! ../envVars */ "./src/envVars.ts");
exports.USYNC_STORAGE_PREFIX = '__bc_usync_';
var UserSync = /** @class */ (function () {
    function UserSync() {
        var _this = this;
        this._pending = [];
        this._timeout = 2000;
        this._timeout_handle = null;
        this._endpoint = "https://".concat(envVars_1.endpoint_prefix, "usync.bigcrunch.com/s2s/userSync");
        this.started = false;
        this.ready = false;
        this.callback = function () { };
        this.BIDDER_SYNC_CONFIGS = {
            triplelift: {
                type: "iframe",
                url: "https://eb2.3lift.com/sync?gdpr={{gdpr_applies}}&gdpr_consent={{gdpr_string}}&us_privacy={{usp_string}}&gpp={{gpp}}&gpp_sid={{gpp_sid}}&redir={{redir}}",
                replaceMacros: function (url) {
                    if (url === void 0) { url = ""; }
                    // get gdpr applies
                    var gdpr_applies = ConsentHandler_1.gdprConsentHandler.getGdprApplies();
                    // get gdpr string
                    var gdpr_string = ConsentHandler_1.gdprConsentHandler.getGdprString();
                    // get usp string
                    var usp_string = ConsentHandler_1.uspConsentHandler.getUsPrivacy();
                    // get gpp string
                    var gpp = ConsentHandler_1.gppConsentHandler.getGppString();
                    // get gpp sid
                    var gpp_sid = ConsentHandler_1.gppConsentHandler.getApplicableSections().join(',');
                    // replace macros
                    var redirect = encodeURIComponent("".concat(_this._endpoint, "?bc_userId=").concat(User_1.globalUser.getUUID(), "&bidder=triplelift&userid=$UID"));
                    // replace macros
                    return url.replace('{{gdpr_applies}}', gdpr_applies ? '1' : '0')
                        .replace('{{gdpr_string}}', gdpr_string)
                        .replace('{{usp_string}}', usp_string)
                        .replace('{{gpp}}', gpp)
                        .replace('{{gpp_sid}}', gpp_sid)
                        .replace('{{redir}}', redirect);
                },
            },
            freewheel: {
                type: "image",
                url: "https://ads.stickyadstv.com/user-matching?id={{id}}&_fw_gdpr={{gdpr_applies}}&_fw_gdpr_consent={{gdpr_string}}&bc_userId={{bc_userId}}",
                replaceMacros: function (url, ext) {
                    if (url === void 0) { url = ""; }
                    // get gdpr applies
                    var gdpr_applies = ConsentHandler_1.gdprConsentHandler.getGdprApplies();
                    // get gdpr string
                    var gdpr_string = ConsentHandler_1.gdprConsentHandler.getGdprString();
                    // replace macros
                    return url.replace('{{id}}', ext.sync_id)
                        .replace('{{gdpr_applies}}', gdpr_applies ? '1' : '0')
                        .replace('{{gdpr_string}}', gdpr_string)
                        .replace('{{bc_userId}}', User_1.globalUser.getUUID());
                },
                extraSyncing: function (ext) {
                    var url = "https://ads.stickyadstv.com/auto-user-sync?pxId={{pxId}}".replace('{{pxId}}', ext.sync_id);
                    // create new image with url as source
                    var img = new Image();
                    // set source
                    img.src = url;
                }
            },
            magnite: {
                type: "image",
                url: "https://pixel.rubiconproject.com/exchange/sync.php?p={{partner_key}}&gdpr={{gdpr_applies}}&gdpr_consent={{gdpr_string}}&us_privacy={{usp_string}}",
                replaceMacros: function (url, ext) {
                    if (url === void 0) { url = ""; }
                    // get gdpr applies
                    var gdpr_applies = ConsentHandler_1.gdprConsentHandler.getGdprApplies();
                    // get gdpr string
                    var gdpr_string = ConsentHandler_1.gdprConsentHandler.getGdprString();
                    // get usp string
                    var usp_string = ConsentHandler_1.uspConsentHandler.getUsPrivacy();
                    // replace macros
                    return url.replace('{{partner_key}}', ext.partner_key)
                        .replace('{{gdpr_applies}}', gdpr_applies ? '1' : '0')
                        .replace('{{gdpr_string}}', gdpr_string)
                        .replace('{{usp_string}}', usp_string);
                }
            },
            ix: {
                type: "iframe",
                url: "https://ssum-sec.casalemedia.com/usermatch?s={{site_id}}&cb={{callback}}",
                replaceMacros: function (url, ext) {
                    if (url === void 0) { url = ""; }
                    var redirect = encodeURIComponent("".concat(_this._endpoint, "?bc_userId=").concat(User_1.globalUser.getUUID(), "&bidder=ix&userid="));
                    return url.replace('{{site_id}}', ext.site_id)
                        .replace('{{callback}}', redirect);
                }
            },
            nexxen: {
                type: "image",
                url: "https://sync.1rx.io/usersync2/rmpssp?sub={{sub}}",
                replaceMacros: function (url, ext) {
                    if (url === void 0) { url = ""; }
                    return url.replace('{{sub}}', ext.sub);
                }
            },
            pubmatic: {
                type: "image",
                url: "https://image8.pubmatic.com/AdServer/ImgSync?p={{publisher_id}}&gdpr={{gdpr_applies}}&gdpr_consent={{gdpr_string}}&pu={{pu}}",
                replaceMacros: function (url, ext) {
                    if (url === void 0) { url = ""; }
                    // get gdpr applies
                    var gdpr_applies = ConsentHandler_1.gdprConsentHandler.getGdprApplies();
                    // get gdpr string
                    var gdpr_string = ConsentHandler_1.gdprConsentHandler.getGdprString();
                    // redirect url
                    var redirect = encodeURIComponent("".concat(_this._endpoint, "?bc_userId=").concat(User_1.globalUser.getUUID(), "&bidder=pubmatic&userid=#PMUID"));
                    var pu = encodeURIComponent("https://image4.pubmatic.com/AdServer/SPug?p=".concat(ext.publisher_id, "&mpc=4&fp=1&pmc=PM_PMC&pr=").concat(redirect));
                    // replace macros
                    return url.replace('{{publisher_id}}', ext.publisher_id)
                        .replace('{{gdpr_applies}}', gdpr_applies ? '1' : '0')
                        .replace('{{gdpr_string}}', gdpr_string)
                        .replace('{{pu}}', pu);
                }
            },
            the_trade_desk: {
                type: "fetch",
                url: "https://match.adsrvr.org/track/rid?ttd_pid={{ttd_pid}}&fmt=json&gdpr={{gdpr_applies}}&gdpr_consent={{gdpr_string}}",
                replaceMacros: function (url, ext) {
                    if (url === void 0) { url = ""; }
                    // get gdpr applies
                    var gdpr_applies = ConsentHandler_1.gdprConsentHandler.getGdprApplies();
                    // get gdpr string
                    var gdpr_string = ConsentHandler_1.gdprConsentHandler.getGdprString();
                    // redirect url
                    url += "ttd_passthrough=" + encodeURIComponent("bc_userId=".concat(User_1.globalUser.getUUID(), "&bidder=the_trade_desk"));
                    // replace macros
                    return url.replace('{{ttd_pid}}', ext.ttd_pid)
                        .replace('{{gdpr_applies}}', gdpr_applies ? '1' : '0')
                        .replace('{{gdpr_string}}', gdpr_string);
                }
            }
        };
    }
    /**
     *
     * @param bidder_name
     * @returns {string|null}
     * @description Get user id from storage
     */
    UserSync.prototype.getUserIdFromStorage = function (bidder_name) {
        var storageObj = { 'componentType': moduleTypes_1.MODULE_TYPE_UID, 'componentName': bidder_name };
        // get cookie name
        var storage_name = exports.USYNC_STORAGE_PREFIX + bidder_name;
        // get cookie value
        var value = Storage_1.default.getItemFromStorage(storage_name, storageObj);
        // check if cookie value exists
        if (value) {
            return this.setUserIdInStorage(storage_name, value, storageObj);
        }
        // return null
        return null;
    };
    UserSync.prototype.setUserIdInStorage = function (storage_name, value, storageObj) {
        Storage_1.default.setItemInStorage(storage_name, value, storageObj);
        // return cookie value
        return value;
    };
    UserSync.prototype.checkIfReady = function () {
        if (this._pending.length === 0 || this.ready === true) {
            (0, log_1.logInfo)('User sync is ready');
            this.ready = true;
            this.callback();
            this.callback = function () { };
        }
    };
    /**
     *
     * @returns {boolean}
     * @description Sync users with bidders
     */
    UserSync.prototype.syncUsers = function (userSyncs, bidders) {
        return __awaiter(this, void 0, void 0, function () {
            var ua, browser, _loop_1, this_1, bidder_name;
            var _this = this;
            return __generator(this, function (_a) {
                if (this.started)
                    return [2 /*return*/, true];
                this.started = true;
                ua = new ua_parser_js_1.default((0, utils_1.getUserAgent)());
                browser = ua.getBrowser().name || '';
                if (browser.includes('Brave') ||
                    browser.includes('Safari') ||
                    browser.includes('Firefox') ||
                    !Object.keys(userSyncs).length ||
                    (!Storage_1.default.checkCookieSupport() &&
                        !Storage_1.default.hasLocalStorage())) {
                    this.checkIfReady();
                    return [2 /*return*/, true];
                }
                // set a timeout
                if (!this._timeout_handle) {
                    this._timeout_handle = setTimeout(function () {
                        (0, log_1.logInfo)('User sync timeout');
                        clearTimeout(_this._timeout_handle);
                        _this._timeout_handle = null;
                        _this.ready = true;
                        _this.checkIfReady();
                    }, this._timeout);
                }
                // check if activity is allowed
                if (!ConsentHandler_1.allConsentHandler.isActivityAllowed(activities_1.ACTIVITY_SYNC_USER, { gvlid: {} })) {
                    (0, log_1.logInfo)('User sync not allowed by consent');
                    this.ready = true;
                    this.checkIfReady();
                    return [2 /*return*/, true];
                }
                _loop_1 = function (bidder_name) {
                    // check if user id exists in storage
                    if (!this_1.getUserIdFromStorage(bidder_name)) {
                        // get bidder config
                        var bidder_config = bidders[bidder_name] || {};
                        // get user sync config
                        var usync_config = userSyncs[bidder_name] || {};
                        // check if bidder is enabled
                        if (bidder_config.enabled === false)
                            return "continue";
                        // get bidder sync config
                        var bidder_sync_config = this_1.BIDDER_SYNC_CONFIGS[bidder_name];
                        // check if bidder sync config exists
                        if (!bidder_sync_config)
                            return "continue";
                        // check if bidder sync is allowed
                        if (!ConsentHandler_1.allConsentHandler.isActivityAllowed(activities_1.ACTIVITY_SYNC_USER, { 'componentType': moduleTypes_1.MODULE_TYPE_UID, 'componentName': bidder_name }))
                            return "continue";
                        // get sync url
                        var url = bidder_sync_config.url;
                        // check if replace macro function exists
                        if (typeof bidder_sync_config.replaceMacros === 'function') {
                            // replace macros
                            url = bidder_sync_config.replaceMacros(url, usync_config);
                        }
                        // add bidder to pending
                        this_1._pending.push(bidder_name);
                        if (bidder_sync_config.type == "fetch") {
                            // fetch data
                            this_1.fetchData(url, bidder_name);
                        }
                        else if (bidder_sync_config.type == "image") {
                            // trigger pixel
                            (0, utils_1.triggerPixel)(url, function () {
                                // check if bidder exists
                                if (bidder_name) {
                                    // remove bidder from pending
                                    _this._pending = _this._pending.filter(function (bidder) { return bidder !== bidder_name; });
                                }
                                _this.checkIfReady();
                            }, 1000);
                        }
                        else if (bidder_sync_config.type == "iframe") {
                            (0, utils_1.insertUserSyncIframe)(url, function () {
                                // check if bidder exists
                                if (bidder_name) {
                                    // remove bidder from pending
                                    _this._pending = _this._pending.filter(function (bidder) { return bidder !== bidder_name; });
                                }
                                _this.checkIfReady();
                            }, 1000);
                        }
                        // check if extra syncing function exists
                        if (typeof bidder_sync_config.extraSyncing === 'function') {
                            bidder_sync_config.extraSyncing(usync_config);
                        }
                    }
                    this_1.checkIfReady();
                };
                this_1 = this;
                // loop through bidders
                for (bidder_name in bidders) {
                    _loop_1(bidder_name);
                }
                return [2 /*return*/, true];
            });
        });
    };
    /**
     *
     * @param url
     * @description Fetch data
     */
    UserSync.prototype.fetchData = function (url, bidder_name) {
        return __awaiter(this, void 0, void 0, function () {
            var response, data, bidder_1, external_id, error_1;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        _a.trys.push([0, 3, , 4]);
                        return [4 /*yield*/, (0, utils_1.fetchWithTimeout)(url, 1000, { credentials: 'include' })];
                    case 1:
                        response = _a.sent();
                        if (!response.ok) {
                            throw new Error('Error Syncing User');
                        }
                        return [4 /*yield*/, response.json()];
                    case 2:
                        data = (_a.sent()) || {};
                        bidder_1 = data.bidder || bidder_name || '';
                        // check if bidder exists
                        if (bidder_1) {
                            external_id = data.external_id || data.TDID || '';
                            // set user id in storage
                            if (external_id) {
                                this.setUserIdInStorage(exports.USYNC_STORAGE_PREFIX + bidder_1, external_id, { 'componentType': moduleTypes_1.MODULE_TYPE_UID, 'componentName': bidder_1 });
                            }
                            if (__1.globalSettings.user_syncs[bidder_1]) {
                                __1.globalSettings.user_syncs[bidder_1].buyeruid = external_id;
                            }
                            // remove bidder from pending
                            this._pending = this._pending.filter(function (pending_bidder_name) { return pending_bidder_name !== bidder_1; });
                        }
                        this.checkIfReady();
                        (0, log_1.logInfo)('Data received:', data);
                        return [3 /*break*/, 4];
                    case 3:
                        error_1 = _a.sent();
                        console.error('Error:', error_1);
                        return [3 /*break*/, 4];
                    case 4: return [2 /*return*/];
                }
            });
        });
    };
    return UserSync;
}());
exports.globalUserSync = new UserSync();


/***/ }),

/***/ "./src/classes/VideoInstance.ts":
/*!**************************************!*\
  !*** ./src/classes/VideoInstance.ts ***!
  \**************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.VideoInstance = void 0;
var __1 = __webpack_require__(/*! .. */ "./src/index.ts");
var log_1 = __webpack_require__(/*! ../utils/log */ "./src/utils/log.ts");
var utils_1 = __webpack_require__(/*! ../utils/utils */ "./src/utils/utils.ts");
var Analytics_1 = __webpack_require__(/*! ./Analytics */ "./src/classes/Analytics.ts");
var ima_loaded = false;
var VideoInstance = /** @class */ (function () {
    // Constructor
    function VideoInstance(div_id, slotObj, callback) {
        this.ad_bar_interval = null;
        this.container = null;
        this.video_wrapper = null;
        this.video_player = null;
        this.video_meta = null;
        this.video_title = null;
        this.video_description = null;
        this.div_id = div_id;
        this.video_type = "";
        this.time_stamp = null;
        // Variables for ads (outstream)
        this.ads_manager = null;
        this.ad_container = null;
        this.ad_display_container = null;
        this.ads_loader = null;
        this.ad_started = false;
        this.ad_paused = true;
        this.ad_finished = false;
        this.callback = callback;
        this.muted = true;
        this.deleted = false;
        this.can_play = false;
        this.initialized = false;
        this.ad_bar_interval = null;
        // SVG icons
        this.volume_up_icon = '<svg role="img" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 640 512"><path fill="currentColor" d="M592 256c0 78.5-37.7 148.2-96 192l28.8 38.4C594.7 433.9 640 350.3 640 256.1l0-.1 0-.1c0-94.2-45.3-177.8-115.2-230.3L496 64c58.3 43.8 96 113.5 96 192zM438.4 371.2l28.8 38.4c46.6-35 76.8-90.8 76.8-153.6s-30.2-118.6-76.8-153.6l-28.8 38.4c35 26.3 57.6 68.1 57.6 115.2s-22.6 88.9-57.6 115.2zM400 256c0 15.7-7.5 29.6-19.2 38.4l28.8 38.4C432.9 315.3 448 287.4 448 256s-15.1-59.3-38.4-76.8l-28.8 38.4c11.7 8.8 19.2 22.7 19.2 38.4zM0 160V352H128L272 480h48V32H272L128 160H0z"></path></svg>';
        this.volume_mute_icon = '<svg class="mute_icon" role="img" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 576 512"><path fill="currentColor" d="M0 160V352H128L272 480h48V32H272L128 160H0zm441 23l-17-17L390.1 200l17 17 39 39-39 39-17 17L424 345.9l17-17 39-39 39 39 17 17L569.9 312l-17-17-39-39 39-39 17-17L536 166.1l-17 17-39 39-39-39z"></path></svg>';
        this.play_icon = '<svg role="img" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 384 512"><path fill="currentColor" d="M384 256L0 32V480L384 256z"></path></svg>';
        this.pause_icon = '<svg role="img" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 320 512"><path fill="currentColor" d="M128 64H0V448H128V64zm192 0H192V448H320V64z"></path></svg>';
        this.close_icon = '<svg role="img" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 320 512"><path fill="currentColor" d="M310.6 150.6c12.5-12.5 12.5-32.8 0-45.3s-32.8-12.5-45.3 0L160 210.7 54.6 105.4c-12.5-12.5-32.8-12.5-45.3 0s-12.5 32.8 0 45.3L114.7 256 9.4 361.4c-12.5 12.5-12.5 32.8 0 45.3s32.8 12.5 45.3 0L160 301.3 265.4 406.6c12.5 12.5 32.8 12.5 45.3 0s12.5-32.8 0-45.3L205.3 256 310.6 150.6z"></path></svg>';
        // Slot Object
        this.slotObj = slotObj;
        // Set the settings
        this.settings = slotObj.outstream || {};
        // Create a new video player
        this.createVideoPlayer();
    }
    // Create a new video player
    VideoInstance.prototype.createVideoPlayer = function () {
        var _this = this;
        // Get the container
        this.container = document.getElementById(this.div_id);
        // If container doesn't exist, bail
        if (!this.container)
            return;
        if (this.settings.expand) {
            this.container.classList.add('expandable');
            this.container.classList.add('collapsed');
        }
        if (document.getElementById(this.div_id + "_video_wrapper"))
            return;
        var video_wrapper = document.createElement("div");
        video_wrapper.classList.add("bigcrunch-video-wrapper");
        video_wrapper.setAttribute("id", this.div_id + "_video_wrapper");
        this.video_wrapper = video_wrapper;
        if (this.slotObj.sticky.enabled) {
            // add classes to element
            this.container.classList.add('bigcrunch-sticky-outstream-wrapper');
        }
        else {
            // add classes to element
            this.container.classList.add('bigcrunch-outstream-wrapper');
        }
        // Set autoplay
        this.autoplay = true;
        // If this video already exists, bail
        // if(document.getElementById(this.div_id + "_video")) return;
        // Create the video element
        var video = document.createElement("video");
        video.setAttribute("id", this.div_id + "_video");
        video.setAttribute("autoplay", "".concat(this.autoplay));
        video.setAttribute("playsinline", "");
        video.setAttribute("preload", "none");
        video.setAttribute("muted", "true");
        video.setAttribute("oncanplay", "this.muted=true");
        video.style.width = '100%';
        video.style.height = '100%';
        this.video_player = video;
        // mute the video
        this.muted = true;
        // Add the video to the video wrapper
        this.video_wrapper.appendChild(this.video_player);
        // Add video to the page
        this.container.appendChild(this.video_wrapper);
        // Default to outstream
        this.video_type = "outstream";
        // Add the ad-container right after the video player
        this.ad_container = document.createElement("div");
        this.ad_container.setAttribute("id", "ad-container");
        // Add size to ad-container
        this.ad_container.style.width = '100%';
        this.ad_container.style.height = '100%';
        // Add the ad-container right after the video player
        this.video_player.parentNode.insertBefore(this.ad_container, this.video_player.nextSibling);
        // Create video meta
        var video_meta = document.createElement("div");
        video_meta.classList.add("bigcrunch-video-meta");
        this.video_meta = video_meta;
        // Create video title
        var video_title = document.createElement("div");
        video_title.classList.add("bigcrunch-video-title");
        this.video_title = video_title;
        this.video_meta.appendChild(video_title);
        // Create video description
        var video_description = document.createElement("div");
        video_description.classList.add("bigcrunch-video-description");
        this.video_description = video_description;
        this.video_meta.appendChild(video_description);
        // Add video meta to the page
        this.container.appendChild(video_meta);
        if (!ima_loaded) {
            // Load the IMA SDK
            this.loadScript("https://imasdk.googleapis.com/js/sdkloader/ima3.js") // https://imasdk.googleapis.com/js/sdkloader/ima3_debug.js
                .then(function () {
                ima_loaded = true;
                _this.initializeIma();
            })
                .catch(function (error) {
                (0, log_1.logInfo)("Error loading IMA SDK", error);
            });
        }
        else {
            this.initializeIma();
        }
    };
    // Initialize ads for outstream player
    VideoInstance.prototype.initializeIma = function () {
        // Create the ad display container
        this.ad_display_container = new globalThis.google.ima.AdDisplayContainer(this.ad_container, this.video_player);
        this.ads_loader = new globalThis.google.ima.AdsLoader(this.ad_display_container);
        this.ads_loader.getSettings().setAutoPlayAdBreaks(true);
        this.ads_loader.getSettings().setDisableCustomPlaybackForIOS10Plus(true);
        // Listen and respond to ads_loader events
        this.ads_loader.addEventListener(globalThis.google.ima.AdsManagerLoadedEvent.Type.ADS_MANAGER_LOADED, this.adsManagerLoaded.bind(this), false);
        // Listen and respond to ads_loader errors
        this.ads_loader.addEventListener(globalThis.google.ima.AdErrorEvent.Type.AD_ERROR, this.adError.bind(this), false);
        this.imaRequestAds();
    };
    VideoInstance.prototype.imaRequestAds = function () {
        var _a, _b, _c, _d, _e, _f, _g, _h, _j, _k, _l;
        // Request video ads.
        var ads_request = new globalThis.google.ima.AdsRequest();
        if ((_b = (_a = this.slotObj.winningBid) === null || _a === void 0 ? void 0 : _a.data) === null || _b === void 0 ? void 0 : _b.adm) {
            switch (this.isUrlOrVastTag(((_d = (_c = this.slotObj.winningBid) === null || _c === void 0 ? void 0 : _c.data) === null || _d === void 0 ? void 0 : _d.adm) || '')) {
                case 'URL':
                    ads_request.adTagUrl = (_f = (_e = this.slotObj.winningBid) === null || _e === void 0 ? void 0 : _e.data) === null || _f === void 0 ? void 0 : _f.adm;
                    break;
                case 'VAST':
                    ads_request.adsResponse = (_h = (_g = this.slotObj.winningBid) === null || _g === void 0 ? void 0 : _g.data) === null || _h === void 0 ? void 0 : _h.adm;
                    break;
                default:
                    this.adError('Invalid ad tag or VAST response');
                    break;
            }
        }
        else {
            this.adError('Invalid ad tag or VAST response');
        }
        // Specify the linear and nonlinear slot sizes. This helps the SDK to
        // select the correct creative if multiple are returned.
        ads_request.linearAdSlotWidth = (_j = this.slotObj.winningBid) === null || _j === void 0 ? void 0 : _j.data.w;
        ads_request.linearAdSlotHeight = (_l = (_k = this.slotObj.winningBid) === null || _k === void 0 ? void 0 : _k.data) === null || _l === void 0 ? void 0 : _l.h;
        ads_request.setAdWillPlayMuted(true);
        ads_request.setAdWillAutoPlay(true);
        // Pass the request to the ads_loader to request ads
        this.ads_loader.requestAds(ads_request);
    };
    // When ads manager is loaded
    VideoInstance.prototype.adsManagerLoaded = function (adsManagerLoadedEvent) {
        // Instantiate the AdsManager from the ads_loader response and pass it the video element
        this.ads_manager = adsManagerLoadedEvent.getAdsManager(this.video_player);
        this.ads_manager.setVolume(0);
        var ad_events = [
            globalThis.google.ima.AdEvent.Type.AD_CAN_PLAY,
            globalThis.google.ima.AdEvent.Type.LOADED,
            globalThis.google.ima.AdEvent.Type.STARTED,
            globalThis.google.ima.AdEvent.Type.PAUSED,
            globalThis.google.ima.AdEvent.Type.RESUMED,
            globalThis.google.ima.AdEvent.Type.IMPRESSION,
            globalThis.google.ima.AdEvent.Type.DURATION_CHANGE,
            globalThis.google.ima.AdEvent.Type.AD_PROGRESS,
            globalThis.google.ima.AdEvent.Type.FIRST_QUARTILE,
            globalThis.google.ima.AdEvent.Type.MIDPOINT,
            globalThis.google.ima.AdEvent.Type.THIRD_QUARTILE,
            globalThis.google.ima.AdEvent.Type.COMPLETE,
            globalThis.google.ima.AdEvent.Type.CLICK,
            globalThis.google.ima.AdEvent.Type.ALL_ADS_COMPLETED,
            globalThis.google.ima.AdEvent.Type.AD_METADATA,
        ];
        for (var event_1 in ad_events) {
            this.ads_manager.addEventListener(ad_events[event_1], this.initializeAdEvents.bind(this));
        }
        this.loadAds();
    };
    // Start loading ads
    VideoInstance.prototype.loadAds = function () {
        // this.video_player.load();
        // Initialize the container. Must be done via a user action on mobile devices.
        this.ad_display_container.initialize();
        // Calculate the width and height of the video player
        var width = '100%'; // this.slotObj.winningBid.data.w;
        var height = '100%'; // this.slotObj.winningBid.data.h;
        // Initialize the ads manager. Ad rules playlist will start at this time
        try {
            this.ads_manager.init(width, height, globalThis.google.ima.ViewMode.NORMAL);
        }
        catch (adError) {
            // Play the video without ads, if an error occurs
            this.adError("AdsManager could not be started");
        }
    };
    VideoInstance.prototype.playAds = function () {
        if (!this.initialized || !this.can_play)
            return;
        // If video is paused, play it and change the button to pause
        if (this.ad_paused == true) {
            if (this.ad_paused == true &&
                this.ads_manager) {
                if (this.muted) {
                    this.video_player.muted = true;
                }
                if (this.play_button) {
                    // Change the button to pause
                    this.play_button.innerHTML = this.pause_icon;
                }
                // this.video_player.play();
                this.video_player.muted = true;
                if (!this.ad_started) {
                    this.ads_manager.start();
                    this.ads_manager.setVolume(0);
                    this.ad_started = true;
                }
                else if (this.ad_paused) {
                    this.ads_manager.resume();
                }
                this.ad_paused = false;
            }
            // If video is playing, pause it and change the button to play
        }
        else if (this.ad_paused == false) {
            // this.video_player.pause();
            if (this.play_button) {
                // Change the button to play
                this.play_button.innerHTML = this.play_icon;
            }
            if (this.ads_manager) {
                this.ads_manager.pause();
                this.ad_paused = true;
            }
        }
    };
    VideoInstance.prototype.pauseAds = function () {
        if (this.ads_manager &&
            this.ad_started &&
            !this.ad_paused) {
            this.ads_manager.pause();
            this.ad_paused = true;
        }
    };
    // Ad has loaded
    VideoInstance.prototype.initializeAdEvents = function (ad_event) {
        // this.ad_paused = false;
        var video_ad = null;
        var video_title = null;
        var video_description = null;
        switch (ad_event.type) {
            case globalThis.google.ima.AdEvent.Type.AD_CAN_PLAY:
                console.log("VideoPlayer Event: " + ad_event.type);
                break;
            case globalThis.google.ima.AdEvent.Type.LOADED:
                (0, log_1.logInfo)("VideoPlayer Event: " + ad_event.type);
                this.ad_playing = ad_event.getAd();
                video_ad = ad_event.getAd();
                video_title = video_ad.getTitle();
                video_description = video_ad.getDescription();
                /*
                if(video_title) {
                    this.video_title.textContent = video_title;
                    this.video_title.style.display = 'block';
                }

                if(video_description) {
                    this.video_description.textContent = video_description;
                    this.video_description.style.display = '-webkit-box';
                }

                if(video_title || video_description) {
                    this.video_meta.style.display = 'block';
                }
                */
                try {
                    (0, log_1.logInfo)("VideoPlayer Title", video_title);
                    (0, log_1.logInfo)("VideoPlayer Description", video_description);
                    (0, log_1.logInfo)("VideoPlayer Advertiser", video_ad.getAdvertiserName());
                    (0, log_1.logInfo)("VideoPlayer API", video_ad.getApiFramework());
                }
                catch (e) {
                    (0, log_1.logInfo)("VideoPlayer Error", e);
                }
                // Add the control bar to the video player
                this.addControlBar();
                // Set initialized to true
                this.initialized = true;
                // Set can_play to true
                this.can_play = true;
                // Play the ads
                if (this.slotObj.viewability.inview) {
                    this.playAds();
                }
                break;
            case globalThis.google.ima.AdEvent.Type.STARTED:
                (0, log_1.logInfo)("VideoPlayer Event: " + ad_event.type);
                // remove collapsed class
                this.container.classList.remove('collapsed');
                // Set the winning bid to the displayed bid
                this.slotObj.displayedBid = this.slotObj.winningBid;
                // Set the winning bid to null
                this.slotObj.winningBid = null;
                // Send bid analytics
                this.slotObj.displayedBid.sendImpressionAnalytics();
                // Set volume to 0
                this.ads_manager.setVolume(0);
                // Set ad_playing to true
                this.ad_paused = false;
                break;
            case globalThis.google.ima.AdEvent.Type.PAUSED:
                (0, log_1.logInfo)("VideoPlayer Event: " + ad_event.type);
                this.ad_paused = true;
                break;
            case globalThis.google.ima.AdEvent.Type.RESUMED:
                (0, log_1.logInfo)("VideoPlayer Event: " + ad_event.type);
                this.ad_paused = false;
                break;
            case globalThis.google.ima.AdEvent.Type.IMPRESSION:
                (0, log_1.logInfo)("VideoPlayer Event: " + ad_event.type);
                break;
            case globalThis.google.ima.AdEvent.Type.AD_PROGRESS:
                this.progress_bar_time_update(ad_event.getAdData());
                break;
            case globalThis.google.ima.AdEvent.Type.FIRST_QUARTILE:
                (0, log_1.logInfo)("VideoPlayer Event: " + ad_event.type);
                break;
            case globalThis.google.ima.AdEvent.Type.MIDPOINT:
                (0, log_1.logInfo)("VideoPlayer Event: " + ad_event.type);
                break;
            case globalThis.google.ima.AdEvent.Type.THIRD_QUARTILE:
                (0, log_1.logInfo)("VideoPlayer Event: " + ad_event.type);
                break;
            case globalThis.google.ima.AdEvent.Type.COMPLETE:
                (0, log_1.logInfo)("VideoPlayer Event: " + ad_event.type);
                break;
            case globalThis.google.ima.AdEvent.Type.CLICK:
                (0, log_1.logInfo)("VideoPlayer Event: " + ad_event.type);
                break;
            case globalThis.google.ima.AdEvent.Type.ALL_ADS_COMPLETED:
                (0, log_1.logInfo)("VideoPlayer Event: " + ad_event.type);
                // Tell the SDK that the video is complete so the SDK can play any post-roll ads.
                this.ads_loader.contentComplete();
                // When all ads are done, destroy the ads manager
                this.destroyImaAdManagment();
                // reset video status
                this.resetVideoStatus();
                // Callback
                this.callback(true, false);
                break;
            case globalThis.google.ima.AdEvent.Type.AD_METADATA:
                (0, log_1.logInfo)("VideoPlayer Event" + globalThis.google.ima.AdEvent.Type.AD_METADATA + ": ", ad_event.getAdData());
                break;
        }
    };
    VideoInstance.prototype.isUrlOrVastTag = function (inputString) {
        // Regular expression for URL validation
        var urlRegex = /^(https?):\/\/[^\s/$.?#].[^\s]*$/i;
        // Regular expression for VAST tag validation
        var vastTagRegExp = /^</;
        if (urlRegex.test(inputString)) {
            return 'URL';
        }
        else if (vastTagRegExp.test(inputString)) {
            return 'VAST';
        }
        else {
            return false;
        }
    };
    // When an ad error occurs
    VideoInstance.prototype.adError = function (adErrorEvent) {
        var error_message = "";
        // Check if adErrorEvent is an instance of AdErrorEvent
        if (adErrorEvent instanceof Object && adErrorEvent.getError instanceof Function) {
            // Handle the ad error
            var errorObj = {
                message: adErrorEvent.getError().toString(),
                code: adErrorEvent.getError().getErrorCode(),
                type: adErrorEvent.type,
                vastErrorCode: adErrorEvent.getError().getVastErrorCode(),
                innerError: adErrorEvent.getError().getInnerError(),
            };
            error_message = JSON.stringify(errorObj);
            // Additional error handling logic goes here.
        }
        else if ((0, utils_1.isStr)(adErrorEvent)) {
            error_message = adErrorEvent;
        }
        // Create a new standard Error object
        var error = new Error(error_message);
        // Handle the error logging.
        (0, log_1.logError)(error);
        // Send error analytics
        Analytics_1.globalAnalytics.sendErrorAnalytics(error, 'VIDEO_AD_ERROR');
        if (this.slotObj.hasWinningBid()) {
            this.slotObj.winningBid = null;
        }
        if (this.slotObj.getWinningBid() &&
            this.slotObj.winningBid.demand_type === 'video') {
            this.ad_paused = true;
            this.ad_started = false;
            this.imaRequestAds();
        }
        else {
            // Remove video player from DOM
            this.deleteVideoPlayerFromDom((function () {
                this.callback(false, false);
            }).bind(this));
        }
    };
    // Delete video player from DOM
    VideoInstance.prototype.deleteVideoPlayerFromDom = function (cb) {
        // If the video player is not collapsed, wait for the transition to end before deleting it
        if (this.settings.collapse && !this.container.classList.contains('collapsed')) {
            // Add the collapsed class
            this.container.classList.add('collapsed');
            // Add event listener for transition end
            this.container.addEventListener('transitionend', (function () {
                // Remove the video player from the DOM
                this.deleteVideoPlayerFromDom(cb);
            }).bind(this), { once: true });
            return;
        }
        this.deleted = true;
        // Reset video status
        this.resetVideoStatus();
        // Destroy the IMA ad management
        this.destroyImaAdManagment();
        // Remove all event listeners
        this.remove_all_event_listeners();
        // Remove video wrapper from DOM
        this.video_wrapper.remove();
        // Remove the control bar from the video player
        this.container.classList.remove('bigcrunch-sticky-outstream-wrapper');
        this.container.classList.remove('bigcrunch-outstream-wrapper');
        // this.container.style.left = '';
        this.video_player.innerHTML = "";
        this.container.innerHTML = "";
        // Callback
        if (cb && typeof cb === 'function') {
            cb();
        }
    };
    VideoInstance.prototype.destroyImaAdManagment = function () {
        // Destroy ads_loader
        this.ads_loader.destroy();
        this.ads_loader = null;
        // Destroy ads_manager
        this.ads_manager.destroy();
        this.ads_manager = null;
        // Destroy ad_display_container
        this.ad_display_container.destroy();
        this.ad_display_container = null;
        // Set ad_playing to null
        this.ad_playing = null;
    };
    VideoInstance.prototype.resetVideoStatus = function () {
        this.ad_started = false;
        this.ad_paused = true;
        this.ad_finished = false;
        this.muted = true;
        this.deleted = false;
        this.can_play = false;
        this.initialized = false;
        this.time_stamp = null;
        this.ad_bar_interval = null;
    };
    // Load a script (used for loading the dash library)
    VideoInstance.prototype.loadScript = function (src) {
        return new Promise(function (resolve, reject) {
            var script = document.createElement('script');
            script.async = true;
            script.src = src;
            script.onload = resolve;
            script.onerror = reject;
            document.body.appendChild(script);
        });
    };
    // Attach Control Bar to video player
    VideoInstance.prototype.addControlBar = function () {
        // If this specific control bar exists already, don't add it again
        if (this.control_bar)
            return;
        // This needs to be done in vanilla JS because it bugs out if you attach it as HTML
        // Create control_bar container
        var control_bar = document.createElement("div");
        control_bar.setAttribute("id", "control_bar");
        this.control_bar = control_bar;
        // Create bottom-controls container
        var bottom_controls = document.createElement("div");
        bottom_controls.setAttribute("class", "bottom-controls");
        // Add bottom-controls to control_bar container
        this.control_bar.appendChild(bottom_controls);
        // Create left-group container
        var left_group = document.createElement("div");
        left_group.setAttribute("class", "left-group");
        // Add left-group to bottom-controls container
        bottom_controls.appendChild(left_group);
        // Only include play/pause for testing
        if (__1.globalSettings.test.enabled) {
            // Create play button
            var play_button = document.createElement("button");
            play_button.setAttribute("aria-label", "play button");
            play_button.setAttribute("id", "play_button");
            play_button.setAttribute("type", "button");
            this.play_button = play_button;
            // Add play button to left-group container
            left_group.appendChild(this.play_button);
            // Add svg to play button
            this.play_button.innerHTML = this.play_icon;
        }
        // Create time span (container for time progress start and finish)
        var time = document.createElement("span");
        time.setAttribute("id", "time");
        // Add time to left-group container
        left_group.appendChild(time);
        /*
        // Create time progress start span
        const time_progress_start = document.createElement("span");
            time_progress_start.setAttribute("id", "time_progress_start");
            time_progress_start.textContent = "00:00";
        this.time_progress_start = time_progress_start;
        // Add time progress start to time span
        time.appendChild(this.time_progress_start);
        */
        // Create time progress finish span
        /*
        const time_progress_finish = document.createElement("span");
            time_progress_finish.setAttribute("id", "time_progress_finish");
            time_progress_finish.textContent = "00:00";
        this.time_progress_finish = time_progress_finish;
        // Add time progress finish to time span
        time.appendChild(time_progress_finish);
        */
        // Create time progress finish top span
        var time_progress_finish_top = document.createElement("span");
        time_progress_finish_top.setAttribute("id", "time_progress_finish_top");
        time_progress_finish_top.textContent = "00:00";
        this.time_progress_finish_top = time_progress_finish_top;
        // Add time progress finish to time span
        this.video_wrapper.appendChild(time_progress_finish_top);
        // Create volume group container
        var volume_group = document.createElement("span");
        volume_group.setAttribute("id", "volume-group");
        // Create Mute button
        var mute_button = document.createElement("button");
        mute_button.setAttribute("id", "mute_button");
        mute_button.setAttribute("aria-label", "mute button");
        mute_button.setAttribute("type", "button");
        this.mute_button = mute_button;
        // Add mute button to volume group container
        volume_group.appendChild(this.mute_button);
        // Add svg to play button
        if (this.muted)
            this.mute_button.innerHTML = this.volume_mute_icon;
        else
            this.mute_button.innerHTML = this.volume_up_icon;
        // Create label for volume bar
        var label = document.createElement("label");
        label.setAttribute("for", "volume_bar");
        label.classList.add("sr-only");
        label.textContent = "Volume Bar";
        // Add label to volume group container
        volume_group.appendChild(label);
        // Create input (actual slider) for volume bar
        var volume_bar = document.createElement("input");
        volume_bar.setAttribute("id", "volume_bar");
        volume_bar.setAttribute("name", "volume_bar");
        volume_bar.setAttribute("type", "range");
        volume_bar.setAttribute("min", "0");
        volume_bar.setAttribute("max", "1");
        volume_bar.setAttribute("step", "0.1");
        this.volume_bar = volume_bar;
        if (this.muted)
            this.volume_bar.setAttribute("value", "0");
        else
            this.volume_bar.setAttribute("value", "1");
        // Add input to volume group container
        volume_group.appendChild(this.volume_bar);
        var close_button = document.createElement("span");
        close_button.setAttribute("class", "close-btn-group");
        close_button.innerHTML = this.close_icon;
        this.close_button = close_button;
        // Add left-group to bottom-controls container
        this.video_wrapper.appendChild(close_button);
        // Add the control bar and volume group to the container div
        this.video_wrapper.appendChild(control_bar);
        this.video_wrapper.appendChild(volume_group);
        this.setup_control_bar_events();
    };
    // Setup events to make control bar work
    VideoInstance.prototype.setup_control_bar_events = function () {
        // Mute button logic
        if (this.mute_button)
            this.mute_button.addEventListener('click', this.mute_button_functionality.bind(this));
        // Volume bar changing
        if (this.volume_bar)
            this.volume_bar.addEventListener('change', this.volume_bar_change_functionality.bind(this));
        // Play/Pause button logic
        if (this.play_button)
            this.play_button.addEventListener('click', this.play_pause_button_functionality.bind(this));
        // Close button logic
        if (this.close_button)
            this.close_button.addEventListener('click', this.close_button_functionality.bind(this));
    };
    // Remove all event listeners
    VideoInstance.prototype.remove_all_event_listeners = function () {
        // Remove mute button event
        if (this.mute_button)
            this.mute_button.removeEventListener('click', this.mute_button_functionality.bind(this));
        // Remove volume bar changing event
        if (this.volume_bar)
            this.volume_bar.removeEventListener('change', this.volume_bar_change_functionality.bind(this));
        // Remove play/pause button event
        if (this.play_button)
            this.play_button.removeEventListener('click', this.play_pause_button_functionality.bind(this));
        // Remove Close button logic
        if (this.close_button)
            this.close_button.addEventListener('click', this.close_button_functionality.bind(this));
    };
    // Play/Pause button functionality
    VideoInstance.prototype.play_pause_button_functionality = function () {
        // If video is paused, play it and change the button to pause
        if (this.ad_paused == true) {
            this.can_play = true;
            this.playAds();
            // If video is playing, pause it and change the button to play
        }
        else if (this.ad_paused == false) {
            this.can_play = false;
            // this.video_player.pause();
            // Change the button to play
            if (this.play_button) {
                this.play_button.innerHTML = this.play_icon;
            }
            if (this.ads_manager) {
                this.ads_manager.pause();
                this.ad_paused = true;
            }
        }
    };
    // Volume bar changing functionality
    VideoInstance.prototype.volume_bar_change_functionality = function () {
        // Set the volume of the video to the volume bar value
        this.video_player.volume = Number(this.volume_bar.value);
        this.ads_manager.setVolume(Number(this.volume_bar.value));
        // If volume is greater than 0, unmute the video
        if (Number(this.volume_bar.value) > 0) {
            this.muted = false;
            this.video_player.muted = false;
            this.mute_button.innerHTML = this.volume_up_icon;
            // If volume is 0, mute the video
        }
        else {
            this.mute_button.innerHTML = this.volume_mute_icon;
            this.muted = true;
            this.video_player.muted = true;
        }
    };
    // Mute button functionality
    VideoInstance.prototype.mute_button_functionality = function () {
        if (this.video_player.muted == true || this.muted == true) {
            this.muted = false;
            this.video_player.muted = false;
            this.mute_button.innerHTML = this.volume_up_icon;
            this.volume_bar.value = this.video_player.volume.toString();
            this.ads_manager.setVolume(Number(this.volume_bar.value));
            // Muting
        }
        else {
            this.muted = true;
            this.video_player.muted = true;
            this.mute_button.innerHTML = this.volume_mute_icon;
            this.volume_bar.value = '0';
            this.ads_manager.setVolume(0);
        }
    };
    // Close button functionality
    VideoInstance.prototype.close_button_functionality = function () {
        // Remove video player from DOM
        this.deleteVideoPlayerFromDom((function () {
            this.callback(true, true);
        }).bind(this));
    };
    // Update progress bar as time moves forward
    VideoInstance.prototype.progress_bar_time_update = function (adData) {
        var _a, _b, _c, _d, _e;
        // If the video is deleted, don't update the progress bar
        if (this.deleted)
            return;
        // Update progress bar
        if (this.ads_manager) {
            var duration = adData.adBreakDuration || adData.duration || this.ad_playing.getDuration();
            var time_left = this.ads_manager.getRemainingTime();
            var time_stamp = duration - time_left;
            time_stamp = time_stamp > 0 ? ((time_stamp <= duration) ? time_stamp : duration) : 0;
            // round time_stamp to nearest 0.01
            time_stamp = Math.round(time_stamp * 100) / 100;
            this.time_stamp = time_stamp;
            // If video played more then 2 seconds
            if (this.time_stamp > 2 && !((_c = (_b = (_a = this.slotObj) === null || _a === void 0 ? void 0 : _a.displayedBid) === null || _b === void 0 ? void 0 : _b.viewability) === null || _c === void 0 ? void 0 : _c.pixel_sent)) {
                //dispaly close button
                this.close_button.style.display = 'flex';
                // Send viewability analytics
                (_e = (_d = this.slotObj) === null || _d === void 0 ? void 0 : _d.displayedBid) === null || _e === void 0 ? void 0 : _e.setVideoViewabilityMet();
            }
            /*
            const duration = this.ad_playing.getDuration();
            let time_stamp = duration - time_left;
            time_stamp = time_stamp > 0 ? ((time_stamp <= duration) ? time_stamp : duration) : 0;
            // round time_stamp to nearest 0.01
            time_stamp = Math.round(time_stamp * 100) / 100;
            // Update progress bar
            this.time_progress_start.innerHTML = this.convert_video_time(Math.floor(time_stamp));
            this.time_progress_finish.innerHTML = this.convert_video_time(Math.ceil(time_left));
            */
            this.time_progress_finish_top.innerHTML = this.convert_video_time(Math.floor(time_left));
        }
        return;
    };
    // Changes display of video time to MM:SS
    VideoInstance.prototype.convert_video_time = function (time) {
        var return_time, hours, minutes, seconds;
        seconds = time;
        minutes = Math.floor(time / 60);
        seconds -= (minutes * 60);
        if (minutes > 60) {
            hours = Math.floor(minutes / 60);
            minutes -= (hours * 60);
        }
        if (minutes < 10)
            minutes = "0" + minutes;
        if (seconds < 10)
            seconds = "0" + seconds;
        return_time = seconds;
        if (minutes > 0)
            return_time = minutes + ":" + seconds;
        if (hours && hours > 0)
            return_time = hours + ":" + time;
        return return_time;
    };
    return VideoInstance;
}());
exports.VideoInstance = VideoInstance;


/***/ }),

/***/ "./src/classes/ViewabilityTracker.ts":
/*!*******************************************!*\
  !*** ./src/classes/ViewabilityTracker.ts ***!
  \*******************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.viewabilityTracker = exports.ViewabilityTracker = void 0;
var Page_1 = __webpack_require__(/*! ./Page */ "./src/classes/Page.ts");
var ViewabilityTracker = /** @class */ (function () {
    function ViewabilityTracker(monitorTabStatus, options) {
        var _this = this;
        if (monitorTabStatus === void 0) { monitorTabStatus = true; }
        if (options === void 0) { options = { root: null, threshold: 0.5 }; }
        this.callbacks = new Map();
        this.handleIntersection = function (entries) {
            entries.forEach(function (entry) {
                var callback = _this.callbacks.get(entry.target);
                if (callback) {
                    callback(entry);
                }
            });
        };
        // Monitor tab active state
        if (monitorTabStatus)
            this.monitorTabVisabilityState();
        // Create observer
        this.observer = new IntersectionObserver(this.handleIntersection, options);
    }
    ViewabilityTracker.prototype.trackElement = function (element, callback) {
        this.callbacks.set(element, callback);
        this.observer.observe(element);
    };
    ViewabilityTracker.prototype.untrackElement = function (element) {
        if (this.callbacks.get(element)) {
            this.callbacks.delete(element);
            this.observer.unobserve(element);
        }
    };
    ViewabilityTracker.prototype.monitorTabVisabilityState = function () {
        // Monitor tab active state
        document.addEventListener("visibilitychange", function () {
            Page_1.globalPage.handleTabVisabilityStateChange(document.visibilityState === "visible");
        });
    };
    return ViewabilityTracker;
}());
exports.ViewabilityTracker = ViewabilityTracker;
exports.viewabilityTracker = new ViewabilityTracker(true);


/***/ }),

/***/ "./src/classes/consent/ConsentHandler.ts":
/*!***********************************************!*\
  !*** ./src/classes/consent/ConsentHandler.ts ***!
  \***********************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";

var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (g && (g = 0, op[0] && (_ = 0)), _) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
var __spreadArray = (this && this.__spreadArray) || function (to, from, pack) {
    if (pack || arguments.length === 2) for (var i = 0, l = from.length, ar; i < l; i++) {
        if (ar || !(i in from)) {
            if (!ar) ar = Array.prototype.slice.call(from, 0, i);
            ar[i] = from[i];
        }
    }
    return to.concat(ar || Array.prototype.slice.call(from));
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
var _a;
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.coppaDataHandler = exports.gppConsentHandler = exports.gdprConsentHandler = exports.uspConsentHandler = exports.allConsentHandler = exports.US_REGIONS = void 0;
var log_1 = __webpack_require__(/*! ../../utils/log */ "./src/utils/log.ts");
var utils_1 = __webpack_require__(/*! ../../utils/utils */ "./src/utils/utils.ts");
var moduleTypes_1 = __webpack_require__(/*! ../../modules/consent/moduleTypes */ "./src/modules/consent/moduleTypes.ts");
var UspConsentHandler_1 = __webpack_require__(/*! ./UspConsentHandler */ "./src/classes/consent/UspConsentHandler.ts");
var GdprConsentHandler_1 = __webpack_require__(/*! ./GdprConsentHandler */ "./src/classes/consent/GdprConsentHandler.ts");
var GppConsentHandler_1 = __webpack_require__(/*! ./GppConsentHandler */ "./src/classes/consent/GppConsentHandler.ts");
var index_1 = __webpack_require__(/*! ../../index */ "./src/index.ts");
var Storage_1 = __importDefault(__webpack_require__(/*! ../Storage */ "./src/classes/Storage.ts"));
var envVars_1 = __webpack_require__(/*! ../../envVars */ "./src/envVars.ts");
var COUNTRY_CODE_COOKIE_NAME = '__bc_consent_country_code';
var REGION_CODE_COOKIE_NAME = '__bc_consent_region_code';
var CONSENT_LOCATION_STORAGE_OPTIONS = {
    'maxAge': 60 * 30,
    'expires': '',
    'path': '/',
    'domain': '.' + (0, utils_1.getDomain)() || (0),
    'sameSite': 'None',
    'secure': 1 // cookie will only be sent over SSL
};
var CONSENT_LOCATION_STORAGE_OBJ = { 'componentType': moduleTypes_1.MODULE_TYPE_CORE };
exports.US_REGIONS = ['CA', 'CO', 'CT', 'UT', 'VA'];
var AllConsentHandler = /** @class */ (function () {
    function AllConsentHandler() {
        this._ready = false;
        this._timeout = null;
        this._timeoutHandler = null;
        this._should_cancel_auction = true;
        this._cmpRequested = false;
        this._cmpLoaded = false;
        this.cmd = [];
        this.country_code = '';
        this.region_code = '';
        this.googlefc_fallback = false;
        this.getConsentCountryCode();
        this.getConsentRegionCode();
        // load cmp script if US and in US region
        this.loadCmpScript();
        this.allHandlers = {
            gdpr: new GdprConsentHandler_1.GdprConsentHandler(),
            usp: new UspConsentHandler_1.UspConsentHandler(),
            gpp: new GppConsentHandler_1.GppConsentHandler()
        };
    }
    AllConsentHandler.prototype.initAllHandlers = function () {
        var _this = this;
        this._timeout = 5500;
        for (var handler in this.allHandlers) {
            this.allHandlers[handler].init();
        }
        this._timeoutHandler = setTimeout(function () {
            (0, log_1.logInfo)("All Consent Handlers Timed Out GPP, GDPR, USPC");
            _this.continueExecution();
        }, this._timeout);
    };
    AllConsentHandler.prototype.setHandlerReady = function () {
        if (this.checkAllHandlersReady()) {
            (0, log_1.logInfo)("All Handlers Ready");
            this.continueExecution();
        }
    };
    AllConsentHandler.prototype.checkAllHandlersReady = function () {
        var ready = true;
        // loop though this.allHandlers
        for (var handler in this.allHandlers) {
            // check if handler is ready
            if (!this.allHandlers[handler].done) {
                return ready = false;
            }
        }
        return ready;
    };
    AllConsentHandler.prototype.checkIfMissingConsent = function () {
        var missing = false;
        // loop though this.allHandlers
        for (var handler in this.allHandlers) {
            // check if handler is ready
            if (this.allHandlers[handler].missing_consent) {
                return missing = true;
            }
        }
        return missing;
    };
    AllConsentHandler.prototype.continueExecution = function () {
        if (this._timeoutHandler !== null) {
            clearTimeout(this._timeoutHandler);
            this._timeoutHandler = null;
        }
        if (!this._ready) {
            // Check if missing consent
            this._should_cancel_auction = this.checkIfMissingConsent();
            // Set ready flag
            this._ready = true;
            // Execute all commands in the queue
            this.cmd.forEach(function (fn) {
                try {
                    fn();
                }
                catch (e) {
                    (0, log_1.logWarn)("AllConsentHandler Error", e);
                }
            });
            // Replace the queue with a function that executes commands immediately
            this.cmd.push = function (fn) {
                fn();
                return 1;
            };
        }
    };
    AllConsentHandler.prototype.checkIfMissing = function () {
        var missing = false;
        if (this._should_cancel_auction) {
            for (var handler in this.allHandlers) {
                if (this.allHandlers[handler].checkIfMissing()) {
                    return missing = true;
                }
            }
        }
        return missing;
    };
    AllConsentHandler.prototype.loadIfMissing = function (cb) {
        var cancel_auction = false;
        for (var handler in this.allHandlers) {
            if (this.allHandlers[handler].missing_consent) {
                this.allHandlers[handler].loadIfMissing(function (shouldCancelAuction, errMsg) {
                    var extraArgs = [];
                    for (var _i = 2; _i < arguments.length; _i++) {
                        extraArgs[_i - 2] = arguments[_i];
                    }
                    if (shouldCancelAuction) {
                        cancel_auction = true;
                        log_1.logInfo.apply(void 0, __spreadArray(["Canceling Auction", errMsg], extraArgs, false));
                        return;
                    }
                });
            }
        }
        if (!cancel_auction) {
            cb();
        }
        return true;
    };
    AllConsentHandler.prototype.isActivityAllowed = function (activity, params) {
        var isAllowed = this.allHandlers.gpp.isActivityAllowed(activity) && this.allHandlers.gdpr.isActivityAllowed(activity, params);
        if (!isAllowed) {
            (0, log_1.logWarn)("Activity Not Allowed", activity, params);
        }
        return isAllowed;
    };
    AllConsentHandler.prototype.loadCmpStub = function () {
        var _a;
        return __awaiter(this, void 0, void 0, function () {
            var cmpstub;
            return __generator(this, function (_b) {
                switch (_b.label) {
                    case 0:
                        if (!((typeof globalThis.__gpp === 'undefined' &&
                            ((_a = index_1.globalSettings === null || index_1.globalSettings === void 0 ? void 0 : index_1.globalSettings.cmp[this.country_code]) === null || _a === void 0 ? void 0 : _a.enabled)) &&
                            this.country_code === 'US')) return [3 /*break*/, 2];
                        return [4 /*yield*/, Promise.resolve().then(function () { return __importStar(__webpack_require__(/*! @iabgpp/stub */ "./node_modules/@iabgpp/stub/lib/stub.js")); })];
                    case 1:
                        cmpstub = _b.sent();
                        // Use cmpstub here
                        cmpstub;
                        _b.label = 2;
                    case 2: return [2 /*return*/];
                }
            });
        });
    };
    AllConsentHandler.prototype.loadCmpScript = function () {
        var _a;
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_b) {
                this.googlefc_fallback = !!((typeof globalThis.__gpp === 'undefined' &&
                    ((_a = index_1.globalSettings === null || index_1.globalSettings === void 0 ? void 0 : index_1.globalSettings.cmp[this.country_code]) === null || _a === void 0 ? void 0 : _a.enabled)) &&
                    this.country_code === 'US');
                // this.googlefc_fallback = true;
                // load cmp stub
                this.loadCmpStub();
                if (!this._cmpRequested &&
                    this.googlefc_fallback) {
                    this.loadBigcrunchCmp();
                }
                return [2 /*return*/];
            });
        });
    };
    AllConsentHandler.prototype.loadBigcrunchCmp = function () {
        var _this = this;
        this._cmpRequested = true;
        (0, log_1.logInfo)("Loading CMP Script");
        // load cmp script
        var script = document.createElement('script');
        script.src = "https://".concat(envVars_1.endpoint_prefix, "cmp.bigcrunch.com/main.js");
        script.async = true;
        document.head.appendChild(script);
        script.onload = (function () {
            (0, log_1.logInfo)("CMP Script Loaded");
            _this._cmpLoaded = true;
        }).bind(this);
        script.onerror = function () {
            _this._cmpRequested = false;
            (0, log_1.logInfo)("CMP Script Failed to Load");
        };
    };
    AllConsentHandler.prototype.googleFcPresent = function () {
        return !!(globalThis.window.frames['googlefcPresent']);
    };
    AllConsentHandler.prototype.loadGoogleFc = function () {
        // Add the fundingchoices script to the head
        var script = document.createElement('script');
        script.src = "https://fundingchoicesmessages.google.com/i/pub-6608306193529351?ers=1";
        script.async = true;
        script.nonce = "_5M_cqEIPFU_o2FMNm9lHg";
        // Add second script to the head
        var script2 = document.createElement('script');
        script2.nonce = "_5M_cqEIPFU_o2FMNm9lHg";
        script2.innerHTML = "(function() {function signalGooglefcPresent() {if (!window.frames['googlefcPresent']) {if (document.body) {const iframe = document.createElement('iframe'); iframe.style = 'width: 0; height: 0; border: none; z-index: -1000; left: -1000px; top: -1000px;'; iframe.style.display = 'none'; iframe.name = 'googlefcPresent'; document.body.appendChild(iframe);} else {setTimeout(signalGooglefcPresent, 0);}}}signalGooglefcPresent();})();";
        // Add both scripts to head
        document.head.appendChild(script);
        document.head.appendChild(script2);
    };
    AllConsentHandler.prototype.saveConsentCountryCode = function (countryCode) {
        this.country_code = countryCode;
        this.loadCmpScript();
        return Storage_1.default.setItemInStorage(COUNTRY_CODE_COOKIE_NAME, countryCode, CONSENT_LOCATION_STORAGE_OBJ, CONSENT_LOCATION_STORAGE_OPTIONS);
    };
    AllConsentHandler.prototype.getConsentCountryCode = function () {
        this.country_code = Storage_1.default.getItemFromStorage(COUNTRY_CODE_COOKIE_NAME, CONSENT_LOCATION_STORAGE_OBJ);
        return this.country_code;
    };
    AllConsentHandler.prototype.saveConsentRegionCode = function (regionCode) {
        this.region_code = regionCode;
        this.loadCmpScript();
        return Storage_1.default.setItemInStorage(REGION_CODE_COOKIE_NAME, regionCode, CONSENT_LOCATION_STORAGE_OBJ, CONSENT_LOCATION_STORAGE_OPTIONS);
    };
    AllConsentHandler.prototype.getConsentRegionCode = function () {
        this.region_code = Storage_1.default.getItemFromStorage(REGION_CODE_COOKIE_NAME, CONSENT_LOCATION_STORAGE_OBJ);
        return this.region_code;
    };
    return AllConsentHandler;
}());
exports.allConsentHandler = new AllConsentHandler();
exports.uspConsentHandler = exports.allConsentHandler.allHandlers.usp;
exports.gdprConsentHandler = exports.allConsentHandler.allHandlers.gdpr;
exports.gppConsentHandler = exports.allConsentHandler.allHandlers.gpp;
exports.coppaDataHandler = (function () {
    function getCoppa() {
        return !!(index_1.globalSettings.coppa);
    }
    return {
        getCoppa: getCoppa,
        getConsentData: getCoppa,
        getConsentMeta: getCoppa,
    };
})();
exports.allConsentHandler.initAllHandlers();


/***/ }),

/***/ "./src/classes/consent/GdprConsentHandler.ts":
/*!***************************************************!*\
  !*** ./src/classes/consent/GdprConsentHandler.ts ***!
  \***************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.GdprConsentHandler = void 0;
var consentManagementGdpr_1 = __webpack_require__(/*! ../../modules/consent/consentManagementGdpr */ "./src/modules/consent/consentManagementGdpr.ts");
var gdprEnforcement_1 = __webpack_require__(/*! ../../modules/consent/gdprEnforcement */ "./src/modules/consent/gdprEnforcement.ts");
var log_1 = __webpack_require__(/*! ../../utils/log */ "./src/utils/log.ts");
var ConsentHandler_1 = __webpack_require__(/*! ./ConsentHandler */ "./src/classes/consent/ConsentHandler.ts");
var GdprConsentHandler = /** @class */ (function () {
    function GdprConsentHandler() {
        this.done = false;
        this.enabled = true;
        this.missing_consent = true;
    }
    GdprConsentHandler.prototype.init = function () {
        if (!ConsentHandler_1.allConsentHandler.country_code ||
            ConsentHandler_1.allConsentHandler.country_code === 'EU') {
            (0, consentManagementGdpr_1.setConsentConfig)({
                gdpr: {
                    timeout: 10000,
                    actionTimeout: 10000,
                    defaultGdprScope: true
                }
            });
        }
        else {
            this.setConsentData({
                apiVersion: 2,
                gdprApplies: false,
                consentString: ''
            });
        }
    };
    GdprConsentHandler.prototype.setConsentData = function (consentData) {
        (0, log_1.logInfo)("GdprConsentHandler: consentData", consentData);
        this.consentData = consentData;
        this.done = true;
        this.checkIfMissing();
        ConsentHandler_1.allConsentHandler.setHandlerReady();
    };
    GdprConsentHandler.prototype.getGdprApplies = function () {
        var _a;
        return ((_a = this.consentData) === null || _a === void 0 ? void 0 : _a.gdprApplies) || false;
    };
    GdprConsentHandler.prototype.getGdprString = function () {
        var _a;
        return ((_a = this.consentData) === null || _a === void 0 ? void 0 : _a.consentString) || '';
    };
    GdprConsentHandler.prototype.isActivityAllowed = function (activity, params) {
        if (!Object.prototype.hasOwnProperty.call(gdprEnforcement_1.ruleFunctions, activity))
            return true;
        return gdprEnforcement_1.ruleFunctions[activity](params);
    };
    GdprConsentHandler.prototype.checkIfMissing = function () {
        var _a, _b;
        return this.missing_consent = !!(!this.consentData || (((_a = this.consentData) === null || _a === void 0 ? void 0 : _a.gdprApplies) && !((_b = this.consentData) === null || _b === void 0 ? void 0 : _b.consentString)));
    };
    GdprConsentHandler.prototype.loadIfMissing = function (cb) {
        (0, consentManagementGdpr_1.loadIfMissing)(cb);
    };
    return GdprConsentHandler;
}());
exports.GdprConsentHandler = GdprConsentHandler;


/***/ }),

/***/ "./src/classes/consent/GppConsentHandler.ts":
/*!**************************************************!*\
  !*** ./src/classes/consent/GppConsentHandler.ts ***!
  \**************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.GppConsentHandler = void 0;
var log_1 = __webpack_require__(/*! ../../utils/log */ "./src/utils/log.ts");
var consentManagementGpp_1 = __webpack_require__(/*! ../../modules/consent/consentManagementGpp */ "./src/modules/consent/consentManagementGpp.ts");
var activityControls_1 = __webpack_require__(/*! ../../modules/consent/activityControls */ "./src/modules/consent/activityControls.ts");
var gppControl_usstates_1 = __webpack_require__(/*! ../../modules/consent/gppControl_usstates */ "./src/modules/consent/gppControl_usstates.ts");
var ConsentHandler_1 = __webpack_require__(/*! ./ConsentHandler */ "./src/classes/consent/ConsentHandler.ts");
var __1 = __webpack_require__(/*! ../.. */ "./src/index.ts");
var GppConsentHandler = /** @class */ (function () {
    function GppConsentHandler() {
        this.done = false;
        this.enabled = true;
        this.missing_consent = true;
    }
    GppConsentHandler.prototype.init = function () {
        if (!ConsentHandler_1.allConsentHandler.country_code ||
            // allConsentHandler.country_code === 'EU' || 
            // allConsentHandler.country_code === 'CA' ||
            (ConsentHandler_1.allConsentHandler.country_code === 'US' &&
                (!ConsentHandler_1.allConsentHandler.region_code ||
                    ConsentHandler_1.US_REGIONS.includes(ConsentHandler_1.allConsentHandler.region_code)))) {
            (0, consentManagementGpp_1.setConsentConfig)({
                gpp: {
                    timeout: 10000
                }
            });
        }
        else {
            this.setConsentData({
                gppString: '',
                applicableSections: [],
                parsedSections: {}
            });
        }
    };
    GppConsentHandler.prototype.setConsentData = function (consentData) {
        (0, log_1.logInfo)("GppConsentHandler setConsentData: consentData", consentData);
        this.consentData = consentData;
        this.done = true;
        this.checkIfMissing();
        ConsentHandler_1.allConsentHandler.setHandlerReady();
    };
    GppConsentHandler.prototype.isActivityAllowed = function (activity) {
        var _a, _b, _c, _d, _e;
        if (!Object.prototype.hasOwnProperty.call(activityControls_1.CONSENT_RULES, activity))
            return true;
        var consentData = this.consentData;
        var applicableSections = (consentData === null || consentData === void 0 ? void 0 : consentData.applicableSections) || [];
        var sid_mapping = ((((_a = globalThis === null || globalThis === void 0 ? void 0 : globalThis.BigcrunchCmpTag) === null || _a === void 0 ? void 0 : _a.loaded) ||
            ((_b = __1.globalSettings.cmp[ConsentHandler_1.allConsentHandler.country_code]) === null || _b === void 0 ? void 0 : _b.enabled)) &&
            ((_c = __1.globalSettings.cmp[ConsentHandler_1.allConsentHandler.country_code]) === null || _c === void 0 ? void 0 : _c.sid_mapping) || gppControl_usstates_1.DEFAULT_SID_MAPPING);
        // const sid_mapping = globalSettings?.cmp[allConsentHandler.country_code]?.enabled && globalSettings?.cmp[allConsentHandler.country_code]?.sid_mapping || DEFAULT_SID_MAPPING
        var isAllowed = true;
        for (var _i = 0, applicableSections_1 = applicableSections; _i < applicableSections_1.length; _i++) {
            var sid = applicableSections_1[_i];
            var apiConsentData = void 0;
            if (sid === 7) {
                var api = sid_mapping[sid];
                apiConsentData = (_d = consentData === null || consentData === void 0 ? void 0 : consentData.parsedSections) === null || _d === void 0 ? void 0 : _d[api];
            }
            else {
                var logger = (0, log_1.prefixLog)("Cannot set up MSPA controls for SID ".concat(sid, ":"));
                if (!Object.prototype.hasOwnProperty.call(gppControl_usstates_1.NORMALIZATIONS, sid)) {
                    logger.logError("no normalization rules are known for SID ".concat(sid));
                    return;
                }
                var api = sid_mapping[sid];
                if (typeof api !== 'string') {
                    logger.logError("cannot determine GPP section name");
                    return;
                }
                var normalizeConsent = gppControl_usstates_1.NORMALIZATIONS[sid];
                apiConsentData = normalizeConsent((0, activityControls_1.flatSection)((_e = consentData === null || consentData === void 0 ? void 0 : consentData.parsedSections) === null || _e === void 0 ? void 0 : _e[api]));
            }
            isAllowed = !activityControls_1.CONSENT_RULES[activity](apiConsentData);
            if (!isAllowed) {
                break;
            }
        }
        return isAllowed;
    };
    GppConsentHandler.prototype.getGppString = function () {
        var _a;
        return ((_a = this.consentData) === null || _a === void 0 ? void 0 : _a.gppString) || '';
    };
    GppConsentHandler.prototype.getApplicableSections = function () {
        var _a;
        return ((_a = this.consentData) === null || _a === void 0 ? void 0 : _a.applicableSections) || [];
    };
    GppConsentHandler.prototype.checkIfMissing = function () {
        var _a, _b;
        return this.missing_consent = !!(!this.consentData || (((_a = this.consentData) === null || _a === void 0 ? void 0 : _a.applicableSections.length) && !((_b = this.consentData) === null || _b === void 0 ? void 0 : _b.gppString)));
    };
    GppConsentHandler.prototype.loadIfMissing = function (cb) {
        (0, consentManagementGpp_1.loadIfMissing)(cb);
    };
    return GppConsentHandler;
}());
exports.GppConsentHandler = GppConsentHandler;


/***/ }),

/***/ "./src/classes/consent/UspConsentHandler.ts":
/*!**************************************************!*\
  !*** ./src/classes/consent/UspConsentHandler.ts ***!
  \**************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.UspConsentHandler = void 0;
var consentManagementUsp_1 = __webpack_require__(/*! ../../modules/consent/consentManagementUsp */ "./src/modules/consent/consentManagementUsp.ts");
var log_1 = __webpack_require__(/*! ../../utils/log */ "./src/utils/log.ts");
var ConsentHandler_1 = __webpack_require__(/*! ./ConsentHandler */ "./src/classes/consent/ConsentHandler.ts");
var UspConsentHandler = /** @class */ (function () {
    function UspConsentHandler() {
        this.done = false;
        this.enabled = true;
        this.missing_consent = true;
    }
    UspConsentHandler.prototype.init = function () {
        if (!ConsentHandler_1.allConsentHandler.country_code ||
            (ConsentHandler_1.allConsentHandler.country_code === 'US' &&
                (!ConsentHandler_1.allConsentHandler.region_code ||
                    ConsentHandler_1.allConsentHandler.region_code === 'CA'))) {
            (0, consentManagementUsp_1.setConsentConfig)({
                usp: {
                    timeout: 50
                }
            });
        }
        else {
            this.setConsentData({
                usPrivacy: '1---'
            });
        }
    };
    UspConsentHandler.prototype.setConsentData = function (consentData) {
        (0, log_1.logInfo)("UspcConsentHandler: consentData", consentData);
        this.consentData = consentData;
        this.done = true;
        this.checkIfMissing();
        ConsentHandler_1.allConsentHandler.setHandlerReady();
    };
    UspConsentHandler.prototype.getUsPrivacy = function () {
        var _a;
        return ((_a = this.consentData) === null || _a === void 0 ? void 0 : _a.usPrivacy) || '';
    };
    UspConsentHandler.prototype.checkIfMissing = function () {
        var _a;
        return this.missing_consent = !!(!this.consentData || ((_a = this.consentData) === null || _a === void 0 ? void 0 : _a.usPrivacy) === '');
    };
    UspConsentHandler.prototype.loadIfMissing = function (cb) {
        (0, consentManagementUsp_1.loadIfMissing)(cb);
    };
    return UspConsentHandler;
}());
exports.UspConsentHandler = UspConsentHandler;


/***/ }),

/***/ "./src/classes/identityAdapters/IdentityAdapeterHandler.ts":
/*!*****************************************************************!*\
  !*** ./src/classes/identityAdapters/IdentityAdapeterHandler.ts ***!
  \*****************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.globalIdentityAdapeterHandler = void 0;
var ConsentHandler_1 = __webpack_require__(/*! ../consent/ConsentHandler */ "./src/classes/consent/ConsentHandler.ts");
var activities_1 = __webpack_require__(/*! ../../modules/consent/activities */ "./src/modules/consent/activities.ts");
var IdentityAdapeterHandler = /** @class */ (function () {
    function IdentityAdapeterHandler() {
    }
    IdentityAdapeterHandler.prototype.getUserIdsAsEids = function () {
        var _a, _b;
        return (ConsentHandler_1.allConsentHandler.isActivityAllowed(activities_1.ACTIVITY_ENRICH_EIDS, { gvlid: {} })) ? ((_a = globalThis === null || globalThis === void 0 ? void 0 : globalThis.pbjs) === null || _a === void 0 ? void 0 : _a.getUserIdsAsEids) && ((_b = globalThis === null || globalThis === void 0 ? void 0 : globalThis.pbjs) === null || _b === void 0 ? void 0 : _b.getUserIdsAsEids()) : [];
    };
    IdentityAdapeterHandler.prototype.getUserIds = function () {
        var _a, _b;
        return (ConsentHandler_1.allConsentHandler.isActivityAllowed(activities_1.ACTIVITY_ENRICH_EIDS, { gvlid: {} })) ? ((_a = globalThis === null || globalThis === void 0 ? void 0 : globalThis.pbjs) === null || _a === void 0 ? void 0 : _a.getUserIdsAsEids) && ((_b = globalThis === null || globalThis === void 0 ? void 0 : globalThis.pbjs) === null || _b === void 0 ? void 0 : _b.getUserIdsAsEids()) : {};
    };
    return IdentityAdapeterHandler;
}());
exports.globalIdentityAdapeterHandler = new IdentityAdapeterHandler();


/***/ }),

/***/ "./src/defaultSettings.ts":
/*!********************************!*\
  !*** ./src/defaultSettings.ts ***!
  \********************************/
/***/ ((__unused_webpack_module, exports) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.defaultSettings = void 0;
exports.defaultSettings = {
    version: 0,
    site_id: "",
    property_id: "",
    analytics: {
        bigcrunch: true,
        prebid_analytics: false,
        bigcrunch_page_meta: true,
        url_path_groupings: [],
        page_meta_overrides: {}
    },
    gam_network_code: 0,
    gam_advertiser_ids: {},
    site_name: "",
    slots: {},
    floor: {
        default: 0,
        enabled: false
    },
    bidders: {},
    user_syncs: {},
    consent_country_code: "",
    consent_region_code: "",
    cmp: {},
    schain: {
        complete: 1,
        nodes: [],
        ver: "1.0"
    },
    coppa: false,
    test: {
        enabled: false,
        ids: false,
        ads: false,
        bidders: [],
    },
    prebid: {
        enabled: false,
        config: {
            debug: false,
            bidderTimeout: 2000,
            enableSendAllBids: false,
            useBidCache: false,
            deviceAccess: false,
            timeoutBuffer: 400,
            disableAjaxTimeout: false,
            maxNestedIframes: 10,
            priceGranularity: {},
            floors: {},
            mediaTypePriceGranularity: {},
            bidderSequence: "random",
            auctionOptions: {},
            userSync: {},
            targetingControls: {},
            consentManagement: {},
            enableTIDs: true,
            schain: {},
        },
        adUnitBidders: {}
    },
    amazon_aps: {
        enabled: true,
        pubID: "9a4e12c4-dac3-4120-848e-f397156425c3",
        adServer: "googletag",
        timeout: 1000
    },
    extra_js: {
        enabled: false
    },
    extra_css: {
        enabled: false
    }
};


/***/ }),

/***/ "./src/envVars.ts":
/*!************************!*\
  !*** ./src/envVars.ts ***!
  \************************/
/***/ ((__unused_webpack_module, exports) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.endpoint_prefix = void 0;
exports.endpoint_prefix = "dev-";


/***/ }),

/***/ "./src/index.ts":
/*!**********************!*\
  !*** ./src/index.ts ***!
  \**********************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";

var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (g && (g = 0, op[0] && (_ = 0)), _) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
var _a, _b, _c;
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.globalSettings = exports.VERSION = void 0;
var utils_1 = __webpack_require__(/*! ./utils/utils */ "./src/utils/utils.ts");
var defaultSettings_1 = __webpack_require__(/*! ./defaultSettings */ "./src/defaultSettings.ts");
var ConsentHandler_1 = __webpack_require__(/*! ./classes/consent/ConsentHandler */ "./src/classes/consent/ConsentHandler.ts");
__webpack_require__(/*! ./classes/User */ "./src/classes/User.ts");
__webpack_require__(/*! ./classes/Session */ "./src/classes/Session.ts");
var Page_1 = __webpack_require__(/*! ./classes/Page */ "./src/classes/Page.ts");
var Slot_1 = __importDefault(__webpack_require__(/*! ./classes/Slot */ "./src/classes/Slot.ts"));
var UserSync_1 = __webpack_require__(/*! ./classes/UserSync */ "./src/classes/UserSync.ts");
__webpack_require__(/*! ./styles/sass/main.sass */ "./src/styles/sass/main.sass");
var Session_1 = __webpack_require__(/*! ./classes/Session */ "./src/classes/Session.ts");
var Prebid_1 = __webpack_require__(/*! ./classes/Prebid */ "./src/classes/Prebid.ts");
var AnalyticsPrebid_1 = __webpack_require__(/*! ./classes/AnalyticsPrebid */ "./src/classes/AnalyticsPrebid.ts");
var AmazonAps_1 = __webpack_require__(/*! ./classes/AmazonAps */ "./src/classes/AmazonAps.ts");
var log_1 = __webpack_require__(/*! ./utils/log */ "./src/utils/log.ts");
var envVars_1 = __webpack_require__(/*! ./envVars */ "./src/envVars.ts");
var BCLighthouseTag = globalThis.BCLighthouseTag || {};
BCLighthouseTag.cmd = ((_a = globalThis === null || globalThis === void 0 ? void 0 : globalThis.BCLighthouseTag) === null || _a === void 0 ? void 0 : _a.cmd) || [];
globalThis.googletag = globalThis.googletag || {};
globalThis.googletag.cmd = ((_b = globalThis === null || globalThis === void 0 ? void 0 : globalThis.googletag) === null || _b === void 0 ? void 0 : _b.cmd) || [];
globalThis.pbjs = globalThis.pbjs || {};
globalThis.pbjs.que = ((_c = globalThis === null || globalThis === void 0 ? void 0 : globalThis.pbjs) === null || _c === void 0 ? void 0 : _c.que) || [];
exports.VERSION = '1.1.1';
getConfig();
function getConfig() {
    return __awaiter(this, void 0, void 0, function () {
        var property_id, consent_country_code;
        return __generator(this, function (_a) {
            property_id = getPropertyId();
            if (property_id) {
                // Get json file from server
                fetch("https://".concat(envVars_1.endpoint_prefix, "ship.bigcrunch.com/config/").concat(property_id, ".json"))
                    .then(function (response) {
                    consent_country_code = response.headers.get('Bc-Country-Code') || '';
                    (0, log_1.logInfo)('Country Code:', consent_country_code);
                    return response.json();
                })
                    .then(function (data) {
                    try {
                        // Set options
                        exports.globalSettings = (0, utils_1.deepMerge)(defaultSettings_1.defaultSettings, data);
                        if (consent_country_code) {
                            // set consent country code
                            exports.globalSettings.consent_country_code = consent_country_code;
                            // store consent country code in cookie
                            ConsentHandler_1.allConsentHandler.saveConsentCountryCode(consent_country_code);
                            // fire event for consent country code
                            var event_1 = new CustomEvent('BcConsentCountryCode', { detail: consent_country_code });
                            document.dispatchEvent(event_1);
                        }
                        // Execute all commands in the queue
                        BCLighthouseTag.cmd.forEach(function (fn) {
                            try {
                                fn.call();
                            }
                            catch (e) {
                                console.error("BCLighthouseTag Error", e);
                            }
                        });
                        BCLighthouseTag.cmd = [];
                        // Replace the queue with a function that executes commands immediately
                        BCLighthouseTag.cmd.push = function (fn) {
                            try {
                                fn.call();
                            }
                            catch (e) {
                                console.error("BCLighthouseTag Error", e);
                            }
                        };
                        // If prebid is enabled
                        if (exports.globalSettings.prebid.enabled) {
                            // import('./classes/Prebid').then(({ Prebid }) => {
                            new Prebid_1.Prebid(property_id);
                            // })
                        }
                        if (exports.globalSettings.amazon_aps.enabled) {
                            new AmazonAps_1.AmazonAps(exports.globalSettings.amazon_aps.pubID);
                        }
                        init();
                    }
                    catch (error) {
                        console.error('Error:', error);
                    }
                })
                    .catch(function (error) {
                    console.error('Error:', error);
                });
            }
            return [2 /*return*/];
        });
    });
}
function getPropertyId() {
    // Get the property id from the script tag with id 'bigcrunchtag'
    var script = document.getElementById('bigcrunchtag');
    if (script) {
        var property_id = script.getAttribute('data-property-id');
        if (property_id) {
            return property_id;
        }
        else {
            var url = new URL(script.src);
            var property_id_1 = url.searchParams.get('property_id');
            if (property_id_1) {
                return property_id_1;
            }
        }
    }
    return;
}
function loadExtraJsScript(property_id) {
    var url = "https://".concat(envVars_1.endpoint_prefix, "ship.bigcrunch.com/extra_js/").concat(property_id, ".js");
    var script = document.createElement('script');
    script.src = url;
    document.head.appendChild(script);
}
function loadExtraCssStyle(property_id) {
    var url = "https://".concat(envVars_1.endpoint_prefix, "ship.bigcrunch.com/extra_css/").concat(property_id, ".css");
    var link = document.createElement('link');
    link.rel = 'stylesheet';
    link.type = 'text/css';
    link.href = url;
    document.head.appendChild(link);
}
function init() {
    var _a, _b;
    // Load extra js script
    if (exports.globalSettings.extra_js.enabled) {
        loadExtraJsScript(exports.globalSettings.property_id);
    }
    // Load extra js script
    if (exports.globalSettings.extra_css.enabled) {
        loadExtraCssStyle(exports.globalSettings.property_id);
    }
    // Check if should track prebid analytics
    if (((_a = exports.globalSettings === null || exports.globalSettings === void 0 ? void 0 : exports.globalSettings.prebid) === null || _a === void 0 ? void 0 : _a.enabled) ||
        ((_b = exports.globalSettings === null || exports.globalSettings === void 0 ? void 0 : exports.globalSettings.analytics) === null || _b === void 0 ? void 0 : _b.prebid_analytics)) {
        // Init Prebid Analytics
        new AnalyticsPrebid_1.AnalyticsPrebid();
    }
    // Init Session 
    Session_1.globalSession.getSessionId();
    // Init Page
    Page_1.globalPage.init();
    // Queue commands for execution when consent is ready
    ConsentHandler_1.allConsentHandler.cmd.push(function () {
        // Sync users
        UserSync_1.globalUserSync.syncUsers(exports.globalSettings.user_syncs, exports.globalSettings.bidders);
        // TODO: Run Indentity Adapters
    });
    // check test config
    checkTestConfig();
    // Build slots
    var slots = exports.globalSettings.slots || {};
    // check if slots exist
    if (Object.keys(slots).length) {
        if (document.readyState === 'complete' || document.readyState === 'interactive') {
            Page_1.globalPage.buildSlots(slots);
        }
        else if (document.readyState === 'loading') {
            document.addEventListener('DOMContentLoaded', function () {
                Page_1.globalPage.buildSlots(slots);
            });
        }
        setInterval(function () {
            Page_1.globalPage.buildSlots(slots);
        }, 1000);
    }
}
/**
 * @description Check test config
 */
function checkTestConfig() {
    // check url search params
    var urlParams = new URLSearchParams(window.location.search);
    // check if test ids are enabled
    if (urlParams.get('bc_test_ids') === 'true') {
        // set test ids
        exports.globalSettings.test.ids = true;
        // set test enabled
        exports.globalSettings.test.enabled = true;
    }
    // check if test ads are enabled
    if (urlParams.get('bc_test_ads') === 'true') {
        // set test ads
        exports.globalSettings.test.ads = true;
        // set test enabled
        exports.globalSettings.test.enabled = true;
    }
    // check if test bidders are enabled
    if (urlParams.get('bc_test_bidders')) {
        // set test bidders
        exports.globalSettings.test.bidders = urlParams.get('bc_test_bidders').split(',');
        // set test enabled
        exports.globalSettings.test.enabled = true;
    }
    // check if test ads are enabled
    if (urlParams.get('bc_test_log') === 'true') {
        // set test ads
        exports.globalSettings.test.log = true;
        // set test enabled
        exports.globalSettings.test.enabled = true;
    }
}
/**
 *
 * @param {TestConfig} testConfig
 * @description Set test config
 * @example
 * BCLighthouseTag.setTestConfig({
 *   ids: true,
 *   ads: true,
 *   bidders: ['freewheel']
 * });
 */
function setTestConfig(testConfig) {
    if (testConfig) {
        if (testConfig.ids) {
            // set test ids
            exports.globalSettings.test.ids = true;
        }
        if (testConfig.ads) {
            // set test ads
            exports.globalSettings.test.ads = true;
        }
        if (testConfig.bidders) {
            // set test bidders
            exports.globalSettings.test.bidders = testConfig.bidders;
        }
        // set test enabled
        exports.globalSettings.test.enabled = true;
    }
}
/**
 * @description Get CMP Location
 * @returns string
 * @example
 * BCLighthouseTag.getLocation();
 */
function getCmpLocation() {
    return {
        "country": ConsentHandler_1.allConsentHandler.country_code,
        "region": ConsentHandler_1.allConsentHandler.region_code,
    };
}
function forceSlotRefresh(slots) {
    // loop through slots
    for (var _i = 0, slots_1 = slots; _i < slots_1.length; _i++) {
        var slot_id = slots_1[_i];
        slot_id = slot_id.replace('bigcrunch-unit-', '');
        // Get slot
        var slot = Page_1.globalPage.slots[slot_id];
        // Check if slot exists
        if (slot instanceof Slot_1.default) {
            // Refresh slot
            slot.refreshSlot(true);
        }
    }
}
function setTargeting(key, value) {
    try {
        globalThis.googletag.cmd.push(function () {
            globalThis.googletag.pubads().setTargeting(key, value.toString());
        });
    }
    catch (error) {
        console.error('Error:', error);
    }
}
// Expose functions to global scope
globalThis.BCLighthouseTag = Object.assign(BCLighthouseTag, {
    forceSlotRefresh: forceSlotRefresh,
    forceRefresh: forceSlotRefresh,
    setTestConfig: setTestConfig,
    setTargeting: setTargeting,
    getLocation: getCmpLocation,
    // getCmpConfig: getCmpConfig   
});


/***/ }),

/***/ "./src/modules/consent/activities.ts":
/*!*******************************************!*\
  !*** ./src/modules/consent/activities.ts ***!
  \*******************************************/
/***/ ((__unused_webpack_module, exports) => {

"use strict";

/**
 * Activity (that are relevant for privacy) definitions
 *
 * ref. https://docs.google.com/document/d/1dRxFUFmhh2jGanzGZvfkK_6jtHPpHXWD7Qsi6KEugeE
 * & https://github.com/prebid/Prebid.js/issues/9546
 */
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.ACTIVITY_TRANSMIT_TID = exports.ACTIVITY_TRANSMIT_PRECISE_GEO = exports.ACTIVITY_TRANSMIT_UFPD = exports.ACTIVITY_TRANSMIT_EIDS = exports.ACTIVITY_REPORT_ANALYTICS = exports.ACTIVITY_FETCH_BIDS = exports.ACTIVITY_ENRICH_EIDS = exports.ACTIVITY_ENRICH_UFPD = exports.ACTIVITY_SYNC_USER = exports.ACTIVITY_ACCESS_DEVICE = void 0;
/**
 * accessDevice: some component wants to read or write to localStorage or cookies.
 */
exports.ACTIVITY_ACCESS_DEVICE = 'accessDevice';
/**
 * syncUser: A bid adapter wants to run a user sync.
 */
exports.ACTIVITY_SYNC_USER = 'syncUser';
/**
 * enrichUfpd: some component wants to add user first-party data to bid requests.
 */
exports.ACTIVITY_ENRICH_UFPD = 'enrichUfpd';
/**
 * enrichEids: some component wants to add user IDs to bid requests.
 */
exports.ACTIVITY_ENRICH_EIDS = 'enrichEids';
/**
 * fetchBid: a bidder wants to bid.
 */
exports.ACTIVITY_FETCH_BIDS = 'fetchBids';
/**
 * reportAnalytics: some component wants to phone home with analytics data.
 */
exports.ACTIVITY_REPORT_ANALYTICS = 'reportAnalytics';
/**
 * some component wants access to (and send along) user IDs
 */
exports.ACTIVITY_TRANSMIT_EIDS = 'transmitEids';
/**
 * transmitUfpd: some component wants access to (and send along) user FPD
 */
exports.ACTIVITY_TRANSMIT_UFPD = 'transmitUfpd';
/**
 * transmitPreciseGeo: some component wants access to (and send along) geolocation info
 */
exports.ACTIVITY_TRANSMIT_PRECISE_GEO = 'transmitPreciseGeo';
/**
 * transmit TID: some component wants access ot (and send along) transaction IDs
 */
exports.ACTIVITY_TRANSMIT_TID = 'transmitTid';


/***/ }),

/***/ "./src/modules/consent/activityControls.ts":
/*!*************************************************!*\
  !*** ./src/modules/consent/activityControls.ts ***!
  \*************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

var _a;
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.flatSection = exports.CONSENT_RULES = exports.isTransmitGeoConsentDenied = exports.isTransmitUfpdConsentDenied = exports.isConsentDenied = exports.sensitiveNoticeIs = exports.isBasicConsentDenied = void 0;
var activities_1 = __webpack_require__(/*! ./activities */ "./src/modules/consent/activities.ts");
// default interpretation for MSPA consent(s):
// https://docs.prebid.org/features/mspa-usnat.html
var SENSITIVE_DATA_GEO = 7;
function isApplicable(val) {
    return val != null && val !== 0;
}
function isBasicConsentDenied(cd) {
    // service provider mode is always consent denied
    return ['MspaServiceProviderMode', 'Gpc'].some(function (prop) { return cd[prop] === 1; }) ||
        // you cannot consent to what you were not notified of
        cd.PersonalDataConsents === 2 ||
        // minors 13+ who have not given consent
        cd.KnownChildSensitiveDataConsents[0] === 1 ||
        // minors under 13 cannot consent
        isApplicable(cd.KnownChildSensitiveDataConsents[1]) ||
        // covered cannot be zero
        cd.MspaCoveredTransaction === 0;
}
exports.isBasicConsentDenied = isBasicConsentDenied;
function sensitiveNoticeIs(cd, value) {
    return ['SensitiveDataProcessingOptOutNotice', 'SensitiveDataLimitUseNotice'].some(function (prop) { return cd[prop] === value; });
}
exports.sensitiveNoticeIs = sensitiveNoticeIs;
function isConsentDenied(cd) {
    return isBasicConsentDenied(cd) ||
        ['Sale', 'Sharing', 'TargetedAdvertising'].some(function (scope) {
            var oo = cd["".concat(scope, "OptOut")];
            var notice = cd["".concat(scope, "OptOutNotice")];
            // user opted out
            return oo === 1 ||
                // opt-out notice was not given
                notice === 2 ||
                // do not trust CMP if it signals opt-in but no opt-out notice was given
                (oo === 2 && notice === 0);
        }) ||
        // no sharing notice was given ...
        cd.SharingNotice === 2 ||
        // ... or the CMP says it was not applicable, while also claiming it got consent
        (cd.SharingOptOut === 2 && cd.SharingNotice === 0);
}
exports.isConsentDenied = isConsentDenied;
exports.isTransmitUfpdConsentDenied = (function () {
    // deny anything that smells like: genetic, biometric, state/national ID, financial, union membership,
    // or personal communication data
    var cannotBeInScope = [6, 7, 9, 10, 12].map(function (el) { return --el; });
    // require consent for everything else (except geo, which is treated separately)
    var allExceptGeo = Array.from(Array(12).keys()).filter(function (el) { return el !== SENSITIVE_DATA_GEO; });
    var mustHaveConsent = allExceptGeo.filter(function (el) { return !cannotBeInScope.includes(el); });
    return function (cd) {
        return isConsentDenied(cd) ||
            // no notice about sensitive data was given
            sensitiveNoticeIs(cd, 2) ||
            // extra-sensitive data is applicable
            cannotBeInScope.some(function (i) { return isApplicable(cd.SensitiveDataProcessing[i]); }) ||
            // user opted out for not-as-sensitive data
            mustHaveConsent.some(function (i) { return cd.SensitiveDataProcessing[i] === 1; }) ||
            // CMP says it has consent, but did not give notice about it
            (sensitiveNoticeIs(cd, 0) && allExceptGeo.some(function (i) { return cd.SensitiveDataProcessing[i] === 2; }));
    };
})();
function isTransmitGeoConsentDenied(cd) {
    var geoConsent = cd.SensitiveDataProcessing[SENSITIVE_DATA_GEO];
    return geoConsent === 1 ||
        isBasicConsentDenied(cd) ||
        // no sensitive data notice was given
        sensitiveNoticeIs(cd, 2) ||
        // do not trust CMP if it says it has consent for geo but didn't show a sensitive data notice
        (sensitiveNoticeIs(cd, 0) && geoConsent === 2);
}
exports.isTransmitGeoConsentDenied = isTransmitGeoConsentDenied;
exports.CONSENT_RULES = (_a = {},
    _a[activities_1.ACTIVITY_SYNC_USER] = isConsentDenied,
    _a[activities_1.ACTIVITY_ENRICH_EIDS] = isConsentDenied,
    _a[activities_1.ACTIVITY_ENRICH_UFPD] = exports.isTransmitUfpdConsentDenied,
    _a[activities_1.ACTIVITY_TRANSMIT_PRECISE_GEO] = isTransmitGeoConsentDenied,
    _a);
function flatSection(subsections) {
    if (subsections == null || !Array.isArray(subsections))
        return subsections;
    return subsections.reduceRight(function (subsection, consent) {
        return Object.assign(consent, subsection);
    }, {});
}
exports.flatSection = flatSection;


/***/ }),

/***/ "./src/modules/consent/cmpClient.ts":
/*!******************************************!*\
  !*** ./src/modules/consent/cmpClient.ts ***!
  \******************************************/
/***/ (function(__unused_webpack_module, exports) {

"use strict";

/**
 * @typedef {function} CMPClient
 *
 * @param {{}} params CMP parameters. Currently this is a subset of {command, callback, parameter, version}.
 * @param {bool} once if true, discard cross-frame event listeners once a reply message is received.
 * @returns {Promise<*>} a promise to the API's "result" - see the `mode` argument to `cmpClient` on how that's determined.
 * @property {boolean} isDirect true if the CMP is directly accessible (no postMessage required)
 * @property {() => void} close close the client; currently, this just stops listening for cross-frame messages.
 */
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.cmpClient = exports.MODE_CALLBACK = exports.MODE_RETURN = exports.MODE_MIXED = void 0;
/**
 * Returns a client function that can interface with a CMP regardless of where it's located.
 *
 * @param apiName name of the CMP api, e.g. "__gpp"
 * @param apiVersion? CMP API version
 * @param apiArgs? names of the arguments taken by the api function, in order.
 * @param mode? controls the callbacks passed to the underlying API, and how the promises returned by the client are resolved.
 *
 *  The client behaves differently when it's provided a `callback` argument vs when it's not - for short, let's name these
 *  cases "subscriptions" and "one-shot calls" respectively:
 *
 *  With `mode: MODE_MIXED` (the default), promises returned on subscriptions are resolved to undefined when the callback
 *  is first run (that is, the promise resolves when the CMP replies, but what it replies with is discarded and
 *  left for the callback to deal with). For one-shot calls, the returned promise is resolved to the API's
 *  return value when it's directly accessible, or with the result from the first (and, presumably, the only)
 *  cross-frame reply when it's not;
 *
 *  With `mode: MODE_RETURN`, the returned promise always resolves to the API's return value - which is taken to be undefined
 *  when cross-frame;
 *
 *  With `mode: MODE_CALLBACK`, the underlying API is expected to never directly return anything significant; instead,
 *  it should always accept a callback and - for one-shot calls - invoke it only once with the result. The client will
 *  automatically generate an appropriate callback for one-shot calls and use the result it's given to resolve
 *  the returned promise. Subscriptions are treated in the same way as MODE_MIXED.
 *
 * @param win
 * @returns {CMPClient} CMP invocation function (or null if no CMP was found).
 */
exports.MODE_MIXED = 0;
exports.MODE_RETURN = 1;
exports.MODE_CALLBACK = 2;
function cmpClient(_a, win) {
    var _b = _a.apiName, apiName = _b === void 0 ? '' : _b, _c = _a.apiVersion, apiVersion = _c === void 0 ? 0 : _c, _d = _a.apiArgs, apiArgs = _d === void 0 ? ['command', 'callback', 'parameter', 'version'] : _d, _e = _a.mode, mode = _e === void 0 ? exports.MODE_MIXED : _e;
    if (win === void 0) { win = window; }
    function findCMP() {
        var cmpFrame = null;
        var isDirect = false;
        if (typeof win[apiName] === 'function') {
            cmpFrame = win;
            isDirect = true;
        }
        return [
            cmpFrame,
            isDirect
        ];
    }
    var _f = findCMP(), cmpFrame = _f[0], isDirect = _f[1];
    if (!cmpFrame) {
        return;
    }
    function resolveParams(params) {
        params = Object.assign({ version: apiVersion }, params);
        return apiArgs.map(function (arg) { return [arg, params[arg]]; });
    }
    // wrap the callback to resolve the promise
    function wrapCallback(callback, resolve, reject) {
        // if the CMP returns a value, resolve the promise with it
        var haveCb = typeof callback === 'function';
        return function () {
            var args = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                args[_i] = arguments[_i];
            }
            var result = args[0], success = args[1];
            if (mode !== exports.MODE_RETURN) {
                var resolver = success == null || success ? resolve : reject;
                resolver(haveCb ? undefined : result);
            }
            haveCb && callback.apply(this, args);
        };
    }
    var client;
    if (isDirect) {
        client = function invokeCMPDirect(params) {
            return new Promise(function (resolve, reject) {
                var ret = cmpFrame[apiName].apply(cmpFrame, resolveParams(__assign(__assign({}, params), { callback: (params.callback || mode === exports.MODE_CALLBACK) ? wrapCallback(params.callback, resolve, reject) : undefined })).map(function (_a) {
                    var val = _a[1];
                    return val;
                }));
                if (mode === exports.MODE_RETURN || (params.callback == null && mode === exports.MODE_MIXED)) {
                    resolve(ret);
                }
            });
        };
    }
    else {
        return;
    }
    return Object.assign(client, {
        isDirect: isDirect
    });
}
exports.cmpClient = cmpClient;


/***/ }),

/***/ "./src/modules/consent/consentManagementGdpr.ts":
/*!******************************************************!*\
  !*** ./src/modules/consent/consentManagementGdpr.ts ***!
  \******************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";

var __spreadArray = (this && this.__spreadArray) || function (to, from, pack) {
    if (pack || arguments.length === 2) for (var i = 0, l = from.length, ar; i < l; i++) {
        if (ar || !(i in from)) {
            if (!ar) ar = Array.prototype.slice.call(from, 0, i);
            ar[i] = from[i];
        }
    }
    return to.concat(ar || Array.prototype.slice.call(from));
};
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.setConsentConfig = exports.loadIfMissing = void 0;
/**
 * This module adds GDPR consentManagement support.  It interacts with
 * supported CMPs (Consent Management Platforms) to grab the user's consent information
 * and make it available for any GDPR supported adapters to read/pass this information to
 * their system.
 */
var log_1 = __webpack_require__(/*! ../../utils/log */ "./src/utils/log.ts");
var utils_1 = __webpack_require__(/*! ../../utils/utils */ "./src/utils/utils.ts");
var cmpClient_1 = __webpack_require__(/*! ./cmpClient */ "./src/modules/consent/cmpClient.ts");
var ConsentHandler_1 = __webpack_require__(/*! ../../classes/consent/ConsentHandler */ "./src/classes/consent/ConsentHandler.ts");
var gdprEnforcement_1 = __webpack_require__(/*! ./gdprEnforcement */ "./src/modules/consent/gdprEnforcement.ts");
var DEFAULT_CONSENT_TIMEOUT = 10000;
var CMP_VERSION = 2;
var consentTimeout;
var actionTimeout;
var consentData;
var gdprScope;
/**
 * Look up consent data and store it in the `consentData` global as well as `adapterManager.js`' gdprDataHandler.
 *
 * @param cb A callback that takes: a boolean that is true if the auction should be canceled; an error message and extra
 * error arguments that will be undefined if there's no error.
 */
function loadConsentData(cb) {
    var isDone = false;
    var timer = null;
    var provisionalConsent = null;
    var cmpLoaded = false;
    var fail_count = 0;
    function resetTimeout(timeout) {
        if (timer != null) {
            clearTimeout(timer);
        }
        if (!isDone && timeout != null) {
            if (timeout === 0) {
                onTimeout();
            }
            else {
                timer = setTimeout(onTimeout, timeout);
            }
        }
    }
    function done(consentData, shouldCancelAuction, errMsg) {
        var extraArgs = [];
        for (var _i = 3; _i < arguments.length; _i++) {
            extraArgs[_i - 3] = arguments[_i];
        }
        resetTimeout(null);
        isDone = true;
        if (errMsg)
            log_1.logWarn.apply(void 0, __spreadArray(["GDPR:", errMsg], extraArgs, false));
        ConsentHandler_1.gdprConsentHandler.setConsentData(consentData);
        if (typeof cb === 'function') {
            cb.apply(void 0, __spreadArray([shouldCancelAuction, errMsg], extraArgs, false));
        }
    }
    var onTimeout = function () {
        var continueToAuction = function (data) {
            done(data, false, "".concat(cmpLoaded ? 'Timeout waiting for user action on CMP' : 'CMP did not load', ", continuing auction..."));
        };
        processCmpData(provisionalConsent, {
            onSuccess: continueToAuction,
            onError: function () { return continueToAuction(storeConsentData(undefined)); },
        });
    };
    var callbacks = {
        onSuccess: function (data) { return done(data, false, ''); },
        onError: function (msg) {
            var extraArgs = [];
            for (var _i = 1; _i < arguments.length; _i++) {
                extraArgs[_i - 1] = arguments[_i];
            }
            if (fail_count < 10) {
                fail_count++;
                setTimeout(function () {
                    lookupIabConsent(callbacks);
                }, 500);
            }
            else {
                done.apply(void 0, __spreadArray([null, true, msg], extraArgs, false));
            }
        },
        onEvent: function (consentData) {
            provisionalConsent = consentData;
            if (cmpLoaded)
                return;
            cmpLoaded = true;
            if (actionTimeout != null) {
                resetTimeout(actionTimeout);
            }
        }
    };
    lookupIabConsent(callbacks);
    if (!(actionTimeout != null && cmpLoaded)) {
        resetTimeout(consentTimeout);
    }
    // add eventListener for event that country code was recieved
    document.addEventListener('BcConsentCountryCode', function (event) {
        if (event.detail !== 'EU' && !isDone) {
            done({
                gdprApplies: false,
                apiVersion: CMP_VERSION
            }, false, '');
        }
    });
}
/**
 * This function handles interacting with an IAB compliant CMP to obtain the consent information of the user.
 * Given the async nature of the CMP's API, we pass in acting success/error callback functions to exit this function
 * based on the appropriate result.
 * @param {function({})} onSuccess acts as a success callback when CMP returns a value; pass along consentObjectfrom CMP
 * @param {function(string, ...{}?)} onError acts as an error callback while interacting with CMP; pass along an error message (string) and any extra error arguments (purely for logging)
 */
function lookupIabConsent(_a) {
    var onSuccess = _a.onSuccess, onError = _a.onError, onEvent = _a.onEvent;
    function cmpResponseCallback(tcfData, success) {
        (0, log_1.logInfo)('GDPR: Received a response from CMP', tcfData);
        if (success) {
            onEvent(tcfData);
            if (tcfData.gdprApplies === false || tcfData.eventStatus === 'tcloaded' || tcfData.eventStatus === 'useractioncomplete') {
                processCmpData(tcfData, { onSuccess: onSuccess, onError: onError });
            }
        }
        else {
            onError('GDPR: CMP unable to register callback function.  Please check CMP setup.');
        }
    }
    var cmp = (0, cmpClient_1.cmpClient)({
        apiName: '__tcfapi',
        apiVersion: CMP_VERSION,
        apiArgs: ['command', 'version', 'callback', 'parameter'],
    });
    if (!cmp) {
        return onError('TCF2 CMP not found.');
    }
    if (cmp.isDirect) {
        (0, log_1.logInfo)('GDPR: Detected CMP API is directly accessible, calling it now...');
    }
    cmp({
        command: 'addEventListener',
        callback: cmpResponseCallback
    });
}
/**
 * Like `loadConsentData`, but cache and re-use previously loaded data.
 * @param cb
 */
function loadIfMissing(cb) {
    if (consentData && consentData.consentString) {
        (0, log_1.logInfo)('GDPR: User consent information already known.  Pulling internally stored information...');
        cb(false);
    }
    else {
        loadConsentData(cb);
    }
}
exports.loadIfMissing = loadIfMissing;
/**
 * This function checks the consent data provided by CMP to ensure it's in an expected state.
 * If it's bad, we call `onError`
 * If it's good, then we store the value and call `onSuccess`
 */
function processCmpData(consentObject, _a) {
    var onSuccess = _a.onSuccess, onError = _a.onError;
    function checkData() {
        // if CMP does not respond with a gdprApplies boolean, use defaultGdprScope (gdprScope)
        var gdprApplies = consentObject && typeof consentObject.gdprApplies === 'boolean' ? consentObject.gdprApplies : gdprScope;
        var tcString = consentObject && consentObject.tcString;
        return !!((typeof gdprApplies !== 'boolean') ||
            (gdprApplies === true && (!tcString || !(0, utils_1.isStr)(tcString))));
    }
    if (checkData()) {
        onError("CMP returned unexpected value during lookup process.", consentObject);
    }
    else {
        onSuccess(storeConsentData(consentObject));
    }
}
/**
 * Stores CMP data locally in module to make information available in adaptermanager.js for later in the auction
 * @param {object} cmpConsentObject required; an object representing user's consent choices (can be undefined in certain use-cases for this function only)
 */
function storeConsentData(cmpConsentObject) {
    consentData = {
        consentString: (cmpConsentObject) ? cmpConsentObject.tcString : undefined,
        vendorData: (cmpConsentObject) || undefined,
        gdprApplies: cmpConsentObject && typeof cmpConsentObject.gdprApplies === 'boolean' ? cmpConsentObject.gdprApplies : gdprScope,
        apiVersion: CMP_VERSION
    };
    if (cmpConsentObject && cmpConsentObject.addtlConsent && (0, utils_1.isStr)(cmpConsentObject.addtlConsent)) {
        consentData.addtlConsent = cmpConsentObject.addtlConsent;
    }
    return consentData;
}
/**
 * A configuration function that initializes some module variables, as well as add a hook into the requestBids function
 * @param {{cmp:string, timeout:number, allowAuctionWithoutConsent:boolean, defaultGdprScope:boolean}} config required; consentManagement module config settings; cmp (string), timeout (int), allowAuctionWithoutConsent (boolean)
 */
function setConsentConfig(config) {
    config = config && config.gdpr;
    if (!config || typeof config !== 'object') {
        (0, log_1.logWarn)('consentManagement (gdpr) config not defined, exiting consent manager');
        return;
    }
    // check if config.timeout is a number
    if ((0, utils_1.isNumber)(config.timeout)) {
        consentTimeout = config.timeout;
    }
    else {
        consentTimeout = DEFAULT_CONSENT_TIMEOUT;
        (0, log_1.logInfo)("GDPR: consentManagement config did not specify timeout. Using system default setting (".concat(DEFAULT_CONSENT_TIMEOUT, ")."));
    }
    actionTimeout = (0, utils_1.isNumber)(config.actionTimeout) ? config.actionTimeout : 1000;
    // if true, then gdprApplies should be set to true
    gdprScope = config.defaultGdprScope === true;
    // set enforcement config
    (0, gdprEnforcement_1.setEnforcementConfig)(config.enforcement || {});
    (0, log_1.logInfo)('GDPR: consentManagement module has been activated...');
    loadConsentData(function () { }); // immediately look up consent data to make it available without requiring an auction
}
exports.setConsentConfig = setConsentConfig;


/***/ }),

/***/ "./src/modules/consent/consentManagementGpp.ts":
/*!*****************************************************!*\
  !*** ./src/modules/consent/consentManagementGpp.ts ***!
  \*****************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";

var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __spreadArray = (this && this.__spreadArray) || function (to, from, pack) {
    if (pack || arguments.length === 2) for (var i = 0, l = from.length, ar; i < l; i++) {
        if (ar || !(i in from)) {
            if (!ar) ar = Array.prototype.slice.call(from, 0, i);
            ar[i] = from[i];
        }
    }
    return to.concat(ar || Array.prototype.slice.call(from));
};
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.setConsentConfig = exports.storeConsentData = exports.loadIfMissing = exports.lookupIabConsent = void 0;
/**
 * This module adds GPP consentManagement support.  It interacts with
 * supported CMPs (Consent Management Platforms) to grab the user's consent information
 * and make it available for any GPP supported adapters to read/pass this information to
 * their system and for various other features/modules.
 */
var log_1 = __webpack_require__(/*! ../../utils/log */ "./src/utils/log.ts");
var utils_1 = __webpack_require__(/*! ../../utils/utils */ "./src/utils/utils.ts");
var cmpClient_1 = __webpack_require__(/*! ./cmpClient */ "./src/modules/consent/cmpClient.ts");
var ConsentHandler_1 = __webpack_require__(/*! ../../classes/consent/ConsentHandler */ "./src/classes/consent/ConsentHandler.ts");
var ConsentHandler_2 = __webpack_require__(/*! ../../classes/consent/ConsentHandler */ "./src/classes/consent/ConsentHandler.ts");
var GPP_10 = '1.0';
var GPP_11 = '1.1';
var DEFAULT_CMP_VERSION = GPP_11;
var DEFAULT_CONSENT_TIMEOUT = 10000;
var consentData;
var consentTimeout;
var GPPError = /** @class */ (function () {
    function GPPError(message, arg) {
        this.message = message;
        this.args = arg == null ? [] : [arg];
    }
    return GPPError;
}());
var GPPClient = /** @class */ (function () {
    function GPPClient(cmpVersion, cmp) {
        var _a;
        var _this = this;
        this.initialized = false;
        this.pending = [];
        this.cmpVersion = cmpVersion;
        this.cmp = cmp;
        _a = [0, 1].map(function (slot) { return function (result) {
            while (_this.pending.length) {
                _this.pending.pop()[slot](result);
            }
        }; }), this.resolve = _a[0], this.reject = _a[1];
    }
    GPPClient.ping = function (mkCmp) {
        if (mkCmp === void 0) { mkCmp = cmpClient_1.cmpClient; }
        var cmpOptions = {
            apiName: '__gpp',
            apiArgs: ['command', 'callback', 'parameter'], // do not pass version - not clear what it's for (or what we should use)
        };
        // in 1.0, 'ping' should return pingData but ignore callback;
        // in 1.1 it should not return anything but run the callback
        // the following looks for either - but once the version is known, produce a client that knows whether the
        // rest of the interactions should pick return values or pass callbacks
        var probe = mkCmp(__assign(__assign({}, cmpOptions), { mode: cmpClient_1.MODE_RETURN }));
        return new Promise(function (resolve, reject) {
            // CMP not found
            if (probe == null) {
                reject(new Error('GPP CMP not found'));
                return;
            }
            var done = false;
            // some CMPs do both return value and callbacks - avoid repeating log messages
            // wrap the callback to resolve the promise
            var pong = function (result, success) {
                if (done)
                    return;
                if (success != null && !success) {
                    reject(result);
                    return;
                }
                if (result == null)
                    return;
                done = true;
                var cmpVersion = (result === null || result === void 0 ? void 0 : result.gppVersion) || DEFAULT_CMP_VERSION;
                var mode;
                var client;
                if (cmpVersion == GPP_10) {
                    mode = cmpClient_1.MODE_MIXED;
                    client = new GPP10Client(cmpVersion, mkCmp(__assign(__assign({}, cmpOptions), { mode: mode })));
                }
                else if (cmpVersion == GPP_11) {
                    mode = cmpClient_1.MODE_CALLBACK;
                    client = new GPP11Client(cmpVersion, mkCmp(__assign(__assign({}, cmpOptions), { mode: mode })));
                }
                resolve([client, result]);
            };
            probe({
                command: 'ping',
                callback: pong
            }).then(function (res) { return pong(res, true); })
                .catch(function (err) { return reject(new Error("GPP CMP ping failed: ".concat(err))); });
        });
    };
    /**
     * initialize this client - update consent data if already available,
     * and set up event listeners to also update on CMP changes
     *
     * @param pingData
     * @returns {Promise<{}>} a promise to GPP consent data
     */
    GPPClient.prototype.init = function (pingData) {
        var _this = this;
        var ready = this.updateWhenReady(pingData);
        if (!this.initialized) {
            this.initialized = true;
            this.cmp({
                command: 'addEventListener',
                callback: function (event, success) {
                    var _a;
                    if (success != null && !success) {
                        _this.reject(new GPPError('Received error response from CMP', event));
                    }
                    else if (((_a = event === null || event === void 0 ? void 0 : event.pingData) === null || _a === void 0 ? void 0 : _a.cmpStatus) === 'error') {
                        _this.reject(new GPPError('CMP status is "error"; please check CMP setup', event));
                    }
                    else if (_this.isCMPReady((event === null || event === void 0 ? void 0 : event.pingData) || {}) && _this.events.includes(event === null || event === void 0 ? void 0 : event.eventName)) {
                        _this.resolve(_this.updateConsent(event.pingData));
                    }
                }
            });
        }
        return ready;
    };
    GPPClient.prototype.refresh = function () {
        return this.cmp({ command: 'ping' }).then(this.updateWhenReady.bind(this));
    };
    /**
     * Retrieve and store GPP consent data.
     *
     * @param pingData
     * @returns {Promise<{}>} a promise to GPP consent data
     */
    GPPClient.prototype.updateConsent = function (pingData) {
        return this.getGPPData(pingData).then(function (data) {
            if (data == null || (0, utils_1.isEmpty)(data)) {
                throw new GPPError('Received empty response from CMP', data);
            }
            return processCmpData(data, { onSuccess: function () { return data; }, onError: function () { return data; } });
        }).then(function (data) {
            (0, log_1.logInfo)('Retrieved GPP consent from CMP:', data);
            return data;
        });
    };
    /**
     * Return a promise to GPP consent data, to be retrieved the next time the CMP signals it's ready.
     *
     * @returns {Promise<{}>}
     */
    GPPClient.prototype.nextUpdate = function () {
        var _this = this;
        return new Promise(function (resolve, reject) {
            _this.pending.push([resolve, reject]);
        });
    };
    /**
     * Return a promise to GPP consent data, to be retrieved immediately if the CMP is ready according to `pingData`,
     * or as soon as it signals that it's ready otherwise.
     *
     * @param pingData
     * @returns {Promise<{}>}
     */
    GPPClient.prototype.updateWhenReady = function (pingData) {
        return this.isCMPReady(pingData) ? this.updateConsent(pingData) : this.nextUpdate();
    };
    return GPPClient;
}());
// eslint-disable-next-line no-unused-vars
var GPP10Client = /** @class */ (function (_super) {
    __extends(GPP10Client, _super);
    function GPP10Client(cmpVersion, cmp) {
        var _this = _super.call(this, cmpVersion, cmp) || this;
        _this.events = ['sectionChange', 'cmpStatus'];
        return _this;
    }
    GPP10Client.prototype.isCMPReady = function (pingData) {
        (0, log_1.logInfo)('GPP CMP status 1.0:', pingData);
        return pingData.cmpStatus === 'loaded';
    };
    GPP10Client.prototype.getGPPData = function (pingData) {
        var _this = this;
        var parsedSections = Promise.all((pingData.supportedAPIs || pingData.apiSupport || []).map(function (api) { return _this.cmp({
            command: 'getSection',
            parameter: api
        }).catch(function (err) {
            (0, log_1.logWarn)("Could not retrieve GPP section '".concat(api, "'"), err);
        }).then(function (section) { return [api, section]; }); })).then(function (sections) {
            // parse single section object into [core, gpc] to uniformize with 1.1 parsedSections
            return Object.fromEntries(sections.filter(function (_a) {
                var val = _a[1];
                return val != null;
            })
                .map(function (_a) {
                var api = _a[0], section = _a[1];
                var subsections = [
                    Object.fromEntries(Object.entries(section).filter(function (_a) {
                        var k = _a[0];
                        return k !== 'Gpc';
                    }))
                ];
                if (section.Gpc != null) {
                    subsections.push({
                        SubsectionType: 1,
                        Gpc: section.Gpc
                    });
                }
                return [api, subsections];
            }));
        });
        return Promise.all([
            this.cmp({ command: 'getGPPData' }),
            parsedSections
        ]).then(function (_a) {
            var gppData = _a[0], parsedSections = _a[1];
            return Object.assign({}, gppData, { parsedSections: parsedSections });
        });
    };
    return GPP10Client;
}(GPPClient));
// eslint-disable-next-line no-unused-vars
var GPP11Client = /** @class */ (function (_super) {
    __extends(GPP11Client, _super);
    function GPP11Client(cmpVersion, cmp) {
        var _this = _super.call(this, cmpVersion, cmp) || this;
        _this.events = ['sectionChange', 'signalStatus'];
        return _this;
    }
    GPP11Client.prototype.isCMPReady = function (pingData) {
        (0, log_1.logInfo)('GPP CMP status 1.1:', pingData);
        if (pingData.gppVersion == GPP_10) {
            (0, log_1.logWarn)("GPP CMP version is not 1.1. (".concat(GPP_10, ")"));
            return this.runGpp10Client('isCMPReady', pingData);
        }
        return pingData.signalStatus === 'ready';
    };
    GPP11Client.prototype.getGPPData = function (pingData) {
        if (pingData.gppVersion == GPP_10) {
            (0, log_1.logWarn)("GPP CMP version is not 1.1. (".concat(GPP_10, ")"));
            return this.runGpp10Client('getGPPData', pingData);
        }
        return Promise.resolve(pingData);
    };
    GPP11Client.prototype.runGpp10Client = function (command, pingData) {
        if (!this.gpp10Client) {
            this.gpp10Client = new GPP10Client(GPP_10, this.cmp);
        }
        return this.gpp10Client[command](pingData);
    };
    return GPP11Client;
}(GPPClient));
/**
 * Look up consent data and store it in the `consentData` global as well as `adapterManager.js`' gdprDataHandler.
 *
 * @param cb A callback that takes: a boolean that is true if the auction should be canceled; an error message and extra
 * error arguments that will be undefined if there's no error.
 */
function loadConsentData(cb) {
    var isDone = false;
    var timer = null;
    var fail_count = 0;
    function done(consentData, shouldCancelAuction, errMsg) {
        var extraArgs = [];
        for (var _i = 3; _i < arguments.length; _i++) {
            extraArgs[_i - 3] = arguments[_i];
        }
        if (timer != null) {
            clearTimeout(timer);
        }
        isDone = true;
        (0, log_1.logInfo)('GPP CMP lookup complete.', consentData);
        ConsentHandler_1.gppConsentHandler.setConsentData(consentData);
        if (typeof cb === 'function') {
            cb.apply(void 0, __spreadArray([shouldCancelAuction, errMsg], extraArgs, false));
        }
    }
    var callbacks = {
        onSuccess: function (data) { return done(data, false, ""); },
        onError: function (msg) {
            var extraArgs = [];
            for (var _i = 1; _i < arguments.length; _i++) {
                extraArgs[_i - 1] = arguments[_i];
            }
            if (fail_count < 10) {
                fail_count++;
                setTimeout(function () {
                    lookupIabConsent(callbacks);
                }, 500);
            }
            else {
                done.apply(void 0, __spreadArray([null, true, msg], extraArgs, false));
            }
        }
    };
    lookupIabConsent(callbacks);
    if (!isDone) {
        var onTimeout = function () {
            (0, log_1.logWarn)("GPP CMP lookup timed out after ".concat(consentTimeout, " ms"));
            var continueToAuction = function (data) {
                done(data, false, 'GPP CMP did not load, continuing auction...');
            };
            processCmpData(consentData, {
                onSuccess: continueToAuction,
                onError: function () { return continueToAuction(storeConsentData({})); }
            });
        };
        if (consentTimeout === 0) {
            onTimeout();
        }
        else {
            timer = setTimeout(onTimeout, consentTimeout);
        }
    }
    // add eventListener for event that country code was recieved
    document.addEventListener('BcConsentCountryCode', function (event) {
        if (!['US', 'EU', 'CA'].includes(event.detail) && !isDone) {
            done({
                gppString: '',
                applicableSections: [],
                parsedSections: {}
            }, false, '');
        }
    });
    // add eventListener for event that country code was recieved
    document.addEventListener('BcConsentRegionCode', function (event) {
        if (event.detail.country === 'US' &&
            !ConsentHandler_2.US_REGIONS.includes(event.detail.region) &&
            !isDone) {
            done({
                gppString: '',
                applicableSections: [],
                parsedSections: {}
            }, false, '');
        }
    });
}
/**
 * This function handles interacting with an IAB compliant CMP to obtain the consent information of the user.
 * Given the async nature of the CMP's API, we pass in acting success/error callback functions to exit this function
 * based on the appropriate result.
 * @param {function({})} onSuccess acts as a success callback when CMP returns a value; pass along consentObjectfrom CMP
 * @param {function(string, ...{}?)} cmpError acts as an error callback while interacting with CMP; pass along an error message (string) and any extra error arguments (purely for logging)
 */
function lookupIabConsent(_a) {
    var onSuccess = _a.onSuccess, onError = _a.onError;
    GPPClient.ping().then(function (_a) {
        var client = _a[0], gppDataPm = _a[1];
        return client.init(gppDataPm);
    }).then(function (gppData) {
        onSuccess(gppData);
    }).catch(function (err) {
        onError(err);
    });
}
exports.lookupIabConsent = lookupIabConsent;
/**
 * Like `loadConsentData`, but cache and re-use previously loaded data.
 * @param cb
 */
function loadIfMissing(cb) {
    if (consentData && consentData.gppString) {
        (0, log_1.logInfo)('GPP User consent information already known.  Pulling internally stored information...');
        cb(false);
    }
    else {
        loadConsentData(cb);
    }
}
exports.loadIfMissing = loadIfMissing;
function processCmpData(consentData, _a) {
    var onSuccess = _a.onSuccess, onError = _a.onError;
    if (((consentData === null || consentData === void 0 ? void 0 : consentData.applicableSections) != null && !Array.isArray(consentData.applicableSections)) ||
        ((consentData === null || consentData === void 0 ? void 0 : consentData.gppString) != null && !(0, utils_1.isStr)(consentData.gppString)) ||
        ((consentData === null || consentData === void 0 ? void 0 : consentData.parsedSections) != null && !(0, utils_1.isPlainObject)(consentData.parsedSections))) {
        onError('GPP CMP returned unexpected value during lookup process.', consentData);
        // throw new GPPError('CMP returned unexpected value during lookup process.', consentData);
    }
    consentData = storeConsentData(consentData);
    (0, log_1.logInfo)('GPP Consent Data.', consentData);
    onSuccess(consentData);
    return consentData;
}
/**
 * Stores CMP data locally in module to make information available in adaptermanager.js for later in the auction
 * @param {{}} gppData the result of calling a CMP's `getGPPData` (or equivalent)
 * @param {{}} sectionData map from GPP section name to the result of calling a CMP's `getSection` (or equivalent)
 */
function storeConsentData(gppData) {
    consentData = {
        gppString: gppData === null || gppData === void 0 ? void 0 : gppData.gppString,
        applicableSections: (gppData === null || gppData === void 0 ? void 0 : gppData.applicableSections.filter(function (sid) { return sid !== -1; })) || [],
        parsedSections: (gppData === null || gppData === void 0 ? void 0 : gppData.parsedSections) || {},
        gppData: gppData
    };
    // gppDataHandler.setConsentData(gppData);
    return consentData;
}
exports.storeConsentData = storeConsentData;
/**
 * A configuration function that initializes some module variables, as well as add a hook into the requestBids function
 * @param {{cmp:string, timeout:number, allowAuctionWithoutConsent:boolean, defaultGdprScope:boolean}} config required; consentManagement module config settings; cmp (string), timeout (int), allowAuctionWithoutConsent (boolean)
 */
function setConsentConfig(config) {
    config = config && config.gpp;
    if (!config || typeof config !== 'object') {
        (0, log_1.logWarn)('consentManagement.gpp config not defined, exiting consent manager module');
        return;
    }
    if ((0, utils_1.isNumber)(config.timeout)) {
        consentTimeout = config.timeout;
    }
    else {
        consentTimeout = DEFAULT_CONSENT_TIMEOUT;
        (0, log_1.logInfo)("consentManagement.gpp config did not specify timeout.  Using system default setting (".concat(DEFAULT_CONSENT_TIMEOUT, ")."));
    }
    (0, log_1.logInfo)('consentManagement.gpp module has been activated...');
    loadConsentData(function () { }); // immediately look up consent data to make it available without requiring an auction
}
exports.setConsentConfig = setConsentConfig;


/***/ }),

/***/ "./src/modules/consent/consentManagementUsp.ts":
/*!*****************************************************!*\
  !*** ./src/modules/consent/consentManagementUsp.ts ***!
  \*****************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";

var __spreadArray = (this && this.__spreadArray) || function (to, from, pack) {
    if (pack || arguments.length === 2) for (var i = 0, l = from.length, ar; i < l; i++) {
        if (ar || !(i in from)) {
            if (!ar) ar = Array.prototype.slice.call(from, 0, i);
            ar[i] = from[i];
        }
    }
    return to.concat(ar || Array.prototype.slice.call(from));
};
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.setConsentConfig = exports.loadIfMissing = void 0;
/**
 * This module adds USPAPI (CCPA) consentManagement support. It
 * interacts with supported USP Consent APIs to grab the user's consent
 * information and make it available for any USP (CCPA) supported adapters to
 * read/pass this information to their system.
 */
var log_1 = __webpack_require__(/*! ../../utils/log */ "./src/utils/log.ts");
var utils_1 = __webpack_require__(/*! ../../utils/utils */ "./src/utils/utils.ts");
var cmpClient_1 = __webpack_require__(/*! ./cmpClient */ "./src/modules/consent/cmpClient.ts");
var ConsentHandler_1 = __webpack_require__(/*! ../../classes/consent/ConsentHandler */ "./src/classes/consent/ConsentHandler.ts");
var DEFAULT_CONSENT_TIMEOUT = 50;
var USPAPI_VERSION = 1;
var consentTimeout = DEFAULT_CONSENT_TIMEOUT;
var consentData;
/**
 * Lookup consent data and store it in the `consentData` global as well as `adapterManager.js`' uspDataHanlder.
 *
 * @param cb a callback that takes an error message and extra error arguments; all args will be undefined if consent
 * data was retrieved successfully.
 */
function loadConsentData(cb) {
    var timer = null;
    var isDone = false;
    function done(consentData, errMsg) {
        var extraArgs = [];
        for (var _i = 2; _i < arguments.length; _i++) {
            extraArgs[_i - 2] = arguments[_i];
        }
        if (timer != null) {
            clearTimeout(timer);
        }
        isDone = true;
        ConsentHandler_1.uspConsentHandler.setConsentData(consentData);
        if (cb != null) {
            cb.apply(void 0, __spreadArray([false, errMsg], extraArgs, false));
        }
    }
    var callbacks = {
        onSuccess: done,
        onError: function (errMsg) {
            var extraArgs = [];
            for (var _i = 1; _i < arguments.length; _i++) {
                extraArgs[_i - 1] = arguments[_i];
            }
            done.apply(void 0, __spreadArray([null, "".concat(errMsg, " Resuming auction without consent data as per consentManagement config.")], extraArgs, false));
        }
    };
    lookupUspConsent(callbacks);
    if (!isDone) {
        if (consentTimeout === 0) {
            processUspData(undefined, callbacks);
        }
        else {
            timer = setTimeout(callbacks.onError.bind(null, 'USPAPI workflow exceeded timeout threshold.'), consentTimeout);
        }
    }
    // add eventListener for event that country code was recieved
    document.addEventListener('BcConsentCountryCode', function (event) {
        if (event.detail !== 'US' && !isDone) {
            done({
                usPrivacy: '1---'
            }, '');
        }
    });
}
/**
 * This function handles interacting with an USP compliant consent manager to obtain the consent information of the user.
 * Given the async nature of the USP's API, we pass in acting success/error callback functions to exit this function
 * based on the appropriate result.
 */
function lookupUspConsent(_a) {
    var onSuccess = _a.onSuccess, onError = _a.onError;
    function handleUspApiResponseCallbacks() {
        var uspResponse = {
            usPrivacy: ''
        };
        function afterEach() {
            if (uspResponse.usPrivacy) {
                processUspData(uspResponse, { onSuccess: onSuccess, onError: onError });
            }
            else {
                onError('Unable to get USP consent string.');
            }
        }
        return {
            consentDataCallback: function (consentResponse, success) {
                if (success && consentResponse.uspString) {
                    uspResponse.usPrivacy = consentResponse.uspString;
                }
                afterEach();
            },
        };
    }
    var callbackHandler = handleUspApiResponseCallbacks();
    var cmp = (0, cmpClient_1.cmpClient)({
        apiName: '__uspapi',
        apiVersion: USPAPI_VERSION,
        apiArgs: ['command', 'version', 'callback'],
    });
    if (!cmp) {
        return onError('USP CMP not found.');
    }
    if (cmp.isDirect) {
        (0, log_1.logInfo)('Detected USP CMP is directly accessible, calling it now...');
    }
    // else {
    //     logInfo(
    //         'Detected USP CMP is outside the current iframe where Prebid.js is located, calling it now...'
    //     );
    // }
    cmp({
        command: 'getUSPData',
        callback: callbackHandler.consentDataCallback
    });
    // cmp({
    //     command: 'registerDeletion',
    //     callback: adapterManager.callDataDeletionRequest
    // }).catch(e => {
    //     logError('Error invoking CMP `registerDeletion`:', e);
    // });
}
/**
 * Like `loadConsentData`, but cache and re-use previously loaded data.
 * @param cb
 */
function loadIfMissing(cb) {
    if (consentData && consentData.usPrivacy) {
        (0, log_1.logInfo)('User consent information already known.  Pulling internally stored information...');
        cb(false);
    }
    else {
        loadConsentData(cb);
    }
}
exports.loadIfMissing = loadIfMissing;
/**
 * This function checks the consent data provided by USPAPI to ensure it's in an expected state.
 * If it's bad, we exit the module depending on config settings.
 * If it's good, then we store the value and exits the module.
 * @param {object} consentObject required; object returned by USPAPI that contains user's consent choices
 * @param {function(string)} onSuccess callback accepting the resolved consent USP consent string
 * @param {function(string, ...{}?)} onError callback accepting error message and any extra error arguments (used purely for logging)
 */
function processUspData(consentObject, _a) {
    if (consentObject === void 0) { consentObject = { usPrivacy: null }; }
    var onSuccess = _a.onSuccess, onError = _a.onError;
    var valid = !!(consentObject && consentObject.usPrivacy);
    if (!valid) {
        onError("USPAPI returned unexpected value during lookup process.", consentObject);
        return;
    }
    storeUspConsentData(consentObject);
    onSuccess(consentData);
}
/**
 * Stores USP data locally in module and then invokes uspDataHandler.setConsentData() to make information available in adaptermanger.js for later in the auction
 * @param {object} consentObject required; an object representing user's consent choices (can be undefined in certain use-cases for this function only)
 */
function storeUspConsentData(consentObject) {
    if (consentObject && consentObject.usPrivacy) {
        consentData = consentObject;
    }
}
/**
 * A configuration function that initializes some module variables, as well as add a hook into the requestBids function
 * @param {object} config required; consentManagementUSP module config settings; usp (string), timeout (int), allowAuctionWithoutConsent (boolean)
 */
function setConsentConfig(config) {
    config = config && config.usp;
    if (!config || typeof config !== 'object') {
        (0, log_1.logWarn)('consentManagement.usp config not defined, using defaults');
    }
    if (config && (0, utils_1.isNumber)(config.timeout)) {
        consentTimeout = config.timeout;
    }
    else {
        consentTimeout = DEFAULT_CONSENT_TIMEOUT;
        (0, log_1.logInfo)("consentManagement.usp config did not specify timeout. Using system default setting (".concat(DEFAULT_CONSENT_TIMEOUT, ")."));
    }
    (0, log_1.logInfo)('consentManagement.uspc module has been activated...');
    enableConsentManagement();
}
exports.setConsentConfig = setConsentConfig;
function enableConsentManagement() {
    loadConsentData(function () { }); // immediately look up consent data to make it available without requiring an auction
}


/***/ }),

/***/ "./src/modules/consent/gdprEnforcement.ts":
/*!************************************************!*\
  !*** ./src/modules/consent/gdprEnforcement.ts ***!
  \************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

var _a;
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.ruleFunctions = exports.setEnforcementConfig = exports.getGvlid = void 0;
var log_1 = __webpack_require__(/*! ../../utils/log */ "./src/utils/log.ts");
var utils_1 = __webpack_require__(/*! ../../utils/utils */ "./src/utils/utils.ts");
var gvlidRegistry_1 = __webpack_require__(/*! ./gvlidRegistry */ "./src/modules/consent/gvlidRegistry.ts");
var ConsentHandler_1 = __webpack_require__(/*! ../../classes/consent/ConsentHandler */ "./src/classes/consent/ConsentHandler.ts");
var moduleTypes_1 = __webpack_require__(/*! ./moduleTypes */ "./src/modules/consent/moduleTypes.ts");
var activities_1 = __webpack_require__(/*! ../../modules/consent/activities */ "./src/modules/consent/activities.ts");
/**
 * This module gives publishers extra set of features to enforce individual purposes of TCF v2
 */
var STRICT_STORAGE_ENFORCEMENT = 'strictStorageEnforcement';
var ACTIVE_RULES = {
    purpose: {},
    feature: {}
};
var CONSENT_PATHS = {
    purpose: 'purpose.consents',
    feature: 'specialFeatureOptins'
};
var CONFIGURABLE_RULES = {
    storage: {
        type: 'purpose',
        default: {
            purpose: 'storage',
            enforcePurpose: true,
            enforceVendor: true,
            vendorExceptions: []
        },
        id: 1,
    },
    basicAds: {
        type: 'purpose',
        id: 2,
        default: {
            purpose: 'basicAds',
            enforcePurpose: true,
            enforceVendor: true,
            vendorExceptions: []
        }
    },
    personalizedAds: {
        type: 'purpose',
        id: 4,
        default: {
            purpose: 'personalizedAds',
            enforcePurpose: true,
            enforceVendor: true,
            vendorExceptions: []
        }
    },
    measurement: {
        type: 'purpose',
        id: 7,
        default: {}
    },
    transmitPreciseGeo: {
        type: 'feature',
        id: 1,
        default: {
            purpose: 'transmitPreciseGeo',
            enforcePurpose: true,
            enforceVendor: false,
            vendorExceptions: []
        }
    },
};
var VENDORLESS_GVLID = {};
var strictStorageEnforcement = false;
// in JS we do not have access to the GVL; assume that everyone declares legitimate interest for basic ads
var LI_PURPOSES = [2];
/**
 * Retrieve a module's GVL ID.
 */
function getGvlid(moduleType, moduleName, fallbackFn) {
    if (moduleName) {
        if (moduleType === moduleTypes_1.MODULE_TYPE_CORE) { // MODULE_TYPE_PREBID
            return VENDORLESS_GVLID;
        }
        else {
            var gvlid = gvlidRegistry_1.GDPR_GVLIDS.get(moduleName).gvlid;
            if (gvlid == null && fallbackFn) {
                gvlid = fallbackFn();
            }
            return gvlid || null;
        }
    }
    return null;
}
exports.getGvlid = getGvlid;
/**
 * Retrieve GVL IDs that are dynamically set on analytics adapters.
 */
// export function getGvlidFromAnalyticsAdapter(code, config) {
//     const adapter = adapterManager.getAnalyticsAdapter(code);
//     return ((gvlid) => {
//         if (typeof gvlid !== 'function') return gvlid;
//         try {
//             return gvlid.call(adapter.adapter, config);
//         } catch (e) {
//             logError(`Error invoking ${code} adapter.gvlid()`, e);
//         }
//     })(adapter?.adapter?.gvlid);
// }
function shouldEnforce(consentData, purpose, name) {
    if (consentData == null && ConsentHandler_1.gdprConsentHandler.enabled) {
        // there is no consent data, but the GDPR module has been installed and configured
        // NOTE: this check is not foolproof, as when Prebid first loads, enforcement hooks have not been attached yet
        // This piece of code would not run at all, and `gdprDataHandler.enabled` would be false, until the first
        // `setConfig({consentManagement})`
        (0, log_1.logWarn)("Attempting operation that requires purpose ".concat(purpose, " consent while consent data is not available").concat(name ? " (module: ".concat(name, ")") : '', ". Assuming no consent was given."));
        return true;
    }
    return consentData && consentData.gdprApplies;
}
function getConsent(consentData, type, id, gvlId) {
    var purpose = !!(0, utils_1.deepAccess)(consentData, "vendorData.".concat(CONSENT_PATHS[type], ".").concat(id));
    var vendor = !!(0, utils_1.deepAccess)(consentData, "vendorData.vendor.consents.".concat(gvlId));
    if (type === 'purpose' && LI_PURPOSES.includes(id)) {
        purpose || (purpose = !!(0, utils_1.deepAccess)(consentData, "vendorData.purpose.legitimateInterests.".concat(id)));
        vendor || (vendor = !!(0, utils_1.deepAccess)(consentData, "vendorData.vendor.legitimateInterests.".concat(gvlId)));
    }
    return { purpose: purpose, vendor: vendor };
}
/**
 * This function takes in a rule and consentData and validates against the consentData provided. Depending on what it returns,
 * the caller may decide to suppress a TCF-sensitive activity.
 * @param {Object} rule - enforcement rules set in config
 * @param {Object} consentData - gdpr consent data
 * @param {string=} currentModule - Bidder code of the current module
 * @param {number=} gvlId - GVL ID for the module
 * @returns {boolean}
 */
function validateRules(rule, consentData, currentModule, gvlId) {
    var ruleOptions = CONFIGURABLE_RULES[rule.purpose];
    // return 'true' if vendor present in 'vendorExceptions'
    if ((rule.vendorExceptions || []).includes(currentModule)) {
        return true;
    }
    var vendorConsentRequred = rule.enforceVendor && !((gvlId === VENDORLESS_GVLID || (rule.softVendorExceptions || []).includes(currentModule)));
    var _a = getConsent(consentData, ruleOptions.type, ruleOptions.id, gvlId), purpose = _a.purpose, vendor = _a.vendor;
    return (!rule.enforcePurpose || purpose) && (!vendorConsentRequred || vendor);
}
function gdprRule(purposeNo, checkConsent, gvlidFallback) {
    if (gvlidFallback === void 0) { gvlidFallback = function (params) { return params ? null : null; }; }
    return function (params) {
        var allow = true;
        var consentData = ConsentHandler_1.gdprConsentHandler.consentData;
        var modName = params['componentName'];
        if (shouldEnforce(consentData, purposeNo, modName)) {
            var gvlid = params['gvlid'] || getGvlid(params['componentType'], modName, gvlidFallback(params));
            allow = !!checkConsent(consentData, modName, gvlid);
        }
        return allow;
    };
}
function singlePurposeGdprRule(purposeNo, gvlidFallback) {
    if (gvlidFallback === void 0) { gvlidFallback = function () { return null; }; }
    return gdprRule(purposeNo, function (cd, modName, gvlid) { return !!validateRules(ACTIVE_RULES.purpose[purposeNo], cd, modName, gvlid); }, gvlidFallback);
}
function exceptCoreModules(ruleFn) {
    return function (params) {
        if (params['componentType'] === moduleTypes_1.MODULE_TYPE_CORE) {
            // TODO: this special case is for the PBS adapter (componentType is 'core')
            // we should check for generic purpose 2 consent & vendor consent based on the PBS vendor's GVL ID;
            // that is, however, a breaking change and skipped for now
            return true;
        }
        return ruleFn(params);
    };
}
var accessDeviceRule = (function (rule) {
    return function (params) {
        // for vendorless (core) storage, do not enforce rules unless strictStorageEnforcement is set
        if (params['componentType'] === moduleTypes_1.MODULE_TYPE_CORE && !strictStorageEnforcement)
            return true;
        return rule(params);
    };
})(singlePurposeGdprRule(1));
var syncUserRule = singlePurposeGdprRule(1);
var enrichEidsRule = singlePurposeGdprRule(1);
var fetchBidsRule = exceptCoreModules(singlePurposeGdprRule(2));
// export const reportAnalyticsRule = singlePurposeGdprRule(7, analyticsBlocked, (params) => getGvlidFromAnalyticsAdapter(params[ACTIVITY_PARAM_COMPONENT_NAME], params[ACTIVITY_PARAM_ANL_CONFIG]));
var ufpdRule = singlePurposeGdprRule(4);
var transmitEidsRule = exceptCoreModules((function () {
    // Transmit EID special case:
    // by default, legal basis or vendor exceptions for any purpose between 2 and 10
    // (but disregarding enforcePurpose and enforceVendor config) is enough to allow EIDs through
    function check2to10Consent(consentData, modName, gvlId) {
        var _a, _b, _c, _d;
        for (var pno = 2; pno <= 10; pno++) {
            if ((_b = (_a = ACTIVE_RULES.purpose[pno]) === null || _a === void 0 ? void 0 : _a.vendorExceptions) === null || _b === void 0 ? void 0 : _b.includes(modName)) {
                return true;
            }
            var _e = getConsent(consentData, 'purpose', pno, gvlId), purpose = _e.purpose, vendor = _e.vendor;
            if (purpose && (vendor || ((_d = (_c = ACTIVE_RULES.purpose[pno]) === null || _c === void 0 ? void 0 : _c.softVendorExceptions) === null || _d === void 0 ? void 0 : _d.includes(modName)))) {
                return true;
            }
        }
        return false;
    }
    var defaultBehavior = gdprRule('2-10', check2to10Consent);
    var p4Behavior = singlePurposeGdprRule(4);
    return function () {
        var _a;
        var args = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            args[_i] = arguments[_i];
        }
        var fn = ((_a = ACTIVE_RULES.purpose[4]) === null || _a === void 0 ? void 0 : _a.eidsRequireP4Consent) ? p4Behavior : defaultBehavior;
        return fn.apply(this, args);
    };
})());
var transmitPreciseGeoRule = gdprRule('Special Feature 1', function (cd, modName, gvlId) { return validateRules(ACTIVE_RULES.feature[1], cd, modName, gvlId); });
/**
 * A configuration function that initializes some module variables, as well as adds hooks
 * @param {Object} config - GDPR enforcement config object
 */
function setEnforcementConfig(config) {
    var rules = (0, utils_1.deepAccess)(config, 'gdpr.rules');
    if (!rules) {
        (0, log_1.logWarn)('TCF2: enforcing P1 and P2 by default');
    }
    rules = Object.fromEntries((rules || []).map(function (r) { return [r.purpose, r]; }));
    strictStorageEnforcement = !!(0, utils_1.deepAccess)(config, STRICT_STORAGE_ENFORCEMENT);
    Object.entries(CONFIGURABLE_RULES).forEach(function (_a) {
        var _b;
        var name = _a[0], opts = _a[1];
        ACTIVE_RULES[opts.type][opts.id] = (_b = rules[name]) !== null && _b !== void 0 ? _b : opts.default;
    });
}
exports.setEnforcementConfig = setEnforcementConfig;
exports.ruleFunctions = (_a = {},
    _a[activities_1.ACTIVITY_ACCESS_DEVICE] = accessDeviceRule,
    _a[activities_1.ACTIVITY_SYNC_USER] = syncUserRule,
    _a[activities_1.ACTIVITY_ENRICH_EIDS] = enrichEidsRule,
    _a[activities_1.ACTIVITY_FETCH_BIDS] = fetchBidsRule,
    _a[activities_1.ACTIVITY_ENRICH_UFPD] = ufpdRule,
    _a[activities_1.ACTIVITY_TRANSMIT_EIDS] = transmitEidsRule,
    _a[activities_1.ACTIVITY_TRANSMIT_PRECISE_GEO] = transmitPreciseGeoRule,
    _a);


/***/ }),

/***/ "./src/modules/consent/gppControl_usstates.ts":
/*!****************************************************!*\
  !*** ./src/modules/consent/gppControl_usstates.ts ***!
  \****************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.DEFAULT_SID_MAPPING = exports.NORMALIZATIONS = exports.normalizer = void 0;
var utils_1 = __webpack_require__(/*! ../../utils/utils */ "./src/utils/utils.ts");
var FIELDS = {
    Version: 0,
    Gpc: 0,
    SharingNotice: 0,
    SaleOptOutNotice: 0,
    SharingOptOutNotice: 0,
    TargetedAdvertisingOptOutNotice: 0,
    SensitiveDataProcessingOptOutNotice: 0,
    SensitiveDataLimitUseNotice: 0,
    SaleOptOut: 0,
    SharingOptOut: 0,
    TargetedAdvertisingOptOut: 0,
    SensitiveDataProcessing: 12,
    KnownChildSensitiveDataConsents: 2,
    PersonalDataConsents: 0,
    MspaCoveredTransaction: 0,
    MspaOptOutOptionMode: 0,
    MspaServiceProviderMode: 0,
};
/**
 * Generate a normalization function for converting US state strings to the usnat format.
 *
 * Scalar fields are copied over if they exist in the input (state) data, or set to null otherwise.
 * List fields are also copied, but forced to the "correct" length (by truncating or padding with nulls);
 * additionally, elements within them can be moved around using the `move` argument.
 *
 * @param {Array[String]} nullify? list of fields to force to null
 * @param {{}} move? Map from list field name to an index remapping for elements within that field (using 1 as the first index).
 *       For example, {SensitiveDataProcessing: {1: 2, 2: [1, 3]}} means "rearrange SensitiveDataProcessing by moving
 *       the first element to the second position, and the second element to both the first and third position."
 * @param {({}, {}) => void} fn? an optional function to run once all the processing described above is complete;
 *       it's passed two arguments, the original (state) data, and its normalized (usnat) version.
 * @param fields
 * @returns {function({}): {}}
 */
function normalizer(_a, fields) {
    var _b = _a.nullify, nullify = _b === void 0 ? [] : _b, _c = _a.move, move = _c === void 0 ? {} : _c, fn = _a.fn;
    if (fields === void 0) { fields = FIELDS; }
    move = Object.fromEntries(Object.entries(move).map(function (_a) {
        var k = _a[0], map = _a[1];
        return [k,
            Object.fromEntries(Object.entries(map)
                .map(function (_a) {
                var k = _a[0], v = _a[1];
                return [k, Array.isArray(v) ? v : [v]];
            })
                .map(function (_a) {
                var k = _a[0], v = _a[1];
                return [Number(k) - 1, Array.isArray(v) ? v.map(function (el) { return --el; }) : v];
            }))];
    }));
    return function (cd) {
        var norm = Object.fromEntries(Object.entries(fields)
            .map(function (_a) {
            var field = _a[0], len = _a[1];
            var val = null;
            if (len > 0) {
                val = Array(len).fill(null);
                if (Array.isArray(cd[field])) {
                    var remap_1 = move[field] || {};
                    var done_1 = [];
                    cd[field].forEach(function (el, i) {
                        var _a = Object.prototype.hasOwnProperty.call(remap_1, i) ? [remap_1[i], true] : [[i], false], dest = _a[0], moved = _a[1];
                        dest.forEach(function (d) {
                            if (d < len && !done_1.includes(d)) {
                                val[d] = el;
                                moved && done_1.push(d);
                            }
                        });
                    });
                }
            }
            else if (cd[field] != null) {
                val = Array.isArray(cd[field]) ? null : cd[field];
            }
            return [field, val];
        }));
        nullify.forEach(function (path) { return (0, utils_1.deepSetValue)(norm, path, null); });
        fn && fn(cd, norm);
        return norm;
    };
}
exports.normalizer = normalizer;
function scalarMinorsAreChildren(original, normalized) {
    normalized.KnownChildSensitiveDataConsents = original.KnownChildSensitiveDataConsents === 0 ? [0, 0] : [1, 1];
}
exports.NORMALIZATIONS = {
    // normalization rules - convert state consent into usnat consent
    // https://docs.prebid.org/features/mspa-usnat.html
    7: function (consent) { return consent; },
    8: normalizer({
        move: {
            SensitiveDataProcessing: {
                1: 9,
                2: 10,
                3: 8,
                4: [1, 2],
                5: 12,
                8: 3,
                9: 4,
            }
        },
        fn: function (original, normalized) {
            if (original.KnownChildSensitiveDataConsents.some(function (el) { return el !== 0; })) {
                normalized.KnownChildSensitiveDataConsents = [1, 1];
            }
        }
    }),
    9: normalizer({ fn: scalarMinorsAreChildren }),
    10: normalizer({ fn: scalarMinorsAreChildren }),
    11: normalizer({
        move: {
            SensitiveDataProcessing: {
                3: 4,
                4: 5,
                5: 3,
            }
        },
        fn: scalarMinorsAreChildren
    }),
    12: normalizer({
        fn: function (original, normalized) {
            var cc = original.KnownChildSensitiveDataConsents;
            var repl;
            if (!cc.some(function (el) { return el !== 0; })) {
                repl = [0, 0];
            }
            else if (cc[1] === 2 && cc[2] === 2) {
                repl = [2, 1];
            }
            else {
                repl = [1, 1];
            }
            normalized.KnownChildSensitiveDataConsents = repl;
        }
    })
};
exports.DEFAULT_SID_MAPPING = {
    8: 'usca',
    9: 'usva',
    10: 'usco',
    11: 'usut',
    12: 'usct'
};


/***/ }),

/***/ "./src/modules/consent/gvlidRegistry.ts":
/*!**********************************************!*\
  !*** ./src/modules/consent/gvlidRegistry.ts ***!
  \**********************************************/
/***/ ((__unused_webpack_module, exports) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.GDPR_GVLIDS = exports.gvlidRegistry = void 0;
function gvlidRegistry() {
    var registry = {};
    var flat = {};
    var none = {};
    return {
        /**
         * Register a module's GVL ID.
         * @param {string} moduleType defined in `moduleTypes.ts`
         * @param {string} moduleName
         * @param {number} gvlid
         */
        register: function (moduleType, moduleName, gvlid) {
            if (gvlid) {
                (registry[moduleName] = registry[moduleName] || {})[moduleType] = gvlid;
                if (Object.prototype.hasOwnProperty.call(flat, moduleName)) {
                    if (flat[moduleName] !== gvlid)
                        flat[moduleName] = none;
                }
                else {
                    flat[moduleName] = gvlid;
                }
            }
        },
        /**
         * Get a module's GVL ID(s).
         *
         * @param {string} moduleName
         * @return {{modules: {[moduleType]: number}, gvlid?: number}} an object where:
         *   `modules` is a map from module type to that module's GVL ID;
         *   `gvlid` is the single GVL ID for this family of modules (only defined
         *   if all modules with this name declared the same ID).
         */
        get: function (moduleName) {
            var result = { modules: registry[moduleName] || {}, gvlid: undefined };
            if (Object.prototype.hasOwnProperty.call(flat, moduleName) && flat[moduleName] !== none) {
                result.gvlid = flat[moduleName];
            }
            return result;
        }
    };
}
exports.gvlidRegistry = gvlidRegistry;
exports.GDPR_GVLIDS = gvlidRegistry();


/***/ }),

/***/ "./src/modules/consent/moduleTypes.ts":
/*!********************************************!*\
  !*** ./src/modules/consent/moduleTypes.ts ***!
  \********************************************/
/***/ ((__unused_webpack_module, exports) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.MODULE_TYPE_ANALYTICS = exports.MODULE_TYPE_RTD = exports.MODULE_TYPE_UID = exports.MODULE_TYPE_BIDDER = exports.MODULE_TYPE_CORE = void 0;
exports.MODULE_TYPE_CORE = 'core';
exports.MODULE_TYPE_BIDDER = 'bidder';
exports.MODULE_TYPE_UID = 'userId';
exports.MODULE_TYPE_RTD = 'rtd';
exports.MODULE_TYPE_ANALYTICS = 'analytics';


/***/ }),

/***/ "./src/utils/log.ts":
/*!**************************!*\
  !*** ./src/utils/log.ts ***!
  \**************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";

var __spreadArray = (this && this.__spreadArray) || function (to, from, pack) {
    if (pack || arguments.length === 2) for (var i = 0, l = from.length, ar; i < l; i++) {
        if (ar || !(i in from)) {
            if (!ar) ar = Array.prototype.slice.call(from, 0, i);
            ar[i] = from[i];
        }
    }
    return to.concat(ar || Array.prototype.slice.call(from));
};
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.debugTurnedOn = exports.hasConsoleLogger = exports.prefixLog = exports.logDebug = exports.logError = exports.logWarn = exports.logInfo = exports.logMessage = void 0;
var __1 = __webpack_require__(/*! .. */ "./src/index.ts");
var consoleExists = Boolean(window.console);
var consoleLogExists = Boolean(consoleExists && window.console.log);
var consoleInfoExists = Boolean(consoleExists && window.console.info);
var consoleWarnExists = Boolean(consoleExists && window.console.warn);
var consoleErrorExists = Boolean(consoleExists && window.console.error);
/**
 * Wrappers to console.(log | info | warn | error). Takes N arguments, the same as the native methods
 */
function logMessage() {
    var args = [];
    for (var _i = 0; _i < arguments.length; _i++) {
        args[_i] = arguments[_i];
    }
    if (debugTurnedOn() && consoleLogExists) {
        // eslint-disable-next-line no-console
        console.log.apply(console, decorateLog(args, 'MESSAGE:'));
    }
}
exports.logMessage = logMessage;
function logInfo() {
    var args = [];
    for (var _i = 0; _i < arguments.length; _i++) {
        args[_i] = arguments[_i];
    }
    if (debugTurnedOn() && consoleInfoExists) {
        // eslint-disable-next-line no-console
        console.info.apply(console, decorateLog(args, 'INFO:'));
    }
}
exports.logInfo = logInfo;
function logWarn() {
    var args = [];
    for (var _i = 0; _i < arguments.length; _i++) {
        args[_i] = arguments[_i];
    }
    if (debugTurnedOn() && consoleWarnExists) {
        // eslint-disable-next-line no-console
        console.warn.apply(console, decorateLog(args, 'WARNING:'));
    }
    // emitEvent(CONSTANTS.EVENTS.AUCTION_DEBUG, {type: 'WARNING', arguments: args});
}
exports.logWarn = logWarn;
function logError() {
    var args = [];
    for (var _i = 0; _i < arguments.length; _i++) {
        args[_i] = arguments[_i];
    }
    if (debugTurnedOn() && consoleErrorExists) {
        // eslint-disable-next-line no-console
        console.error.apply(console, decorateLog(args, 'ERROR:'));
    }
    // emitEvent(CONSTANTS.EVENTS.AUCTION_DEBUG, {type: 'ERROR', arguments: args});
}
exports.logError = logError;
function logDebug() {
    var args = [];
    for (var _i = 0; _i < arguments.length; _i++) {
        args[_i] = arguments[_i];
    }
    if (debugTurnedOn() && consoleWarnExists) {
        // eslint-disable-next-line no-console
        console.warn.apply(console, decorateLog(args, 'DEBUG:'));
    }
    // emitEvent(CONSTANTS.EVENTS.AUCTION_DEBUG, {type: 'ERROR', arguments: args});
}
exports.logDebug = logDebug;
function prefixLog(prefix) {
    function decorate(fn) {
        return function () {
            var args = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                args[_i] = arguments[_i];
            }
            fn.apply(void 0, __spreadArray([prefix], args, false));
        };
    }
    return {
        logError: decorate(logError),
        logWarn: decorate(logWarn),
        logMessage: decorate(logMessage),
        logInfo: decorate(logInfo),
    };
}
exports.prefixLog = prefixLog;
function decorateLog(args, prefix) {
    args = [].slice.call(args);
    // let bidder = config.getCurrentBidder() || ;
    var bidder = "";
    prefix && args.unshift(prefix);
    if (bidder) {
        args.unshift(label('#aaa'));
    }
    args.unshift(label('#3b88c3'));
    args.unshift('%cBigCrunch' + (bidder ? "%c".concat(bidder) : ''));
    return args;
    function label(color) {
        return "display: inline-block; color: #fff; background: ".concat(color, "; padding: 1px 4px; border-radius: 3px;");
    }
}
function hasConsoleLogger() {
    return consoleLogExists;
}
exports.hasConsoleLogger = hasConsoleLogger;
function debugTurnedOn() {
    var _a;
    // check url search params
    if ((_a = __1.globalSettings === null || __1.globalSettings === void 0 ? void 0 : __1.globalSettings.test) === null || _a === void 0 ? void 0 : _a.enabled) {
        return true;
    }
    return false;
}
exports.debugTurnedOn = debugTurnedOn;


/***/ }),

/***/ "./src/utils/utils.ts":
/*!****************************!*\
  !*** ./src/utils/utils.ts ***!
  \****************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";

var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (g && (g = 0, op[0] && (_ = 0)), _) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
var __spreadArray = (this && this.__spreadArray) || function (to, from, pack) {
    if (pack || arguments.length === 2) for (var i = 0, l = from.length, ar; i < l; i++) {
        if (ar || !(i in from)) {
            if (!ar) ar = Array.prototype.slice.call(from, 0, i);
            ar[i] = from[i];
        }
    }
    return to.concat(ar || Array.prototype.slice.call(from));
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.escapeRegExp = exports.truncateString = exports.validateValue = exports.getISOTimestamp = exports.getUniqueIdentifierStr = exports.triggerPixel = exports.createTrackPixelIframeHtml = exports.insertUserSyncIframe = exports.insertHtmlIntoIframe = exports.createInvisibleIframe = exports.waitForElementToLoad = exports.insertElement = exports.deepCopy = exports.insertStyleSheet = exports.normalizeObjectKeys = exports.normalizeString = exports.fetchWithTimeout = exports.generateRandomString = exports.isEmptyStr = exports.isEmpty = exports.isBoolean = exports.isPlainObject = exports.isNumber = exports.isArray = exports.isStr = exports.isFn = exports.isA = exports.deepAccess = exports.mergeDeep = exports.deepEqual = exports.getBrowserLanguage = exports.getDNT = exports.getPageHeight = exports.getPageWidth = exports.getURLSearchParam = exports.getDomain = exports.getReferrer = exports.getURL = exports.parseURL = exports.getDeviceType = exports.getUserAgent = exports.generateUUID = exports.deepMerge = exports.deepSetValue = void 0;
var uuid_1 = __webpack_require__(/*! uuid */ "./node_modules/uuid/dist/commonjs-browser/index.js");
var deepmerge_1 = __importDefault(__webpack_require__(/*! deepmerge */ "./node_modules/deepmerge/dist/cjs.js"));
exports.deepMerge = deepmerge_1.default;
var ua_parser_js_1 = __webpack_require__(/*! ua-parser-js */ "./node_modules/ua-parser-js/src/ua-parser.js");
var dset_1 = __webpack_require__(/*! dset */ "./node_modules/dset/dist/index.js");
Object.defineProperty(exports, "deepSetValue", ({ enumerable: true, get: function () { return dset_1.dset; } }));
var device_type;
function generateUUID() {
    return (0, uuid_1.v4)();
}
exports.generateUUID = generateUUID;
/**
 * Function to get User Agent
 */
function getUserAgent() {
    return navigator.userAgent || '';
}
exports.getUserAgent = getUserAgent;
function getDeviceType() {
    if (!device_type) {
        var ua = new ua_parser_js_1.UAParser(getUserAgent());
        device_type = ua.getDevice().type || 'desktop';
    }
    return device_type;
}
exports.getDeviceType = getDeviceType;
/**
 * @param {string} url
 * @returns {URL | undefined}
 * @description Parse URL string into URL object
 */
function parseURL(url) {
    var parsedURL;
    if (url) {
        parsedURL = new URL(url);
    }
    return parsedURL;
}
exports.parseURL = parseURL;
/**
 *
 * @returns {URL | undefined}
 * @description Get URL object from window.location.href
 */
function getURL() {
    return parseURL(window.location.href);
}
exports.getURL = getURL;
/**
 *
 * @returns {URL | undefined}
 * @description Get URL object from document.referrer
 */
function getReferrer() {
    return parseURL(document.referrer);
}
exports.getReferrer = getReferrer;
/**
 *
 * @returns {string | undefined}
 * @description Get domain from window.location.href
 */
function getDomain() {
    var url = getURL();
    if (url) {
        return url.hostname;
    }
}
exports.getDomain = getDomain;
/**
 *
 * @returns {string | undefined}
 * @description Get domain from document.referrer
 */
function getURLSearchParam(param) {
    var url = getURL();
    if (url) {
        return url.searchParams.get(param) || undefined;
    }
}
exports.getURLSearchParam = getURLSearchParam;
/**
 *
 * @returns {string | undefined}
 * @description Get domain from document.referrer
 */
function getPageWidth() {
    return window.innerWidth;
}
exports.getPageWidth = getPageWidth;
/**
 *
 * @returns {string | undefined}
 * @description Get domain from document.referrer
 */
function getPageHeight() {
    return window.innerHeight;
}
exports.getPageHeight = getPageHeight;
/**
 * Function to get DNT
 */
function getDNT() {
    return navigator.doNotTrack || 0;
}
exports.getDNT = getDNT;
/**
 * Browser language using ISO-639-1-alpha-2
 * @returns {string | undefined}
 * @description Get browser language
 * @see https://www.w3schools.com/tags/ref_language_codes.asp
 * @see https://www.metamodpro.com/browser-language-codes
 */
function getBrowserLanguage() {
    try {
        return (navigator.language || '').split('-')[0];
    }
    catch (e) {
        return '';
    }
}
exports.getBrowserLanguage = getBrowserLanguage;
/**
 * This function deeply compares two objects checking for their equivalence.
 * @param {Object} obj1
 * @param {Object} obj2
 * @param checkTypes {boolean} if set, two objects with identical properties but different constructors will *not*
 * be considered equivalent.
 * @returns {boolean}
 */
function deepEqual(obj1, obj2, _a) {
    var _b = _a === void 0 ? {} : _a, _c = _b.checkTypes, checkTypes = _c === void 0 ? false : _c;
    if (obj1 === obj2)
        return true;
    else if ((typeof obj1 === 'object' && obj1 !== null) &&
        (typeof obj2 === 'object' && obj2 !== null) &&
        (!checkTypes || (obj1.constructor === obj2.constructor))) {
        if (Object.keys(obj1).length !== Object.keys(obj2).length)
            return false;
        for (var prop in obj1) {
            if (Object.prototype.hasOwnProperty.call(obj2, prop)) {
                if (!deepEqual(obj1[prop], obj2[prop], { checkTypes: checkTypes })) {
                    return false;
                }
            }
            else {
                return false;
            }
        }
        return true;
    }
    else {
        return false;
    }
}
exports.deepEqual = deepEqual;
function mergeDeep(target) {
    var sources = [];
    for (var _i = 1; _i < arguments.length; _i++) {
        sources[_i - 1] = arguments[_i];
    }
    if (!sources.length)
        return target;
    var source = sources.shift();
    if (isPlainObject(target) && isPlainObject(source)) {
        var _loop_1 = function (key) {
            var _a, _b, _c;
            if (isPlainObject(source[key])) {
                if (!target[key])
                    Object.assign(target, (_a = {}, _a[key] = {}, _a));
                mergeDeep(target[key], source[key]);
            }
            else if ((0, exports.isArray)(source[key])) {
                if (!target[key]) {
                    Object.assign(target, (_b = {}, _b[key] = __spreadArray([], source[key], true), _b));
                }
                else if ((0, exports.isArray)(target[key])) {
                    source[key].forEach(function (obj) {
                        var addItFlag = 1;
                        for (var i = 0; i < target[key].length; i++) {
                            if (deepEqual(target[key][i], obj)) {
                                addItFlag = 0;
                                break;
                            }
                        }
                        if (addItFlag) {
                            target[key].push(obj);
                        }
                    });
                }
            }
            else {
                Object.assign(target, (_c = {}, _c[key] = source[key], _c));
            }
        };
        for (var key in source) {
            _loop_1(key);
        }
    }
    return mergeDeep.apply(void 0, __spreadArray([target], sources, false));
}
exports.mergeDeep = mergeDeep;
function deepAccess(obj, path) {
    // Split the path into an array of keys
    var keys = path.split('.');
    // Initialize a reference variable to the object
    var current = obj;
    // Iterate through the keys to access the nested properties
    for (var _i = 0, keys_1 = keys; _i < keys_1.length; _i++) {
        var key = keys_1[_i];
        if (current && typeof current === 'object' && key in current) {
            current = current[key];
        }
        else {
            // Return undefined if the key doesn't exist or the object is not valid
            return undefined;
        }
    }
    return current;
}
exports.deepAccess = deepAccess;
var tStr = 'String';
var tFn = 'Function';
var tNumb = 'Number';
var tObject = 'Object';
var tBoolean = 'Boolean';
var toString = Object.prototype.toString;
/**
 * Return if the object is of the
 * given type.
 * @param {*} object to test
 * @param {String} _t type string (e.g., Array)
 * @return {Boolean} if object is of type _t
 */
function isA(object, _t) {
    return toString.call(object) === '[object ' + _t + ']';
}
exports.isA = isA;
function isFn(object) {
    return isA(object, tFn);
}
exports.isFn = isFn;
function isStr(object) {
    return isA(object, tStr);
}
exports.isStr = isStr;
exports.isArray = Array.isArray.bind(Array);
function isNumber(object) {
    return isA(object, tNumb);
}
exports.isNumber = isNumber;
function isPlainObject(object) {
    return isA(object, tObject);
}
exports.isPlainObject = isPlainObject;
function isBoolean(object) {
    return isA(object, tBoolean);
}
exports.isBoolean = isBoolean;
/**
 * Return if the object is "empty";
 * this includes falsey, no keys, or no items at indices
 * @param {*} object object to test
 * @return {Boolean} if object is empty
 */
function isEmpty(object) {
    if (!object)
        return true;
    if ((0, exports.isArray)(object) || isStr(object)) {
        return !(object.length > 0);
    }
    return Object.keys(object).length <= 0;
}
exports.isEmpty = isEmpty;
/**
 * Return if string is empty, null, or undefined
 * @param str string to test
 * @returns {boolean} if string is empty
 */
function isEmptyStr(str) {
    return isStr(str) && (!str || str.length === 0);
}
exports.isEmptyStr = isEmptyStr;
/**
 * Return if object is empty, null, or undefined
 * @param obj object to test
 * @returns {boolean} if object is empty
 */
function generateRandomString(length) {
    var text = '';
    var possible = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789';
    for (var i = 0; i < length; i++) {
        text += possible.charAt(Math.floor(Math.random() * possible.length));
    }
    return text;
}
exports.generateRandomString = generateRandomString;
/**
 *
 * @param url
 * @param timeout
 * @param options
 * @returns FetchResponse
 * @description Fetch with timeout
 */
function fetchWithTimeout(url, timeout, options) {
    if (timeout === void 0) { timeout = 2000; }
    if (options === void 0) { options = {}; }
    return __awaiter(this, void 0, void 0, function () {
        var controller, id, response;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0:
                    controller = new AbortController();
                    id = setTimeout(function () {
                        controller.abort();
                        throw new Error('Timeout');
                    }, timeout);
                    return [4 /*yield*/, fetch(url, __assign(__assign({}, options), { signal: controller.signal }))];
                case 1:
                    response = _a.sent();
                    clearTimeout(id);
                    return [2 /*return*/, response];
            }
        });
    });
}
exports.fetchWithTimeout = fetchWithTimeout;
function normalizeString(input) {
    // Use a regular expression to remove characters that are not underscores, lowercase letters, or digits
    var normalized = input.replace(/[^A-Za-z0-9_]/g, '');
    // Convert the result to lowercase
    var lowercaseNormalized = normalized.toLowerCase();
    return lowercaseNormalized;
}
exports.normalizeString = normalizeString;
function normalizeObjectKeys(obj) {
    var normalizedObj = {};
    for (var key in obj) {
        if (Object.prototype.hasOwnProperty.call(obj, key)) {
            var normalizedKey = key.toLowerCase();
            normalizedObj[normalizedKey] = obj[key];
        }
    }
    return normalizedObj;
}
exports.normalizeObjectKeys = normalizeObjectKeys;
function insertStyleSheet(css) {
    var style = document.createElement('style');
    style.type = 'text/css';
    style.appendChild(document.createTextNode(css));
    document.head.appendChild(style);
}
exports.insertStyleSheet = insertStyleSheet;
function deepCopy(obj) {
    return JSON.parse(JSON.stringify(obj));
}
exports.deepCopy = deepCopy;
/*
* Inserts an element(elm) as targets child, by default as first child
* @param {HTMLElement} elm
* @param {HTMLElement} [doc]
* @param {HTMLElement} [target]
* @param {Boolean} [asLastChildChild]
* @return {HTML Element}
*/
function insertElement(elm, doc, target, asLastChildChild) {
    doc = doc || document;
    var parentEl;
    if (target) {
        parentEl = doc.getElementsByTagName(target);
    }
    else {
        parentEl = doc.getElementsByTagName('head');
    }
    try {
        parentEl = parentEl.length ? parentEl : doc.getElementsByTagName('body');
        if (parentEl.length) {
            parentEl = parentEl[0];
            var insertBeforeEl = asLastChildChild ? null : parentEl.firstChild;
            return parentEl.insertBefore(elm, insertBeforeEl);
        }
    }
    catch (e) {
        console.error('Error inserting element', e);
    }
}
exports.insertElement = insertElement;
/**
 * Returns a promise that completes when the given element triggers a 'load' or 'error' DOM event, or when
 * `timeout` milliseconds have elapsed.
 *
 * @param {HTMLElement} element
 * @param {Number} [timeout]
 * @returns {Promise}
 */
function waitForElementToLoad(element, timeout) {
    var timer = null;
    return new Promise(function (resolve) {
        var onLoad = function () {
            element.removeEventListener('load', onLoad);
            element.removeEventListener('error', onLoad);
            if (timer != null) {
                window.clearTimeout(timer);
            }
            resolve();
        };
        element.addEventListener('load', onLoad);
        element.addEventListener('error', onLoad);
        if (timeout != null) {
            timer = window.setTimeout(onLoad, timeout);
        }
    });
}
exports.waitForElementToLoad = waitForElementToLoad;
function createInvisibleIframe() {
    var f = document.createElement('iframe');
    f.id = getUniqueIdentifierStr();
    f.height = '0';
    f.width = '0';
    // f.border = '0px';
    // f.hspace = '0';
    // f.vspace = '0';
    f.marginWidth = '0';
    f.marginHeight = '0';
    f.style.border = '0';
    f.scrolling = 'no';
    f.frameBorder = '0';
    f.src = 'about:blank';
    f.style.display = 'none';
    f.style.height = '0px';
    f.style.width = '0px';
    // f.allowtransparency = 'true';
    return f;
}
exports.createInvisibleIframe = createInvisibleIframe;
/**
 * Inserts an empty iframe with the specified `html`, primarily used for tracking purposes
 * (though could be for other purposes)
 * @param {string} htmlCode snippet of HTML code used for tracking purposes
 */
function insertHtmlIntoIframe(htmlCode) {
    if (!htmlCode) {
        return;
    }
    var iframe = createInvisibleIframe();
    insertElement(iframe, document, 'body', false);
    (function (doc) {
        doc.open();
        doc.write(htmlCode);
        doc.close();
    })(iframe.contentWindow.document);
}
exports.insertHtmlIntoIframe = insertHtmlIntoIframe;
/**
 * Inserts empty iframe with the specified `url` for cookie sync
 * @param  {string} url URL to be requested
 * @param  {string} encodeUri boolean if URL should be encoded before inserted. Defaults to true
 * @param  {function} [done] an optional exit callback, used when this usersync pixel is added during an async process
 * @param  {Number} [timeout] an optional timeout in milliseconds for the iframe to load before calling `done`
 */
function insertUserSyncIframe(url, done, timeout) {
    var iframeHtml = createTrackPixelIframeHtml(url, false, 'allow-scripts allow-same-origin');
    var div = document.createElement('div');
    div.innerHTML = iframeHtml;
    var iframe = div.firstChild;
    if (done && isFn(done)) {
        waitForElementToLoad(iframe, timeout).then(done);
    }
    insertElement(iframe, document, 'html', true);
}
exports.insertUserSyncIframe = insertUserSyncIframe;
/**
 * Creates a snippet of Iframe HTML that retrieves the specified `url`
 * @param  {string} url plain URL to be requested
 * @param  {string} encodeUri boolean if URL should be encoded before inserted. Defaults to true
 * @param  {string} sandbox string if provided the sandbox attribute will be included with the given value
 * @return {string}     HTML snippet that contains the iframe src = set to `url`
 */
function createTrackPixelIframeHtml(url, encodeUri, sandbox) {
    if (encodeUri === void 0) { encodeUri = true; }
    if (sandbox === void 0) { sandbox = ''; }
    if (!url) {
        return '';
    }
    if (encodeUri) {
        url = encodeURI(url);
    }
    if (sandbox) {
        sandbox = "sandbox=\"".concat(sandbox, "\"");
    }
    return "<iframe ".concat(sandbox, " id=\"").concat(getUniqueIdentifierStr(), "\"\n        frameborder=\"0\"\n        allowtransparency=\"true\"\n        marginheight=\"0\" marginwidth=\"0\"\n        width=\"0\" hspace=\"0\" vspace=\"0\" height=\"0\"\n        style=\"height:0px;width:0px;display:none;\"\n        scrolling=\"no\"\n        src=\"").concat(url, "\">\n        </iframe>");
}
exports.createTrackPixelIframeHtml = createTrackPixelIframeHtml;
/**
 * Inserts an image pixel with the specified `url` for cookie sync
 * @param {string} url URL string of the image pixel to load
 * @param  {function} [done] an optional exit callback, used when this usersync pixel is added during an async process
 * @param  {Number} [timeout] an optional timeout in milliseconds for the image to load before calling `done`
 */
function triggerPixel(url, done, timeout) {
    var img = new Image();
    if (done && isFn(done)) {
        waitForElementToLoad(img, timeout).then(done);
    }
    img.src = url;
}
exports.triggerPixel = triggerPixel;
/* utility method to get incremental integer starting from 1 */
var getIncrementalInteger = (function () {
    var count = 0;
    return function () {
        count++;
        return count;
    };
})();
// generate a random string (to be used as a dynamic JSONP callback)
function getUniqueIdentifierStr() {
    return getIncrementalInteger() + Math.random().toString(16).substr(2);
}
exports.getUniqueIdentifierStr = getUniqueIdentifierStr;
// Get current timestamp in utc in ISO 8601 format
function getISOTimestamp() {
    var date = new Date();
    return date.toISOString();
}
exports.getISOTimestamp = getISOTimestamp;
function validateValue(value, data_type, default_value, max) {
    if (data_type === 'string') {
        value = isStr(String(value)) && typeof value !== 'undefined' && value !== null ? String(value) : default_value;
        if (value && value.length > max) {
            value = truncateString(value, max);
        }
        if (value.length === 0) {
            value = default_value;
        }
    }
    else if (data_type === 'number') {
        value = isNumber(Number(value)) ? Number(value) : default_value;
        if (value > max) {
            value = max;
        }
    }
    else if (data_type === 'boolean') {
        value = isBoolean(Boolean(value)) ? Boolean(value) : default_value;
    }
    return value;
}
exports.validateValue = validateValue;
function truncateString(inputString, maxLength) {
    if (inputString.length > maxLength) {
        return inputString.substring(0, maxLength);
    }
    return inputString;
}
exports.truncateString = truncateString;
function escapeRegExp(str) {
    return str.replace(/[.*+?^${}()|[\]\\]/g, '\\$&');
}
exports.escapeRegExp = escapeRegExp;


/***/ }),

/***/ "./node_modules/ua-parser-js/src/ua-parser.js":
/*!****************************************************!*\
  !*** ./node_modules/ua-parser-js/src/ua-parser.js ***!
  \****************************************************/
/***/ (function(module, exports, __webpack_require__) {

var __WEBPACK_AMD_DEFINE_RESULT__;/////////////////////////////////////////////////////////////////////////////////
/* UAParser.js v1.0.36
   Copyright © 2012-2021 Faisal Salman <f@faisalman.com>
   MIT License *//*
   Detect Browser, Engine, OS, CPU, and Device type/model from User-Agent data.
   Supports browser & node.js environment. 
   Demo   : https://faisalman.github.io/ua-parser-js
   Source : https://github.com/faisalman/ua-parser-js */
/////////////////////////////////////////////////////////////////////////////////

(function (window, undefined) {

    'use strict';

    //////////////
    // Constants
    /////////////


    var LIBVERSION  = '1.0.36',
        EMPTY       = '',
        UNKNOWN     = '?',
        FUNC_TYPE   = 'function',
        UNDEF_TYPE  = 'undefined',
        OBJ_TYPE    = 'object',
        STR_TYPE    = 'string',
        MAJOR       = 'major',
        MODEL       = 'model',
        NAME        = 'name',
        TYPE        = 'type',
        VENDOR      = 'vendor',
        VERSION     = 'version',
        ARCHITECTURE= 'architecture',
        CONSOLE     = 'console',
        MOBILE      = 'mobile',
        TABLET      = 'tablet',
        SMARTTV     = 'smarttv',
        WEARABLE    = 'wearable',
        EMBEDDED    = 'embedded',
        UA_MAX_LENGTH = 350;

    var AMAZON  = 'Amazon',
        APPLE   = 'Apple',
        ASUS    = 'ASUS',
        BLACKBERRY = 'BlackBerry',
        BROWSER = 'Browser',
        CHROME  = 'Chrome',
        EDGE    = 'Edge',
        FIREFOX = 'Firefox',
        GOOGLE  = 'Google',
        HUAWEI  = 'Huawei',
        LG      = 'LG',
        MICROSOFT = 'Microsoft',
        MOTOROLA  = 'Motorola',
        OPERA   = 'Opera',
        SAMSUNG = 'Samsung',
        SHARP   = 'Sharp',
        SONY    = 'Sony',
        VIERA   = 'Viera',
        XIAOMI  = 'Xiaomi',
        ZEBRA   = 'Zebra',
        FACEBOOK    = 'Facebook',
        CHROMIUM_OS = 'Chromium OS',
        MAC_OS  = 'Mac OS';

    ///////////
    // Helper
    //////////

    var extend = function (regexes, extensions) {
            var mergedRegexes = {};
            for (var i in regexes) {
                if (extensions[i] && extensions[i].length % 2 === 0) {
                    mergedRegexes[i] = extensions[i].concat(regexes[i]);
                } else {
                    mergedRegexes[i] = regexes[i];
                }
            }
            return mergedRegexes;
        },
        enumerize = function (arr) {
            var enums = {};
            for (var i=0; i<arr.length; i++) {
                enums[arr[i].toUpperCase()] = arr[i];
            }
            return enums;
        },
        has = function (str1, str2) {
            return typeof str1 === STR_TYPE ? lowerize(str2).indexOf(lowerize(str1)) !== -1 : false;
        },
        lowerize = function (str) {
            return str.toLowerCase();
        },
        majorize = function (version) {
            return typeof(version) === STR_TYPE ? version.replace(/[^\d\.]/g, EMPTY).split('.')[0] : undefined;
        },
        trim = function (str, len) {
            if (typeof(str) === STR_TYPE) {
                str = str.replace(/^\s\s*/, EMPTY);
                return typeof(len) === UNDEF_TYPE ? str : str.substring(0, UA_MAX_LENGTH);
            }
    };

    ///////////////
    // Map helper
    //////////////

    var rgxMapper = function (ua, arrays) {

            var i = 0, j, k, p, q, matches, match;

            // loop through all regexes maps
            while (i < arrays.length && !matches) {

                var regex = arrays[i],       // even sequence (0,2,4,..)
                    props = arrays[i + 1];   // odd sequence (1,3,5,..)
                j = k = 0;

                // try matching uastring with regexes
                while (j < regex.length && !matches) {

                    if (!regex[j]) { break; }
                    matches = regex[j++].exec(ua);

                    if (!!matches) {
                        for (p = 0; p < props.length; p++) {
                            match = matches[++k];
                            q = props[p];
                            // check if given property is actually array
                            if (typeof q === OBJ_TYPE && q.length > 0) {
                                if (q.length === 2) {
                                    if (typeof q[1] == FUNC_TYPE) {
                                        // assign modified match
                                        this[q[0]] = q[1].call(this, match);
                                    } else {
                                        // assign given value, ignore regex match
                                        this[q[0]] = q[1];
                                    }
                                } else if (q.length === 3) {
                                    // check whether function or regex
                                    if (typeof q[1] === FUNC_TYPE && !(q[1].exec && q[1].test)) {
                                        // call function (usually string mapper)
                                        this[q[0]] = match ? q[1].call(this, match, q[2]) : undefined;
                                    } else {
                                        // sanitize match using given regex
                                        this[q[0]] = match ? match.replace(q[1], q[2]) : undefined;
                                    }
                                } else if (q.length === 4) {
                                        this[q[0]] = match ? q[3].call(this, match.replace(q[1], q[2])) : undefined;
                                }
                            } else {
                                this[q] = match ? match : undefined;
                            }
                        }
                    }
                }
                i += 2;
            }
        },

        strMapper = function (str, map) {

            for (var i in map) {
                // check if current value is array
                if (typeof map[i] === OBJ_TYPE && map[i].length > 0) {
                    for (var j = 0; j < map[i].length; j++) {
                        if (has(map[i][j], str)) {
                            return (i === UNKNOWN) ? undefined : i;
                        }
                    }
                } else if (has(map[i], str)) {
                    return (i === UNKNOWN) ? undefined : i;
                }
            }
            return str;
    };

    ///////////////
    // String map
    //////////////

    // Safari < 3.0
    var oldSafariMap = {
            '1.0'   : '/8',
            '1.2'   : '/1',
            '1.3'   : '/3',
            '2.0'   : '/412',
            '2.0.2' : '/416',
            '2.0.3' : '/417',
            '2.0.4' : '/419',
            '?'     : '/'
        },
        windowsVersionMap = {
            'ME'        : '4.90',
            'NT 3.11'   : 'NT3.51',
            'NT 4.0'    : 'NT4.0',
            '2000'      : 'NT 5.0',
            'XP'        : ['NT 5.1', 'NT 5.2'],
            'Vista'     : 'NT 6.0',
            '7'         : 'NT 6.1',
            '8'         : 'NT 6.2',
            '8.1'       : 'NT 6.3',
            '10'        : ['NT 6.4', 'NT 10.0'],
            'RT'        : 'ARM'
    };

    //////////////
    // Regex map
    /////////////

    var regexes = {

        browser : [[

            /\b(?:crmo|crios)\/([\w\.]+)/i                                      // Chrome for Android/iOS
            ], [VERSION, [NAME, 'Chrome']], [
            /edg(?:e|ios|a)?\/([\w\.]+)/i                                       // Microsoft Edge
            ], [VERSION, [NAME, 'Edge']], [

            // Presto based
            /(opera mini)\/([-\w\.]+)/i,                                        // Opera Mini
            /(opera [mobiletab]{3,6})\b.+version\/([-\w\.]+)/i,                 // Opera Mobi/Tablet
            /(opera)(?:.+version\/|[\/ ]+)([\w\.]+)/i                           // Opera
            ], [NAME, VERSION], [
            /opios[\/ ]+([\w\.]+)/i                                             // Opera mini on iphone >= 8.0
            ], [VERSION, [NAME, OPERA+' Mini']], [
            /\bopr\/([\w\.]+)/i                                                 // Opera Webkit
            ], [VERSION, [NAME, OPERA]], [

            // Mixed
            /(kindle)\/([\w\.]+)/i,                                             // Kindle
            /(lunascape|maxthon|netfront|jasmine|blazer)[\/ ]?([\w\.]*)/i,      // Lunascape/Maxthon/Netfront/Jasmine/Blazer
            // Trident based
            /(avant |iemobile|slim)(?:browser)?[\/ ]?([\w\.]*)/i,               // Avant/IEMobile/SlimBrowser
            /(ba?idubrowser)[\/ ]?([\w\.]+)/i,                                  // Baidu Browser
            /(?:ms|\()(ie) ([\w\.]+)/i,                                         // Internet Explorer

            // Webkit/KHTML based                                               // Flock/RockMelt/Midori/Epiphany/Silk/Skyfire/Bolt/Iron/Iridium/PhantomJS/Bowser/QupZilla/Falkon
            /(flock|rockmelt|midori|epiphany|silk|skyfire|bolt|iron|vivaldi|iridium|phantomjs|bowser|quark|qupzilla|falkon|rekonq|puffin|brave|whale(?!.+naver)|qqbrowserlite|qq|duckduckgo)\/([-\w\.]+)/i,
                                                                                // Rekonq/Puffin/Brave/Whale/QQBrowserLite/QQ, aka ShouQ
            /(heytap|ovi)browser\/([\d\.]+)/i,                                  // Heytap/Ovi
            /(weibo)__([\d\.]+)/i                                               // Weibo
            ], [NAME, VERSION], [
            /(?:\buc? ?browser|(?:juc.+)ucweb)[\/ ]?([\w\.]+)/i                 // UCBrowser
            ], [VERSION, [NAME, 'UC'+BROWSER]], [
            /microm.+\bqbcore\/([\w\.]+)/i,                                     // WeChat Desktop for Windows Built-in Browser
            /\bqbcore\/([\w\.]+).+microm/i
            ], [VERSION, [NAME, 'WeChat(Win) Desktop']], [
            /micromessenger\/([\w\.]+)/i                                        // WeChat
            ], [VERSION, [NAME, 'WeChat']], [
            /konqueror\/([\w\.]+)/i                                             // Konqueror
            ], [VERSION, [NAME, 'Konqueror']], [
            /trident.+rv[: ]([\w\.]{1,9})\b.+like gecko/i                       // IE11
            ], [VERSION, [NAME, 'IE']], [
            /ya(?:search)?browser\/([\w\.]+)/i                                  // Yandex
            ], [VERSION, [NAME, 'Yandex']], [
            /(avast|avg)\/([\w\.]+)/i                                           // Avast/AVG Secure Browser
            ], [[NAME, /(.+)/, '$1 Secure '+BROWSER], VERSION], [
            /\bfocus\/([\w\.]+)/i                                               // Firefox Focus
            ], [VERSION, [NAME, FIREFOX+' Focus']], [
            /\bopt\/([\w\.]+)/i                                                 // Opera Touch
            ], [VERSION, [NAME, OPERA+' Touch']], [
            /coc_coc\w+\/([\w\.]+)/i                                            // Coc Coc Browser
            ], [VERSION, [NAME, 'Coc Coc']], [
            /dolfin\/([\w\.]+)/i                                                // Dolphin
            ], [VERSION, [NAME, 'Dolphin']], [
            /coast\/([\w\.]+)/i                                                 // Opera Coast
            ], [VERSION, [NAME, OPERA+' Coast']], [
            /miuibrowser\/([\w\.]+)/i                                           // MIUI Browser
            ], [VERSION, [NAME, 'MIUI '+BROWSER]], [
            /fxios\/([-\w\.]+)/i                                                // Firefox for iOS
            ], [VERSION, [NAME, FIREFOX]], [
            /\bqihu|(qi?ho?o?|360)browser/i                                     // 360
            ], [[NAME, '360 '+BROWSER]], [
            /(oculus|samsung|sailfish|huawei)browser\/([\w\.]+)/i
            ], [[NAME, /(.+)/, '$1 '+BROWSER], VERSION], [                      // Oculus/Samsung/Sailfish/Huawei Browser
            /(comodo_dragon)\/([\w\.]+)/i                                       // Comodo Dragon
            ], [[NAME, /_/g, ' '], VERSION], [
            /(electron)\/([\w\.]+) safari/i,                                    // Electron-based App
            /(tesla)(?: qtcarbrowser|\/(20\d\d\.[-\w\.]+))/i,                   // Tesla
            /m?(qqbrowser|baiduboxapp|2345Explorer)[\/ ]?([\w\.]+)/i            // QQBrowser/Baidu App/2345 Browser
            ], [NAME, VERSION], [
            /(metasr)[\/ ]?([\w\.]+)/i,                                         // SouGouBrowser
            /(lbbrowser)/i,                                                     // LieBao Browser
            /\[(linkedin)app\]/i                                                // LinkedIn App for iOS & Android
            ], [NAME], [

            // WebView
            /((?:fban\/fbios|fb_iab\/fb4a)(?!.+fbav)|;fbav\/([\w\.]+);)/i       // Facebook App for iOS & Android
            ], [[NAME, FACEBOOK], VERSION], [
            /(kakao(?:talk|story))[\/ ]([\w\.]+)/i,                             // Kakao App
            /(naver)\(.*?(\d+\.[\w\.]+).*\)/i,                                  // Naver InApp
            /safari (line)\/([\w\.]+)/i,                                        // Line App for iOS
            /\b(line)\/([\w\.]+)\/iab/i,                                        // Line App for Android
            /(chromium|instagram|snapchat)[\/ ]([-\w\.]+)/i                     // Chromium/Instagram/Snapchat
            ], [NAME, VERSION], [
            /\bgsa\/([\w\.]+) .*safari\//i                                      // Google Search Appliance on iOS
            ], [VERSION, [NAME, 'GSA']], [
            /musical_ly(?:.+app_?version\/|_)([\w\.]+)/i                        // TikTok
            ], [VERSION, [NAME, 'TikTok']], [

            /headlesschrome(?:\/([\w\.]+)| )/i                                  // Chrome Headless
            ], [VERSION, [NAME, CHROME+' Headless']], [

            / wv\).+(chrome)\/([\w\.]+)/i                                       // Chrome WebView
            ], [[NAME, CHROME+' WebView'], VERSION], [

            /droid.+ version\/([\w\.]+)\b.+(?:mobile safari|safari)/i           // Android Browser
            ], [VERSION, [NAME, 'Android '+BROWSER]], [

            /(chrome|omniweb|arora|[tizenoka]{5} ?browser)\/v?([\w\.]+)/i       // Chrome/OmniWeb/Arora/Tizen/Nokia
            ], [NAME, VERSION], [

            /version\/([\w\.\,]+) .*mobile\/\w+ (safari)/i                      // Mobile Safari
            ], [VERSION, [NAME, 'Mobile Safari']], [
            /version\/([\w(\.|\,)]+) .*(mobile ?safari|safari)/i                // Safari & Safari Mobile
            ], [VERSION, NAME], [
            /webkit.+?(mobile ?safari|safari)(\/[\w\.]+)/i                      // Safari < 3.0
            ], [NAME, [VERSION, strMapper, oldSafariMap]], [

            /(webkit|khtml)\/([\w\.]+)/i
            ], [NAME, VERSION], [

            // Gecko based
            /(navigator|netscape\d?)\/([-\w\.]+)/i                              // Netscape
            ], [[NAME, 'Netscape'], VERSION], [
            /mobile vr; rv:([\w\.]+)\).+firefox/i                               // Firefox Reality
            ], [VERSION, [NAME, FIREFOX+' Reality']], [
            /ekiohf.+(flow)\/([\w\.]+)/i,                                       // Flow
            /(swiftfox)/i,                                                      // Swiftfox
            /(icedragon|iceweasel|camino|chimera|fennec|maemo browser|minimo|conkeror|klar)[\/ ]?([\w\.\+]+)/i,
                                                                                // IceDragon/Iceweasel/Camino/Chimera/Fennec/Maemo/Minimo/Conkeror/Klar
            /(seamonkey|k-meleon|icecat|iceape|firebird|phoenix|palemoon|basilisk|waterfox)\/([-\w\.]+)$/i,
                                                                                // Firefox/SeaMonkey/K-Meleon/IceCat/IceApe/Firebird/Phoenix
            /(firefox)\/([\w\.]+)/i,                                            // Other Firefox-based
            /(mozilla)\/([\w\.]+) .+rv\:.+gecko\/\d+/i,                         // Mozilla

            // Other
            /(polaris|lynx|dillo|icab|doris|amaya|w3m|netsurf|sleipnir|obigo|mosaic|(?:go|ice|up)[\. ]?browser)[-\/ ]?v?([\w\.]+)/i,
                                                                                // Polaris/Lynx/Dillo/iCab/Doris/Amaya/w3m/NetSurf/Sleipnir/Obigo/Mosaic/Go/ICE/UP.Browser
            /(links) \(([\w\.]+)/i,                                             // Links
            /panasonic;(viera)/i                                                // Panasonic Viera
            ], [NAME, VERSION], [
            
            /(cobalt)\/([\w\.]+)/i                                              // Cobalt
            ], [NAME, [VERSION, /master.|lts./, ""]]
        ],

        cpu : [[

            /(?:(amd|x(?:(?:86|64)[-_])?|wow|win)64)[;\)]/i                     // AMD64 (x64)
            ], [[ARCHITECTURE, 'amd64']], [

            /(ia32(?=;))/i                                                      // IA32 (quicktime)
            ], [[ARCHITECTURE, lowerize]], [

            /((?:i[346]|x)86)[;\)]/i                                            // IA32 (x86)
            ], [[ARCHITECTURE, 'ia32']], [

            /\b(aarch64|arm(v?8e?l?|_?64))\b/i                                 // ARM64
            ], [[ARCHITECTURE, 'arm64']], [

            /\b(arm(?:v[67])?ht?n?[fl]p?)\b/i                                   // ARMHF
            ], [[ARCHITECTURE, 'armhf']], [

            // PocketPC mistakenly identified as PowerPC
            /windows (ce|mobile); ppc;/i
            ], [[ARCHITECTURE, 'arm']], [

            /((?:ppc|powerpc)(?:64)?)(?: mac|;|\))/i                            // PowerPC
            ], [[ARCHITECTURE, /ower/, EMPTY, lowerize]], [

            /(sun4\w)[;\)]/i                                                    // SPARC
            ], [[ARCHITECTURE, 'sparc']], [

            /((?:avr32|ia64(?=;))|68k(?=\))|\barm(?=v(?:[1-7]|[5-7]1)l?|;|eabi)|(?=atmel )avr|(?:irix|mips|sparc)(?:64)?\b|pa-risc)/i
                                                                                // IA64, 68K, ARM/64, AVR/32, IRIX/64, MIPS/64, SPARC/64, PA-RISC
            ], [[ARCHITECTURE, lowerize]]
        ],

        device : [[

            //////////////////////////
            // MOBILES & TABLETS
            /////////////////////////

            // Samsung
            /\b(sch-i[89]0\d|shw-m380s|sm-[ptx]\w{2,4}|gt-[pn]\d{2,4}|sgh-t8[56]9|nexus 10)/i
            ], [MODEL, [VENDOR, SAMSUNG], [TYPE, TABLET]], [
            /\b((?:s[cgp]h|gt|sm)-\w+|sc[g-]?[\d]+a?|galaxy nexus)/i,
            /samsung[- ]([-\w]+)/i,
            /sec-(sgh\w+)/i
            ], [MODEL, [VENDOR, SAMSUNG], [TYPE, MOBILE]], [

            // Apple
            /(?:\/|\()(ip(?:hone|od)[\w, ]*)(?:\/|;)/i                          // iPod/iPhone
            ], [MODEL, [VENDOR, APPLE], [TYPE, MOBILE]], [
            /\((ipad);[-\w\),; ]+apple/i,                                       // iPad
            /applecoremedia\/[\w\.]+ \((ipad)/i,
            /\b(ipad)\d\d?,\d\d?[;\]].+ios/i
            ], [MODEL, [VENDOR, APPLE], [TYPE, TABLET]], [
            /(macintosh);/i
            ], [MODEL, [VENDOR, APPLE]], [

            // Sharp
            /\b(sh-?[altvz]?\d\d[a-ekm]?)/i
            ], [MODEL, [VENDOR, SHARP], [TYPE, MOBILE]], [

            // Huawei
            /\b((?:ag[rs][23]?|bah2?|sht?|btv)-a?[lw]\d{2})\b(?!.+d\/s)/i
            ], [MODEL, [VENDOR, HUAWEI], [TYPE, TABLET]], [
            /(?:huawei|honor)([-\w ]+)[;\)]/i,
            /\b(nexus 6p|\w{2,4}e?-[atu]?[ln][\dx][012359c][adn]?)\b(?!.+d\/s)/i
            ], [MODEL, [VENDOR, HUAWEI], [TYPE, MOBILE]], [

            // Xiaomi
            /\b(poco[\w ]+|m2\d{3}j\d\d[a-z]{2})(?: bui|\))/i,                  // Xiaomi POCO
            /\b; (\w+) build\/hm\1/i,                                           // Xiaomi Hongmi 'numeric' models
            /\b(hm[-_ ]?note?[_ ]?(?:\d\w)?) bui/i,                             // Xiaomi Hongmi
            /\b(redmi[\-_ ]?(?:note|k)?[\w_ ]+)(?: bui|\))/i,                   // Xiaomi Redmi
            /\b(mi[-_ ]?(?:a\d|one|one[_ ]plus|note lte|max|cc)?[_ ]?(?:\d?\w?)[_ ]?(?:plus|se|lite)?)(?: bui|\))/i // Xiaomi Mi
            ], [[MODEL, /_/g, ' '], [VENDOR, XIAOMI], [TYPE, MOBILE]], [
            /\b(mi[-_ ]?(?:pad)(?:[\w_ ]+))(?: bui|\))/i                        // Mi Pad tablets
            ],[[MODEL, /_/g, ' '], [VENDOR, XIAOMI], [TYPE, TABLET]], [

            // OPPO
            /; (\w+) bui.+ oppo/i,
            /\b(cph[12]\d{3}|p(?:af|c[al]|d\w|e[ar])[mt]\d0|x9007|a101op)\b/i
            ], [MODEL, [VENDOR, 'OPPO'], [TYPE, MOBILE]], [

            // Vivo
            /vivo (\w+)(?: bui|\))/i,
            /\b(v[12]\d{3}\w?[at])(?: bui|;)/i
            ], [MODEL, [VENDOR, 'Vivo'], [TYPE, MOBILE]], [

            // Realme
            /\b(rmx[12]\d{3})(?: bui|;|\))/i
            ], [MODEL, [VENDOR, 'Realme'], [TYPE, MOBILE]], [

            // Motorola
            /\b(milestone|droid(?:[2-4x]| (?:bionic|x2|pro|razr))?:?( 4g)?)\b[\w ]+build\//i,
            /\bmot(?:orola)?[- ](\w*)/i,
            /((?:moto[\w\(\) ]+|xt\d{3,4}|nexus 6)(?= bui|\)))/i
            ], [MODEL, [VENDOR, MOTOROLA], [TYPE, MOBILE]], [
            /\b(mz60\d|xoom[2 ]{0,2}) build\//i
            ], [MODEL, [VENDOR, MOTOROLA], [TYPE, TABLET]], [

            // LG
            /((?=lg)?[vl]k\-?\d{3}) bui| 3\.[-\w; ]{10}lg?-([06cv9]{3,4})/i
            ], [MODEL, [VENDOR, LG], [TYPE, TABLET]], [
            /(lm(?:-?f100[nv]?|-[\w\.]+)(?= bui|\))|nexus [45])/i,
            /\blg[-e;\/ ]+((?!browser|netcast|android tv)\w+)/i,
            /\blg-?([\d\w]+) bui/i
            ], [MODEL, [VENDOR, LG], [TYPE, MOBILE]], [

            // Lenovo
            /(ideatab[-\w ]+)/i,
            /lenovo ?(s[56]000[-\w]+|tab(?:[\w ]+)|yt[-\d\w]{6}|tb[-\d\w]{6})/i
            ], [MODEL, [VENDOR, 'Lenovo'], [TYPE, TABLET]], [

            // Nokia
            /(?:maemo|nokia).*(n900|lumia \d+)/i,
            /nokia[-_ ]?([-\w\.]*)/i
            ], [[MODEL, /_/g, ' '], [VENDOR, 'Nokia'], [TYPE, MOBILE]], [

            // Google
            /(pixel c)\b/i                                                      // Google Pixel C
            ], [MODEL, [VENDOR, GOOGLE], [TYPE, TABLET]], [
            /droid.+; (pixel[\daxl ]{0,6})(?: bui|\))/i                         // Google Pixel
            ], [MODEL, [VENDOR, GOOGLE], [TYPE, MOBILE]], [

            // Sony
            /droid.+ (a?\d[0-2]{2}so|[c-g]\d{4}|so[-gl]\w+|xq-a\w[4-7][12])(?= bui|\).+chrome\/(?![1-6]{0,1}\d\.))/i
            ], [MODEL, [VENDOR, SONY], [TYPE, MOBILE]], [
            /sony tablet [ps]/i,
            /\b(?:sony)?sgp\w+(?: bui|\))/i
            ], [[MODEL, 'Xperia Tablet'], [VENDOR, SONY], [TYPE, TABLET]], [

            // OnePlus
            / (kb2005|in20[12]5|be20[12][59])\b/i,
            /(?:one)?(?:plus)? (a\d0\d\d)(?: b|\))/i
            ], [MODEL, [VENDOR, 'OnePlus'], [TYPE, MOBILE]], [

            // Amazon
            /(alexa)webm/i,
            /(kf[a-z]{2}wi|aeo[c-r]{2})( bui|\))/i,                             // Kindle Fire without Silk / Echo Show
            /(kf[a-z]+)( bui|\)).+silk\//i                                      // Kindle Fire HD
            ], [MODEL, [VENDOR, AMAZON], [TYPE, TABLET]], [
            /((?:sd|kf)[0349hijorstuw]+)( bui|\)).+silk\//i                     // Fire Phone
            ], [[MODEL, /(.+)/g, 'Fire Phone $1'], [VENDOR, AMAZON], [TYPE, MOBILE]], [

            // BlackBerry
            /(playbook);[-\w\),; ]+(rim)/i                                      // BlackBerry PlayBook
            ], [MODEL, VENDOR, [TYPE, TABLET]], [
            /\b((?:bb[a-f]|st[hv])100-\d)/i,
            /\(bb10; (\w+)/i                                                    // BlackBerry 10
            ], [MODEL, [VENDOR, BLACKBERRY], [TYPE, MOBILE]], [

            // Asus
            /(?:\b|asus_)(transfo[prime ]{4,10} \w+|eeepc|slider \w+|nexus 7|padfone|p00[cj])/i
            ], [MODEL, [VENDOR, ASUS], [TYPE, TABLET]], [
            / (z[bes]6[027][012][km][ls]|zenfone \d\w?)\b/i
            ], [MODEL, [VENDOR, ASUS], [TYPE, MOBILE]], [

            // HTC
            /(nexus 9)/i                                                        // HTC Nexus 9
            ], [MODEL, [VENDOR, 'HTC'], [TYPE, TABLET]], [
            /(htc)[-;_ ]{1,2}([\w ]+(?=\)| bui)|\w+)/i,                         // HTC

            // ZTE
            /(zte)[- ]([\w ]+?)(?: bui|\/|\))/i,
            /(alcatel|geeksphone|nexian|panasonic(?!(?:;|\.))|sony(?!-bra))[-_ ]?([-\w]*)/i         // Alcatel/GeeksPhone/Nexian/Panasonic/Sony
            ], [VENDOR, [MODEL, /_/g, ' '], [TYPE, MOBILE]], [

            // Acer
            /droid.+; ([ab][1-7]-?[0178a]\d\d?)/i
            ], [MODEL, [VENDOR, 'Acer'], [TYPE, TABLET]], [

            // Meizu
            /droid.+; (m[1-5] note) bui/i,
            /\bmz-([-\w]{2,})/i
            ], [MODEL, [VENDOR, 'Meizu'], [TYPE, MOBILE]], [

            // MIXED
            /(blackberry|benq|palm(?=\-)|sonyericsson|acer|asus|dell|meizu|motorola|polytron|infinix|tecno)[-_ ]?([-\w]*)/i,
                                                                                // BlackBerry/BenQ/Palm/Sony-Ericsson/Acer/Asus/Dell/Meizu/Motorola/Polytron
            /(hp) ([\w ]+\w)/i,                                                 // HP iPAQ
            /(asus)-?(\w+)/i,                                                   // Asus
            /(microsoft); (lumia[\w ]+)/i,                                      // Microsoft Lumia
            /(lenovo)[-_ ]?([-\w]+)/i,                                          // Lenovo
            /(jolla)/i,                                                         // Jolla
            /(oppo) ?([\w ]+) bui/i                                             // OPPO
            ], [VENDOR, MODEL, [TYPE, MOBILE]], [

            /(kobo)\s(ereader|touch)/i,                                         // Kobo
            /(archos) (gamepad2?)/i,                                            // Archos
            /(hp).+(touchpad(?!.+tablet)|tablet)/i,                             // HP TouchPad
            /(kindle)\/([\w\.]+)/i,                                             // Kindle
            /(nook)[\w ]+build\/(\w+)/i,                                        // Nook
            /(dell) (strea[kpr\d ]*[\dko])/i,                                   // Dell Streak
            /(le[- ]+pan)[- ]+(\w{1,9}) bui/i,                                  // Le Pan Tablets
            /(trinity)[- ]*(t\d{3}) bui/i,                                      // Trinity Tablets
            /(gigaset)[- ]+(q\w{1,9}) bui/i,                                    // Gigaset Tablets
            /(vodafone) ([\w ]+)(?:\)| bui)/i                                   // Vodafone
            ], [VENDOR, MODEL, [TYPE, TABLET]], [

            /(surface duo)/i                                                    // Surface Duo
            ], [MODEL, [VENDOR, MICROSOFT], [TYPE, TABLET]], [
            /droid [\d\.]+; (fp\du?)(?: b|\))/i                                 // Fairphone
            ], [MODEL, [VENDOR, 'Fairphone'], [TYPE, MOBILE]], [
            /(u304aa)/i                                                         // AT&T
            ], [MODEL, [VENDOR, 'AT&T'], [TYPE, MOBILE]], [
            /\bsie-(\w*)/i                                                      // Siemens
            ], [MODEL, [VENDOR, 'Siemens'], [TYPE, MOBILE]], [
            /\b(rct\w+) b/i                                                     // RCA Tablets
            ], [MODEL, [VENDOR, 'RCA'], [TYPE, TABLET]], [
            /\b(venue[\d ]{2,7}) b/i                                            // Dell Venue Tablets
            ], [MODEL, [VENDOR, 'Dell'], [TYPE, TABLET]], [
            /\b(q(?:mv|ta)\w+) b/i                                              // Verizon Tablet
            ], [MODEL, [VENDOR, 'Verizon'], [TYPE, TABLET]], [
            /\b(?:barnes[& ]+noble |bn[rt])([\w\+ ]*) b/i                       // Barnes & Noble Tablet
            ], [MODEL, [VENDOR, 'Barnes & Noble'], [TYPE, TABLET]], [
            /\b(tm\d{3}\w+) b/i
            ], [MODEL, [VENDOR, 'NuVision'], [TYPE, TABLET]], [
            /\b(k88) b/i                                                        // ZTE K Series Tablet
            ], [MODEL, [VENDOR, 'ZTE'], [TYPE, TABLET]], [
            /\b(nx\d{3}j) b/i                                                   // ZTE Nubia
            ], [MODEL, [VENDOR, 'ZTE'], [TYPE, MOBILE]], [
            /\b(gen\d{3}) b.+49h/i                                              // Swiss GEN Mobile
            ], [MODEL, [VENDOR, 'Swiss'], [TYPE, MOBILE]], [
            /\b(zur\d{3}) b/i                                                   // Swiss ZUR Tablet
            ], [MODEL, [VENDOR, 'Swiss'], [TYPE, TABLET]], [
            /\b((zeki)?tb.*\b) b/i                                              // Zeki Tablets
            ], [MODEL, [VENDOR, 'Zeki'], [TYPE, TABLET]], [
            /\b([yr]\d{2}) b/i,
            /\b(dragon[- ]+touch |dt)(\w{5}) b/i                                // Dragon Touch Tablet
            ], [[VENDOR, 'Dragon Touch'], MODEL, [TYPE, TABLET]], [
            /\b(ns-?\w{0,9}) b/i                                                // Insignia Tablets
            ], [MODEL, [VENDOR, 'Insignia'], [TYPE, TABLET]], [
            /\b((nxa|next)-?\w{0,9}) b/i                                        // NextBook Tablets
            ], [MODEL, [VENDOR, 'NextBook'], [TYPE, TABLET]], [
            /\b(xtreme\_)?(v(1[045]|2[015]|[3469]0|7[05])) b/i                  // Voice Xtreme Phones
            ], [[VENDOR, 'Voice'], MODEL, [TYPE, MOBILE]], [
            /\b(lvtel\-)?(v1[12]) b/i                                           // LvTel Phones
            ], [[VENDOR, 'LvTel'], MODEL, [TYPE, MOBILE]], [
            /\b(ph-1) /i                                                        // Essential PH-1
            ], [MODEL, [VENDOR, 'Essential'], [TYPE, MOBILE]], [
            /\b(v(100md|700na|7011|917g).*\b) b/i                               // Envizen Tablets
            ], [MODEL, [VENDOR, 'Envizen'], [TYPE, TABLET]], [
            /\b(trio[-\w\. ]+) b/i                                              // MachSpeed Tablets
            ], [MODEL, [VENDOR, 'MachSpeed'], [TYPE, TABLET]], [
            /\btu_(1491) b/i                                                    // Rotor Tablets
            ], [MODEL, [VENDOR, 'Rotor'], [TYPE, TABLET]], [
            /(shield[\w ]+) b/i                                                 // Nvidia Shield Tablets
            ], [MODEL, [VENDOR, 'Nvidia'], [TYPE, TABLET]], [
            /(sprint) (\w+)/i                                                   // Sprint Phones
            ], [VENDOR, MODEL, [TYPE, MOBILE]], [
            /(kin\.[onetw]{3})/i                                                // Microsoft Kin
            ], [[MODEL, /\./g, ' '], [VENDOR, MICROSOFT], [TYPE, MOBILE]], [
            /droid.+; (cc6666?|et5[16]|mc[239][23]x?|vc8[03]x?)\)/i             // Zebra
            ], [MODEL, [VENDOR, ZEBRA], [TYPE, TABLET]], [
            /droid.+; (ec30|ps20|tc[2-8]\d[kx])\)/i
            ], [MODEL, [VENDOR, ZEBRA], [TYPE, MOBILE]], [

            ///////////////////
            // SMARTTVS
            ///////////////////

            /smart-tv.+(samsung)/i                                              // Samsung
            ], [VENDOR, [TYPE, SMARTTV]], [
            /hbbtv.+maple;(\d+)/i
            ], [[MODEL, /^/, 'SmartTV'], [VENDOR, SAMSUNG], [TYPE, SMARTTV]], [
            /(nux; netcast.+smarttv|lg (netcast\.tv-201\d|android tv))/i        // LG SmartTV
            ], [[VENDOR, LG], [TYPE, SMARTTV]], [
            /(apple) ?tv/i                                                      // Apple TV
            ], [VENDOR, [MODEL, APPLE+' TV'], [TYPE, SMARTTV]], [
            /crkey/i                                                            // Google Chromecast
            ], [[MODEL, CHROME+'cast'], [VENDOR, GOOGLE], [TYPE, SMARTTV]], [
            /droid.+aft(\w+)( bui|\))/i                                         // Fire TV
            ], [MODEL, [VENDOR, AMAZON], [TYPE, SMARTTV]], [
            /\(dtv[\);].+(aquos)/i,
            /(aquos-tv[\w ]+)\)/i                                               // Sharp
            ], [MODEL, [VENDOR, SHARP], [TYPE, SMARTTV]],[
            /(bravia[\w ]+)( bui|\))/i                                              // Sony
            ], [MODEL, [VENDOR, SONY], [TYPE, SMARTTV]], [
            /(mitv-\w{5}) bui/i                                                 // Xiaomi
            ], [MODEL, [VENDOR, XIAOMI], [TYPE, SMARTTV]], [
            /Hbbtv.*(technisat) (.*);/i                                         // TechniSAT
            ], [VENDOR, MODEL, [TYPE, SMARTTV]], [
            /\b(roku)[\dx]*[\)\/]((?:dvp-)?[\d\.]*)/i,                          // Roku
            /hbbtv\/\d+\.\d+\.\d+ +\([\w\+ ]*; *([\w\d][^;]*);([^;]*)/i         // HbbTV devices
            ], [[VENDOR, trim], [MODEL, trim], [TYPE, SMARTTV]], [
            /\b(android tv|smart[- ]?tv|opera tv|tv; rv:)\b/i                   // SmartTV from Unidentified Vendors
            ], [[TYPE, SMARTTV]], [

            ///////////////////
            // CONSOLES
            ///////////////////

            /(ouya)/i,                                                          // Ouya
            /(nintendo) ([wids3utch]+)/i                                        // Nintendo
            ], [VENDOR, MODEL, [TYPE, CONSOLE]], [
            /droid.+; (shield) bui/i                                            // Nvidia
            ], [MODEL, [VENDOR, 'Nvidia'], [TYPE, CONSOLE]], [
            /(playstation [345portablevi]+)/i                                   // Playstation
            ], [MODEL, [VENDOR, SONY], [TYPE, CONSOLE]], [
            /\b(xbox(?: one)?(?!; xbox))[\); ]/i                                // Microsoft Xbox
            ], [MODEL, [VENDOR, MICROSOFT], [TYPE, CONSOLE]], [

            ///////////////////
            // WEARABLES
            ///////////////////

            /((pebble))app/i                                                    // Pebble
            ], [VENDOR, MODEL, [TYPE, WEARABLE]], [
            /(watch)(?: ?os[,\/]|\d,\d\/)[\d\.]+/i                              // Apple Watch
            ], [MODEL, [VENDOR, APPLE], [TYPE, WEARABLE]], [
            /droid.+; (glass) \d/i                                              // Google Glass
            ], [MODEL, [VENDOR, GOOGLE], [TYPE, WEARABLE]], [
            /droid.+; (wt63?0{2,3})\)/i
            ], [MODEL, [VENDOR, ZEBRA], [TYPE, WEARABLE]], [
            /(quest( 2| pro)?)/i                                                // Oculus Quest
            ], [MODEL, [VENDOR, FACEBOOK], [TYPE, WEARABLE]], [

            ///////////////////
            // EMBEDDED
            ///////////////////

            /(tesla)(?: qtcarbrowser|\/[-\w\.]+)/i                              // Tesla
            ], [VENDOR, [TYPE, EMBEDDED]], [
            /(aeobc)\b/i                                                        // Echo Dot
            ], [MODEL, [VENDOR, AMAZON], [TYPE, EMBEDDED]], [

            ////////////////////
            // MIXED (GENERIC)
            ///////////////////

            /droid .+?; ([^;]+?)(?: bui|\) applew).+? mobile safari/i           // Android Phones from Unidentified Vendors
            ], [MODEL, [TYPE, MOBILE]], [
            /droid .+?; ([^;]+?)(?: bui|\) applew).+?(?! mobile) safari/i       // Android Tablets from Unidentified Vendors
            ], [MODEL, [TYPE, TABLET]], [
            /\b((tablet|tab)[;\/]|focus\/\d(?!.+mobile))/i                      // Unidentifiable Tablet
            ], [[TYPE, TABLET]], [
            /(phone|mobile(?:[;\/]| [ \w\/\.]*safari)|pda(?=.+windows ce))/i    // Unidentifiable Mobile
            ], [[TYPE, MOBILE]], [
            /(android[-\w\. ]{0,9});.+buil/i                                    // Generic Android Device
            ], [MODEL, [VENDOR, 'Generic']]
        ],

        engine : [[

            /windows.+ edge\/([\w\.]+)/i                                       // EdgeHTML
            ], [VERSION, [NAME, EDGE+'HTML']], [

            /webkit\/537\.36.+chrome\/(?!27)([\w\.]+)/i                         // Blink
            ], [VERSION, [NAME, 'Blink']], [

            /(presto)\/([\w\.]+)/i,                                             // Presto
            /(webkit|trident|netfront|netsurf|amaya|lynx|w3m|goanna)\/([\w\.]+)/i, // WebKit/Trident/NetFront/NetSurf/Amaya/Lynx/w3m/Goanna
            /ekioh(flow)\/([\w\.]+)/i,                                          // Flow
            /(khtml|tasman|links)[\/ ]\(?([\w\.]+)/i,                           // KHTML/Tasman/Links
            /(icab)[\/ ]([23]\.[\d\.]+)/i,                                      // iCab
            /\b(libweb)/i
            ], [NAME, VERSION], [

            /rv\:([\w\.]{1,9})\b.+(gecko)/i                                     // Gecko
            ], [VERSION, NAME]
        ],

        os : [[

            // Windows
            /microsoft (windows) (vista|xp)/i                                   // Windows (iTunes)
            ], [NAME, VERSION], [
            /(windows) nt 6\.2; (arm)/i,                                        // Windows RT
            /(windows (?:phone(?: os)?|mobile))[\/ ]?([\d\.\w ]*)/i,            // Windows Phone
            /(windows)[\/ ]?([ntce\d\. ]+\w)(?!.+xbox)/i
            ], [NAME, [VERSION, strMapper, windowsVersionMap]], [
            /(win(?=3|9|n)|win 9x )([nt\d\.]+)/i
            ], [[NAME, 'Windows'], [VERSION, strMapper, windowsVersionMap]], [

            // iOS/macOS
            /ip[honead]{2,4}\b(?:.*os ([\w]+) like mac|; opera)/i,              // iOS
            /(?:ios;fbsv\/|iphone.+ios[\/ ])([\d\.]+)/i,
            /cfnetwork\/.+darwin/i
            ], [[VERSION, /_/g, '.'], [NAME, 'iOS']], [
            /(mac os x) ?([\w\. ]*)/i,
            /(macintosh|mac_powerpc\b)(?!.+haiku)/i                             // Mac OS
            ], [[NAME, MAC_OS], [VERSION, /_/g, '.']], [

            // Mobile OSes
            /droid ([\w\.]+)\b.+(android[- ]x86|harmonyos)/i                    // Android-x86/HarmonyOS
            ], [VERSION, NAME], [                                               // Android/WebOS/QNX/Bada/RIM/Maemo/MeeGo/Sailfish OS
            /(android|webos|qnx|bada|rim tablet os|maemo|meego|sailfish)[-\/ ]?([\w\.]*)/i,
            /(blackberry)\w*\/([\w\.]*)/i,                                      // Blackberry
            /(tizen|kaios)[\/ ]([\w\.]+)/i,                                     // Tizen/KaiOS
            /\((series40);/i                                                    // Series 40
            ], [NAME, VERSION], [
            /\(bb(10);/i                                                        // BlackBerry 10
            ], [VERSION, [NAME, BLACKBERRY]], [
            /(?:symbian ?os|symbos|s60(?=;)|series60)[-\/ ]?([\w\.]*)/i         // Symbian
            ], [VERSION, [NAME, 'Symbian']], [
            /mozilla\/[\d\.]+ \((?:mobile|tablet|tv|mobile; [\w ]+); rv:.+ gecko\/([\w\.]+)/i // Firefox OS
            ], [VERSION, [NAME, FIREFOX+' OS']], [
            /web0s;.+rt(tv)/i,
            /\b(?:hp)?wos(?:browser)?\/([\w\.]+)/i                              // WebOS
            ], [VERSION, [NAME, 'webOS']], [
            /watch(?: ?os[,\/]|\d,\d\/)([\d\.]+)/i                              // watchOS
            ], [VERSION, [NAME, 'watchOS']], [

            // Google Chromecast
            /crkey\/([\d\.]+)/i                                                 // Google Chromecast
            ], [VERSION, [NAME, CHROME+'cast']], [
            /(cros) [\w]+(?:\)| ([\w\.]+)\b)/i                                  // Chromium OS
            ], [[NAME, CHROMIUM_OS], VERSION],[

            // Smart TVs
            /panasonic;(viera)/i,                                               // Panasonic Viera
            /(netrange)mmh/i,                                                   // Netrange
            /(nettv)\/(\d+\.[\w\.]+)/i,                                         // NetTV

            // Console
            /(nintendo|playstation) ([wids345portablevuch]+)/i,                 // Nintendo/Playstation
            /(xbox); +xbox ([^\);]+)/i,                                         // Microsoft Xbox (360, One, X, S, Series X, Series S)

            // Other
            /\b(joli|palm)\b ?(?:os)?\/?([\w\.]*)/i,                            // Joli/Palm
            /(mint)[\/\(\) ]?(\w*)/i,                                           // Mint
            /(mageia|vectorlinux)[; ]/i,                                        // Mageia/VectorLinux
            /([kxln]?ubuntu|debian|suse|opensuse|gentoo|arch(?= linux)|slackware|fedora|mandriva|centos|pclinuxos|red ?hat|zenwalk|linpus|raspbian|plan 9|minix|risc os|contiki|deepin|manjaro|elementary os|sabayon|linspire)(?: gnu\/linux)?(?: enterprise)?(?:[- ]linux)?(?:-gnu)?[-\/ ]?(?!chrom|package)([-\w\.]*)/i,
                                                                                // Ubuntu/Debian/SUSE/Gentoo/Arch/Slackware/Fedora/Mandriva/CentOS/PCLinuxOS/RedHat/Zenwalk/Linpus/Raspbian/Plan9/Minix/RISCOS/Contiki/Deepin/Manjaro/elementary/Sabayon/Linspire
            /(hurd|linux) ?([\w\.]*)/i,                                         // Hurd/Linux
            /(gnu) ?([\w\.]*)/i,                                                // GNU
            /\b([-frentopcghs]{0,5}bsd|dragonfly)[\/ ]?(?!amd|[ix346]{1,2}86)([\w\.]*)/i, // FreeBSD/NetBSD/OpenBSD/PC-BSD/GhostBSD/DragonFly
            /(haiku) (\w+)/i                                                    // Haiku
            ], [NAME, VERSION], [
            /(sunos) ?([\w\.\d]*)/i                                             // Solaris
            ], [[NAME, 'Solaris'], VERSION], [
            /((?:open)?solaris)[-\/ ]?([\w\.]*)/i,                              // Solaris
            /(aix) ((\d)(?=\.|\)| )[\w\.])*/i,                                  // AIX
            /\b(beos|os\/2|amigaos|morphos|openvms|fuchsia|hp-ux|serenityos)/i, // BeOS/OS2/AmigaOS/MorphOS/OpenVMS/Fuchsia/HP-UX/SerenityOS
            /(unix) ?([\w\.]*)/i                                                // UNIX
            ], [NAME, VERSION]
        ]
    };

    /////////////////
    // Constructor
    ////////////////

    var UAParser = function (ua, extensions) {

        if (typeof ua === OBJ_TYPE) {
            extensions = ua;
            ua = undefined;
        }

        if (!(this instanceof UAParser)) {
            return new UAParser(ua, extensions).getResult();
        }

        var _navigator = (typeof window !== UNDEF_TYPE && window.navigator) ? window.navigator : undefined;
        var _ua = ua || ((_navigator && _navigator.userAgent) ? _navigator.userAgent : EMPTY);
        var _uach = (_navigator && _navigator.userAgentData) ? _navigator.userAgentData : undefined;
        var _rgxmap = extensions ? extend(regexes, extensions) : regexes;
        var _isSelfNav = _navigator && _navigator.userAgent == _ua;

        this.getBrowser = function () {
            var _browser = {};
            _browser[NAME] = undefined;
            _browser[VERSION] = undefined;
            rgxMapper.call(_browser, _ua, _rgxmap.browser);
            _browser[MAJOR] = majorize(_browser[VERSION]);
            // Brave-specific detection
            if (_isSelfNav && _navigator && _navigator.brave && typeof _navigator.brave.isBrave == FUNC_TYPE) {
                _browser[NAME] = 'Brave';
            }
            return _browser;
        };
        this.getCPU = function () {
            var _cpu = {};
            _cpu[ARCHITECTURE] = undefined;
            rgxMapper.call(_cpu, _ua, _rgxmap.cpu);
            return _cpu;
        };
        this.getDevice = function () {
            var _device = {};
            _device[VENDOR] = undefined;
            _device[MODEL] = undefined;
            _device[TYPE] = undefined;
            rgxMapper.call(_device, _ua, _rgxmap.device);
            if (_isSelfNav && !_device[TYPE] && _uach && _uach.mobile) {
                _device[TYPE] = MOBILE;
            }
            // iPadOS-specific detection: identified as Mac, but has some iOS-only properties
            if (_isSelfNav && _device[MODEL] == 'Macintosh' && _navigator && typeof _navigator.standalone !== UNDEF_TYPE && _navigator.maxTouchPoints && _navigator.maxTouchPoints > 2) {
                _device[MODEL] = 'iPad';
                _device[TYPE] = TABLET;
            }
            return _device;
        };
        this.getEngine = function () {
            var _engine = {};
            _engine[NAME] = undefined;
            _engine[VERSION] = undefined;
            rgxMapper.call(_engine, _ua, _rgxmap.engine);
            return _engine;
        };
        this.getOS = function () {
            var _os = {};
            _os[NAME] = undefined;
            _os[VERSION] = undefined;
            rgxMapper.call(_os, _ua, _rgxmap.os);
            if (_isSelfNav && !_os[NAME] && _uach && _uach.platform != 'Unknown') {
                _os[NAME] = _uach.platform  
                                    .replace(/chrome os/i, CHROMIUM_OS)
                                    .replace(/macos/i, MAC_OS);           // backward compatibility
            }
            return _os;
        };
        this.getResult = function () {
            return {
                ua      : this.getUA(),
                browser : this.getBrowser(),
                engine  : this.getEngine(),
                os      : this.getOS(),
                device  : this.getDevice(),
                cpu     : this.getCPU()
            };
        };
        this.getUA = function () {
            return _ua;
        };
        this.setUA = function (ua) {
            _ua = (typeof ua === STR_TYPE && ua.length > UA_MAX_LENGTH) ? trim(ua, UA_MAX_LENGTH) : ua;
            return this;
        };
        this.setUA(_ua);
        return this;
    };

    UAParser.VERSION = LIBVERSION;
    UAParser.BROWSER =  enumerize([NAME, VERSION, MAJOR]);
    UAParser.CPU = enumerize([ARCHITECTURE]);
    UAParser.DEVICE = enumerize([MODEL, VENDOR, TYPE, CONSOLE, MOBILE, SMARTTV, TABLET, WEARABLE, EMBEDDED]);
    UAParser.ENGINE = UAParser.OS = enumerize([NAME, VERSION]);

    ///////////
    // Export
    //////////

    // check js environment
    if (typeof(exports) !== UNDEF_TYPE) {
        // nodejs env
        if ("object" !== UNDEF_TYPE && module.exports) {
            exports = module.exports = UAParser;
        }
        exports.UAParser = UAParser;
    } else {
        // requirejs env (optional)
        if ("function" === FUNC_TYPE && __webpack_require__.amdO) {
            !(__WEBPACK_AMD_DEFINE_RESULT__ = (function () {
                return UAParser;
            }).call(exports, __webpack_require__, exports, module),
		__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));
        } else if (typeof window !== UNDEF_TYPE) {
            // browser env
            window.UAParser = UAParser;
        }
    }

    // jQuery/Zepto specific (optional)
    // Note:
    //   In AMD env the global scope should be kept clean, but jQuery is an exception.
    //   jQuery always exports to global scope, unless jQuery.noConflict(true) is used,
    //   and we should catch that.
    var $ = typeof window !== UNDEF_TYPE && (window.jQuery || window.Zepto);
    if ($ && !$.ua) {
        var parser = new UAParser();
        $.ua = parser.getResult();
        $.ua.get = function () {
            return parser.getUA();
        };
        $.ua.set = function (ua) {
            parser.setUA(ua);
            var result = parser.getResult();
            for (var prop in result) {
                $.ua[prop] = result[prop];
            }
        };
    }

})(typeof window === 'object' ? window : this);


/***/ }),

/***/ "./node_modules/uuid/dist/commonjs-browser/index.js":
/*!**********************************************************!*\
  !*** ./node_modules/uuid/dist/commonjs-browser/index.js ***!
  \**********************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";


Object.defineProperty(exports, "__esModule", ({
  value: true
}));
Object.defineProperty(exports, "NIL", ({
  enumerable: true,
  get: function get() {
    return _nil.default;
  }
}));
Object.defineProperty(exports, "parse", ({
  enumerable: true,
  get: function get() {
    return _parse.default;
  }
}));
Object.defineProperty(exports, "stringify", ({
  enumerable: true,
  get: function get() {
    return _stringify.default;
  }
}));
Object.defineProperty(exports, "v1", ({
  enumerable: true,
  get: function get() {
    return _v.default;
  }
}));
Object.defineProperty(exports, "v3", ({
  enumerable: true,
  get: function get() {
    return _v2.default;
  }
}));
Object.defineProperty(exports, "v4", ({
  enumerable: true,
  get: function get() {
    return _v3.default;
  }
}));
Object.defineProperty(exports, "v5", ({
  enumerable: true,
  get: function get() {
    return _v4.default;
  }
}));
Object.defineProperty(exports, "validate", ({
  enumerable: true,
  get: function get() {
    return _validate.default;
  }
}));
Object.defineProperty(exports, "version", ({
  enumerable: true,
  get: function get() {
    return _version.default;
  }
}));

var _v = _interopRequireDefault(__webpack_require__(/*! ./v1.js */ "./node_modules/uuid/dist/commonjs-browser/v1.js"));

var _v2 = _interopRequireDefault(__webpack_require__(/*! ./v3.js */ "./node_modules/uuid/dist/commonjs-browser/v3.js"));

var _v3 = _interopRequireDefault(__webpack_require__(/*! ./v4.js */ "./node_modules/uuid/dist/commonjs-browser/v4.js"));

var _v4 = _interopRequireDefault(__webpack_require__(/*! ./v5.js */ "./node_modules/uuid/dist/commonjs-browser/v5.js"));

var _nil = _interopRequireDefault(__webpack_require__(/*! ./nil.js */ "./node_modules/uuid/dist/commonjs-browser/nil.js"));

var _version = _interopRequireDefault(__webpack_require__(/*! ./version.js */ "./node_modules/uuid/dist/commonjs-browser/version.js"));

var _validate = _interopRequireDefault(__webpack_require__(/*! ./validate.js */ "./node_modules/uuid/dist/commonjs-browser/validate.js"));

var _stringify = _interopRequireDefault(__webpack_require__(/*! ./stringify.js */ "./node_modules/uuid/dist/commonjs-browser/stringify.js"));

var _parse = _interopRequireDefault(__webpack_require__(/*! ./parse.js */ "./node_modules/uuid/dist/commonjs-browser/parse.js"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/***/ }),

/***/ "./node_modules/uuid/dist/commonjs-browser/md5.js":
/*!********************************************************!*\
  !*** ./node_modules/uuid/dist/commonjs-browser/md5.js ***!
  \********************************************************/
/***/ ((__unused_webpack_module, exports) => {

"use strict";


Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports["default"] = void 0;

/*
 * Browser-compatible JavaScript MD5
 *
 * Modification of JavaScript MD5
 * https://github.com/blueimp/JavaScript-MD5
 *
 * Copyright 2011, Sebastian Tschan
 * https://blueimp.net
 *
 * Licensed under the MIT license:
 * https://opensource.org/licenses/MIT
 *
 * Based on
 * A JavaScript implementation of the RSA Data Security, Inc. MD5 Message
 * Digest Algorithm, as defined in RFC 1321.
 * Version 2.2 Copyright (C) Paul Johnston 1999 - 2009
 * Other contributors: Greg Holt, Andrew Kepert, Ydnar, Lostinet
 * Distributed under the BSD License
 * See http://pajhome.org.uk/crypt/md5 for more info.
 */
function md5(bytes) {
  if (typeof bytes === 'string') {
    const msg = unescape(encodeURIComponent(bytes)); // UTF8 escape

    bytes = new Uint8Array(msg.length);

    for (let i = 0; i < msg.length; ++i) {
      bytes[i] = msg.charCodeAt(i);
    }
  }

  return md5ToHexEncodedArray(wordsToMd5(bytesToWords(bytes), bytes.length * 8));
}
/*
 * Convert an array of little-endian words to an array of bytes
 */


function md5ToHexEncodedArray(input) {
  const output = [];
  const length32 = input.length * 32;
  const hexTab = '0123456789abcdef';

  for (let i = 0; i < length32; i += 8) {
    const x = input[i >> 5] >>> i % 32 & 0xff;
    const hex = parseInt(hexTab.charAt(x >>> 4 & 0x0f) + hexTab.charAt(x & 0x0f), 16);
    output.push(hex);
  }

  return output;
}
/**
 * Calculate output length with padding and bit length
 */


function getOutputLength(inputLength8) {
  return (inputLength8 + 64 >>> 9 << 4) + 14 + 1;
}
/*
 * Calculate the MD5 of an array of little-endian words, and a bit length.
 */


function wordsToMd5(x, len) {
  /* append padding */
  x[len >> 5] |= 0x80 << len % 32;
  x[getOutputLength(len) - 1] = len;
  let a = 1732584193;
  let b = -271733879;
  let c = -1732584194;
  let d = 271733878;

  for (let i = 0; i < x.length; i += 16) {
    const olda = a;
    const oldb = b;
    const oldc = c;
    const oldd = d;
    a = md5ff(a, b, c, d, x[i], 7, -680876936);
    d = md5ff(d, a, b, c, x[i + 1], 12, -389564586);
    c = md5ff(c, d, a, b, x[i + 2], 17, 606105819);
    b = md5ff(b, c, d, a, x[i + 3], 22, -1044525330);
    a = md5ff(a, b, c, d, x[i + 4], 7, -176418897);
    d = md5ff(d, a, b, c, x[i + 5], 12, 1200080426);
    c = md5ff(c, d, a, b, x[i + 6], 17, -1473231341);
    b = md5ff(b, c, d, a, x[i + 7], 22, -45705983);
    a = md5ff(a, b, c, d, x[i + 8], 7, 1770035416);
    d = md5ff(d, a, b, c, x[i + 9], 12, -1958414417);
    c = md5ff(c, d, a, b, x[i + 10], 17, -42063);
    b = md5ff(b, c, d, a, x[i + 11], 22, -1990404162);
    a = md5ff(a, b, c, d, x[i + 12], 7, 1804603682);
    d = md5ff(d, a, b, c, x[i + 13], 12, -40341101);
    c = md5ff(c, d, a, b, x[i + 14], 17, -1502002290);
    b = md5ff(b, c, d, a, x[i + 15], 22, 1236535329);
    a = md5gg(a, b, c, d, x[i + 1], 5, -165796510);
    d = md5gg(d, a, b, c, x[i + 6], 9, -1069501632);
    c = md5gg(c, d, a, b, x[i + 11], 14, 643717713);
    b = md5gg(b, c, d, a, x[i], 20, -373897302);
    a = md5gg(a, b, c, d, x[i + 5], 5, -701558691);
    d = md5gg(d, a, b, c, x[i + 10], 9, 38016083);
    c = md5gg(c, d, a, b, x[i + 15], 14, -660478335);
    b = md5gg(b, c, d, a, x[i + 4], 20, -405537848);
    a = md5gg(a, b, c, d, x[i + 9], 5, 568446438);
    d = md5gg(d, a, b, c, x[i + 14], 9, -1019803690);
    c = md5gg(c, d, a, b, x[i + 3], 14, -187363961);
    b = md5gg(b, c, d, a, x[i + 8], 20, 1163531501);
    a = md5gg(a, b, c, d, x[i + 13], 5, -1444681467);
    d = md5gg(d, a, b, c, x[i + 2], 9, -51403784);
    c = md5gg(c, d, a, b, x[i + 7], 14, 1735328473);
    b = md5gg(b, c, d, a, x[i + 12], 20, -1926607734);
    a = md5hh(a, b, c, d, x[i + 5], 4, -378558);
    d = md5hh(d, a, b, c, x[i + 8], 11, -2022574463);
    c = md5hh(c, d, a, b, x[i + 11], 16, 1839030562);
    b = md5hh(b, c, d, a, x[i + 14], 23, -35309556);
    a = md5hh(a, b, c, d, x[i + 1], 4, -1530992060);
    d = md5hh(d, a, b, c, x[i + 4], 11, 1272893353);
    c = md5hh(c, d, a, b, x[i + 7], 16, -155497632);
    b = md5hh(b, c, d, a, x[i + 10], 23, -1094730640);
    a = md5hh(a, b, c, d, x[i + 13], 4, 681279174);
    d = md5hh(d, a, b, c, x[i], 11, -358537222);
    c = md5hh(c, d, a, b, x[i + 3], 16, -722521979);
    b = md5hh(b, c, d, a, x[i + 6], 23, 76029189);
    a = md5hh(a, b, c, d, x[i + 9], 4, -640364487);
    d = md5hh(d, a, b, c, x[i + 12], 11, -421815835);
    c = md5hh(c, d, a, b, x[i + 15], 16, 530742520);
    b = md5hh(b, c, d, a, x[i + 2], 23, -995338651);
    a = md5ii(a, b, c, d, x[i], 6, -198630844);
    d = md5ii(d, a, b, c, x[i + 7], 10, 1126891415);
    c = md5ii(c, d, a, b, x[i + 14], 15, -1416354905);
    b = md5ii(b, c, d, a, x[i + 5], 21, -57434055);
    a = md5ii(a, b, c, d, x[i + 12], 6, 1700485571);
    d = md5ii(d, a, b, c, x[i + 3], 10, -1894986606);
    c = md5ii(c, d, a, b, x[i + 10], 15, -1051523);
    b = md5ii(b, c, d, a, x[i + 1], 21, -2054922799);
    a = md5ii(a, b, c, d, x[i + 8], 6, 1873313359);
    d = md5ii(d, a, b, c, x[i + 15], 10, -30611744);
    c = md5ii(c, d, a, b, x[i + 6], 15, -1560198380);
    b = md5ii(b, c, d, a, x[i + 13], 21, 1309151649);
    a = md5ii(a, b, c, d, x[i + 4], 6, -145523070);
    d = md5ii(d, a, b, c, x[i + 11], 10, -1120210379);
    c = md5ii(c, d, a, b, x[i + 2], 15, 718787259);
    b = md5ii(b, c, d, a, x[i + 9], 21, -343485551);
    a = safeAdd(a, olda);
    b = safeAdd(b, oldb);
    c = safeAdd(c, oldc);
    d = safeAdd(d, oldd);
  }

  return [a, b, c, d];
}
/*
 * Convert an array bytes to an array of little-endian words
 * Characters >255 have their high-byte silently ignored.
 */


function bytesToWords(input) {
  if (input.length === 0) {
    return [];
  }

  const length8 = input.length * 8;
  const output = new Uint32Array(getOutputLength(length8));

  for (let i = 0; i < length8; i += 8) {
    output[i >> 5] |= (input[i / 8] & 0xff) << i % 32;
  }

  return output;
}
/*
 * Add integers, wrapping at 2^32. This uses 16-bit operations internally
 * to work around bugs in some JS interpreters.
 */


function safeAdd(x, y) {
  const lsw = (x & 0xffff) + (y & 0xffff);
  const msw = (x >> 16) + (y >> 16) + (lsw >> 16);
  return msw << 16 | lsw & 0xffff;
}
/*
 * Bitwise rotate a 32-bit number to the left.
 */


function bitRotateLeft(num, cnt) {
  return num << cnt | num >>> 32 - cnt;
}
/*
 * These functions implement the four basic operations the algorithm uses.
 */


function md5cmn(q, a, b, x, s, t) {
  return safeAdd(bitRotateLeft(safeAdd(safeAdd(a, q), safeAdd(x, t)), s), b);
}

function md5ff(a, b, c, d, x, s, t) {
  return md5cmn(b & c | ~b & d, a, b, x, s, t);
}

function md5gg(a, b, c, d, x, s, t) {
  return md5cmn(b & d | c & ~d, a, b, x, s, t);
}

function md5hh(a, b, c, d, x, s, t) {
  return md5cmn(b ^ c ^ d, a, b, x, s, t);
}

function md5ii(a, b, c, d, x, s, t) {
  return md5cmn(c ^ (b | ~d), a, b, x, s, t);
}

var _default = md5;
exports["default"] = _default;

/***/ }),

/***/ "./node_modules/uuid/dist/commonjs-browser/native.js":
/*!***********************************************************!*\
  !*** ./node_modules/uuid/dist/commonjs-browser/native.js ***!
  \***********************************************************/
/***/ ((__unused_webpack_module, exports) => {

"use strict";


Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports["default"] = void 0;
const randomUUID = typeof crypto !== 'undefined' && crypto.randomUUID && crypto.randomUUID.bind(crypto);
var _default = {
  randomUUID
};
exports["default"] = _default;

/***/ }),

/***/ "./node_modules/uuid/dist/commonjs-browser/nil.js":
/*!********************************************************!*\
  !*** ./node_modules/uuid/dist/commonjs-browser/nil.js ***!
  \********************************************************/
/***/ ((__unused_webpack_module, exports) => {

"use strict";


Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports["default"] = void 0;
var _default = '00000000-0000-0000-0000-000000000000';
exports["default"] = _default;

/***/ }),

/***/ "./node_modules/uuid/dist/commonjs-browser/parse.js":
/*!**********************************************************!*\
  !*** ./node_modules/uuid/dist/commonjs-browser/parse.js ***!
  \**********************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";


Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports["default"] = void 0;

var _validate = _interopRequireDefault(__webpack_require__(/*! ./validate.js */ "./node_modules/uuid/dist/commonjs-browser/validate.js"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function parse(uuid) {
  if (!(0, _validate.default)(uuid)) {
    throw TypeError('Invalid UUID');
  }

  let v;
  const arr = new Uint8Array(16); // Parse ########-....-....-....-............

  arr[0] = (v = parseInt(uuid.slice(0, 8), 16)) >>> 24;
  arr[1] = v >>> 16 & 0xff;
  arr[2] = v >>> 8 & 0xff;
  arr[3] = v & 0xff; // Parse ........-####-....-....-............

  arr[4] = (v = parseInt(uuid.slice(9, 13), 16)) >>> 8;
  arr[5] = v & 0xff; // Parse ........-....-####-....-............

  arr[6] = (v = parseInt(uuid.slice(14, 18), 16)) >>> 8;
  arr[7] = v & 0xff; // Parse ........-....-....-####-............

  arr[8] = (v = parseInt(uuid.slice(19, 23), 16)) >>> 8;
  arr[9] = v & 0xff; // Parse ........-....-....-....-############
  // (Use "/" to avoid 32-bit truncation when bit-shifting high-order bytes)

  arr[10] = (v = parseInt(uuid.slice(24, 36), 16)) / 0x10000000000 & 0xff;
  arr[11] = v / 0x100000000 & 0xff;
  arr[12] = v >>> 24 & 0xff;
  arr[13] = v >>> 16 & 0xff;
  arr[14] = v >>> 8 & 0xff;
  arr[15] = v & 0xff;
  return arr;
}

var _default = parse;
exports["default"] = _default;

/***/ }),

/***/ "./node_modules/uuid/dist/commonjs-browser/regex.js":
/*!**********************************************************!*\
  !*** ./node_modules/uuid/dist/commonjs-browser/regex.js ***!
  \**********************************************************/
/***/ ((__unused_webpack_module, exports) => {

"use strict";


Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports["default"] = void 0;
var _default = /^(?:[0-9a-f]{8}-[0-9a-f]{4}-[1-5][0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}|00000000-0000-0000-0000-000000000000)$/i;
exports["default"] = _default;

/***/ }),

/***/ "./node_modules/uuid/dist/commonjs-browser/rng.js":
/*!********************************************************!*\
  !*** ./node_modules/uuid/dist/commonjs-browser/rng.js ***!
  \********************************************************/
/***/ ((__unused_webpack_module, exports) => {

"use strict";


Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports["default"] = rng;
// Unique ID creation requires a high quality random # generator. In the browser we therefore
// require the crypto API and do not support built-in fallback to lower quality random number
// generators (like Math.random()).
let getRandomValues;
const rnds8 = new Uint8Array(16);

function rng() {
  // lazy load so that environments that need to polyfill have a chance to do so
  if (!getRandomValues) {
    // getRandomValues needs to be invoked in a context where "this" is a Crypto implementation.
    getRandomValues = typeof crypto !== 'undefined' && crypto.getRandomValues && crypto.getRandomValues.bind(crypto);

    if (!getRandomValues) {
      throw new Error('crypto.getRandomValues() not supported. See https://github.com/uuidjs/uuid#getrandomvalues-not-supported');
    }
  }

  return getRandomValues(rnds8);
}

/***/ }),

/***/ "./node_modules/uuid/dist/commonjs-browser/sha1.js":
/*!*********************************************************!*\
  !*** ./node_modules/uuid/dist/commonjs-browser/sha1.js ***!
  \*********************************************************/
/***/ ((__unused_webpack_module, exports) => {

"use strict";


Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports["default"] = void 0;

// Adapted from Chris Veness' SHA1 code at
// http://www.movable-type.co.uk/scripts/sha1.html
function f(s, x, y, z) {
  switch (s) {
    case 0:
      return x & y ^ ~x & z;

    case 1:
      return x ^ y ^ z;

    case 2:
      return x & y ^ x & z ^ y & z;

    case 3:
      return x ^ y ^ z;
  }
}

function ROTL(x, n) {
  return x << n | x >>> 32 - n;
}

function sha1(bytes) {
  const K = [0x5a827999, 0x6ed9eba1, 0x8f1bbcdc, 0xca62c1d6];
  const H = [0x67452301, 0xefcdab89, 0x98badcfe, 0x10325476, 0xc3d2e1f0];

  if (typeof bytes === 'string') {
    const msg = unescape(encodeURIComponent(bytes)); // UTF8 escape

    bytes = [];

    for (let i = 0; i < msg.length; ++i) {
      bytes.push(msg.charCodeAt(i));
    }
  } else if (!Array.isArray(bytes)) {
    // Convert Array-like to Array
    bytes = Array.prototype.slice.call(bytes);
  }

  bytes.push(0x80);
  const l = bytes.length / 4 + 2;
  const N = Math.ceil(l / 16);
  const M = new Array(N);

  for (let i = 0; i < N; ++i) {
    const arr = new Uint32Array(16);

    for (let j = 0; j < 16; ++j) {
      arr[j] = bytes[i * 64 + j * 4] << 24 | bytes[i * 64 + j * 4 + 1] << 16 | bytes[i * 64 + j * 4 + 2] << 8 | bytes[i * 64 + j * 4 + 3];
    }

    M[i] = arr;
  }

  M[N - 1][14] = (bytes.length - 1) * 8 / Math.pow(2, 32);
  M[N - 1][14] = Math.floor(M[N - 1][14]);
  M[N - 1][15] = (bytes.length - 1) * 8 & 0xffffffff;

  for (let i = 0; i < N; ++i) {
    const W = new Uint32Array(80);

    for (let t = 0; t < 16; ++t) {
      W[t] = M[i][t];
    }

    for (let t = 16; t < 80; ++t) {
      W[t] = ROTL(W[t - 3] ^ W[t - 8] ^ W[t - 14] ^ W[t - 16], 1);
    }

    let a = H[0];
    let b = H[1];
    let c = H[2];
    let d = H[3];
    let e = H[4];

    for (let t = 0; t < 80; ++t) {
      const s = Math.floor(t / 20);
      const T = ROTL(a, 5) + f(s, b, c, d) + e + K[s] + W[t] >>> 0;
      e = d;
      d = c;
      c = ROTL(b, 30) >>> 0;
      b = a;
      a = T;
    }

    H[0] = H[0] + a >>> 0;
    H[1] = H[1] + b >>> 0;
    H[2] = H[2] + c >>> 0;
    H[3] = H[3] + d >>> 0;
    H[4] = H[4] + e >>> 0;
  }

  return [H[0] >> 24 & 0xff, H[0] >> 16 & 0xff, H[0] >> 8 & 0xff, H[0] & 0xff, H[1] >> 24 & 0xff, H[1] >> 16 & 0xff, H[1] >> 8 & 0xff, H[1] & 0xff, H[2] >> 24 & 0xff, H[2] >> 16 & 0xff, H[2] >> 8 & 0xff, H[2] & 0xff, H[3] >> 24 & 0xff, H[3] >> 16 & 0xff, H[3] >> 8 & 0xff, H[3] & 0xff, H[4] >> 24 & 0xff, H[4] >> 16 & 0xff, H[4] >> 8 & 0xff, H[4] & 0xff];
}

var _default = sha1;
exports["default"] = _default;

/***/ }),

/***/ "./node_modules/uuid/dist/commonjs-browser/stringify.js":
/*!**************************************************************!*\
  !*** ./node_modules/uuid/dist/commonjs-browser/stringify.js ***!
  \**************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";


Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports["default"] = void 0;
exports.unsafeStringify = unsafeStringify;

var _validate = _interopRequireDefault(__webpack_require__(/*! ./validate.js */ "./node_modules/uuid/dist/commonjs-browser/validate.js"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/**
 * Convert array of 16 byte values to UUID string format of the form:
 * XXXXXXXX-XXXX-XXXX-XXXX-XXXXXXXXXXXX
 */
const byteToHex = [];

for (let i = 0; i < 256; ++i) {
  byteToHex.push((i + 0x100).toString(16).slice(1));
}

function unsafeStringify(arr, offset = 0) {
  // Note: Be careful editing this code!  It's been tuned for performance
  // and works in ways you may not expect. See https://github.com/uuidjs/uuid/pull/434
  return byteToHex[arr[offset + 0]] + byteToHex[arr[offset + 1]] + byteToHex[arr[offset + 2]] + byteToHex[arr[offset + 3]] + '-' + byteToHex[arr[offset + 4]] + byteToHex[arr[offset + 5]] + '-' + byteToHex[arr[offset + 6]] + byteToHex[arr[offset + 7]] + '-' + byteToHex[arr[offset + 8]] + byteToHex[arr[offset + 9]] + '-' + byteToHex[arr[offset + 10]] + byteToHex[arr[offset + 11]] + byteToHex[arr[offset + 12]] + byteToHex[arr[offset + 13]] + byteToHex[arr[offset + 14]] + byteToHex[arr[offset + 15]];
}

function stringify(arr, offset = 0) {
  const uuid = unsafeStringify(arr, offset); // Consistency check for valid UUID.  If this throws, it's likely due to one
  // of the following:
  // - One or more input array values don't map to a hex octet (leading to
  // "undefined" in the uuid)
  // - Invalid input values for the RFC `version` or `variant` fields

  if (!(0, _validate.default)(uuid)) {
    throw TypeError('Stringified UUID is invalid');
  }

  return uuid;
}

var _default = stringify;
exports["default"] = _default;

/***/ }),

/***/ "./node_modules/uuid/dist/commonjs-browser/v1.js":
/*!*******************************************************!*\
  !*** ./node_modules/uuid/dist/commonjs-browser/v1.js ***!
  \*******************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";


Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports["default"] = void 0;

var _rng = _interopRequireDefault(__webpack_require__(/*! ./rng.js */ "./node_modules/uuid/dist/commonjs-browser/rng.js"));

var _stringify = __webpack_require__(/*! ./stringify.js */ "./node_modules/uuid/dist/commonjs-browser/stringify.js");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

// **`v1()` - Generate time-based UUID**
//
// Inspired by https://github.com/LiosK/UUID.js
// and http://docs.python.org/library/uuid.html
let _nodeId;

let _clockseq; // Previous uuid creation time


let _lastMSecs = 0;
let _lastNSecs = 0; // See https://github.com/uuidjs/uuid for API details

function v1(options, buf, offset) {
  let i = buf && offset || 0;
  const b = buf || new Array(16);
  options = options || {};
  let node = options.node || _nodeId;
  let clockseq = options.clockseq !== undefined ? options.clockseq : _clockseq; // node and clockseq need to be initialized to random values if they're not
  // specified.  We do this lazily to minimize issues related to insufficient
  // system entropy.  See #189

  if (node == null || clockseq == null) {
    const seedBytes = options.random || (options.rng || _rng.default)();

    if (node == null) {
      // Per 4.5, create and 48-bit node id, (47 random bits + multicast bit = 1)
      node = _nodeId = [seedBytes[0] | 0x01, seedBytes[1], seedBytes[2], seedBytes[3], seedBytes[4], seedBytes[5]];
    }

    if (clockseq == null) {
      // Per 4.2.2, randomize (14 bit) clockseq
      clockseq = _clockseq = (seedBytes[6] << 8 | seedBytes[7]) & 0x3fff;
    }
  } // UUID timestamps are 100 nano-second units since the Gregorian epoch,
  // (1582-10-15 00:00).  JSNumbers aren't precise enough for this, so
  // time is handled internally as 'msecs' (integer milliseconds) and 'nsecs'
  // (100-nanoseconds offset from msecs) since unix epoch, 1970-01-01 00:00.


  let msecs = options.msecs !== undefined ? options.msecs : Date.now(); // Per 4.2.1.2, use count of uuid's generated during the current clock
  // cycle to simulate higher resolution clock

  let nsecs = options.nsecs !== undefined ? options.nsecs : _lastNSecs + 1; // Time since last uuid creation (in msecs)

  const dt = msecs - _lastMSecs + (nsecs - _lastNSecs) / 10000; // Per 4.2.1.2, Bump clockseq on clock regression

  if (dt < 0 && options.clockseq === undefined) {
    clockseq = clockseq + 1 & 0x3fff;
  } // Reset nsecs if clock regresses (new clockseq) or we've moved onto a new
  // time interval


  if ((dt < 0 || msecs > _lastMSecs) && options.nsecs === undefined) {
    nsecs = 0;
  } // Per 4.2.1.2 Throw error if too many uuids are requested


  if (nsecs >= 10000) {
    throw new Error("uuid.v1(): Can't create more than 10M uuids/sec");
  }

  _lastMSecs = msecs;
  _lastNSecs = nsecs;
  _clockseq = clockseq; // Per 4.1.4 - Convert from unix epoch to Gregorian epoch

  msecs += 12219292800000; // `time_low`

  const tl = ((msecs & 0xfffffff) * 10000 + nsecs) % 0x100000000;
  b[i++] = tl >>> 24 & 0xff;
  b[i++] = tl >>> 16 & 0xff;
  b[i++] = tl >>> 8 & 0xff;
  b[i++] = tl & 0xff; // `time_mid`

  const tmh = msecs / 0x100000000 * 10000 & 0xfffffff;
  b[i++] = tmh >>> 8 & 0xff;
  b[i++] = tmh & 0xff; // `time_high_and_version`

  b[i++] = tmh >>> 24 & 0xf | 0x10; // include version

  b[i++] = tmh >>> 16 & 0xff; // `clock_seq_hi_and_reserved` (Per 4.2.2 - include variant)

  b[i++] = clockseq >>> 8 | 0x80; // `clock_seq_low`

  b[i++] = clockseq & 0xff; // `node`

  for (let n = 0; n < 6; ++n) {
    b[i + n] = node[n];
  }

  return buf || (0, _stringify.unsafeStringify)(b);
}

var _default = v1;
exports["default"] = _default;

/***/ }),

/***/ "./node_modules/uuid/dist/commonjs-browser/v3.js":
/*!*******************************************************!*\
  !*** ./node_modules/uuid/dist/commonjs-browser/v3.js ***!
  \*******************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";


Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports["default"] = void 0;

var _v = _interopRequireDefault(__webpack_require__(/*! ./v35.js */ "./node_modules/uuid/dist/commonjs-browser/v35.js"));

var _md = _interopRequireDefault(__webpack_require__(/*! ./md5.js */ "./node_modules/uuid/dist/commonjs-browser/md5.js"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

const v3 = (0, _v.default)('v3', 0x30, _md.default);
var _default = v3;
exports["default"] = _default;

/***/ }),

/***/ "./node_modules/uuid/dist/commonjs-browser/v35.js":
/*!********************************************************!*\
  !*** ./node_modules/uuid/dist/commonjs-browser/v35.js ***!
  \********************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";


Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports.URL = exports.DNS = void 0;
exports["default"] = v35;

var _stringify = __webpack_require__(/*! ./stringify.js */ "./node_modules/uuid/dist/commonjs-browser/stringify.js");

var _parse = _interopRequireDefault(__webpack_require__(/*! ./parse.js */ "./node_modules/uuid/dist/commonjs-browser/parse.js"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function stringToBytes(str) {
  str = unescape(encodeURIComponent(str)); // UTF8 escape

  const bytes = [];

  for (let i = 0; i < str.length; ++i) {
    bytes.push(str.charCodeAt(i));
  }

  return bytes;
}

const DNS = '6ba7b810-9dad-11d1-80b4-00c04fd430c8';
exports.DNS = DNS;
const URL = '6ba7b811-9dad-11d1-80b4-00c04fd430c8';
exports.URL = URL;

function v35(name, version, hashfunc) {
  function generateUUID(value, namespace, buf, offset) {
    var _namespace;

    if (typeof value === 'string') {
      value = stringToBytes(value);
    }

    if (typeof namespace === 'string') {
      namespace = (0, _parse.default)(namespace);
    }

    if (((_namespace = namespace) === null || _namespace === void 0 ? void 0 : _namespace.length) !== 16) {
      throw TypeError('Namespace must be array-like (16 iterable integer values, 0-255)');
    } // Compute hash of namespace and value, Per 4.3
    // Future: Use spread syntax when supported on all platforms, e.g. `bytes =
    // hashfunc([...namespace, ... value])`


    let bytes = new Uint8Array(16 + value.length);
    bytes.set(namespace);
    bytes.set(value, namespace.length);
    bytes = hashfunc(bytes);
    bytes[6] = bytes[6] & 0x0f | version;
    bytes[8] = bytes[8] & 0x3f | 0x80;

    if (buf) {
      offset = offset || 0;

      for (let i = 0; i < 16; ++i) {
        buf[offset + i] = bytes[i];
      }

      return buf;
    }

    return (0, _stringify.unsafeStringify)(bytes);
  } // Function#name is not settable on some platforms (#270)


  try {
    generateUUID.name = name; // eslint-disable-next-line no-empty
  } catch (err) {} // For CommonJS default export support


  generateUUID.DNS = DNS;
  generateUUID.URL = URL;
  return generateUUID;
}

/***/ }),

/***/ "./node_modules/uuid/dist/commonjs-browser/v4.js":
/*!*******************************************************!*\
  !*** ./node_modules/uuid/dist/commonjs-browser/v4.js ***!
  \*******************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";


Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports["default"] = void 0;

var _native = _interopRequireDefault(__webpack_require__(/*! ./native.js */ "./node_modules/uuid/dist/commonjs-browser/native.js"));

var _rng = _interopRequireDefault(__webpack_require__(/*! ./rng.js */ "./node_modules/uuid/dist/commonjs-browser/rng.js"));

var _stringify = __webpack_require__(/*! ./stringify.js */ "./node_modules/uuid/dist/commonjs-browser/stringify.js");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function v4(options, buf, offset) {
  if (_native.default.randomUUID && !buf && !options) {
    return _native.default.randomUUID();
  }

  options = options || {};

  const rnds = options.random || (options.rng || _rng.default)(); // Per 4.4, set bits for version and `clock_seq_hi_and_reserved`


  rnds[6] = rnds[6] & 0x0f | 0x40;
  rnds[8] = rnds[8] & 0x3f | 0x80; // Copy bytes to buffer, if provided

  if (buf) {
    offset = offset || 0;

    for (let i = 0; i < 16; ++i) {
      buf[offset + i] = rnds[i];
    }

    return buf;
  }

  return (0, _stringify.unsafeStringify)(rnds);
}

var _default = v4;
exports["default"] = _default;

/***/ }),

/***/ "./node_modules/uuid/dist/commonjs-browser/v5.js":
/*!*******************************************************!*\
  !*** ./node_modules/uuid/dist/commonjs-browser/v5.js ***!
  \*******************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";


Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports["default"] = void 0;

var _v = _interopRequireDefault(__webpack_require__(/*! ./v35.js */ "./node_modules/uuid/dist/commonjs-browser/v35.js"));

var _sha = _interopRequireDefault(__webpack_require__(/*! ./sha1.js */ "./node_modules/uuid/dist/commonjs-browser/sha1.js"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

const v5 = (0, _v.default)('v5', 0x50, _sha.default);
var _default = v5;
exports["default"] = _default;

/***/ }),

/***/ "./node_modules/uuid/dist/commonjs-browser/validate.js":
/*!*************************************************************!*\
  !*** ./node_modules/uuid/dist/commonjs-browser/validate.js ***!
  \*************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";


Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports["default"] = void 0;

var _regex = _interopRequireDefault(__webpack_require__(/*! ./regex.js */ "./node_modules/uuid/dist/commonjs-browser/regex.js"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function validate(uuid) {
  return typeof uuid === 'string' && _regex.default.test(uuid);
}

var _default = validate;
exports["default"] = _default;

/***/ }),

/***/ "./node_modules/uuid/dist/commonjs-browser/version.js":
/*!************************************************************!*\
  !*** ./node_modules/uuid/dist/commonjs-browser/version.js ***!
  \************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";


Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports["default"] = void 0;

var _validate = _interopRequireDefault(__webpack_require__(/*! ./validate.js */ "./node_modules/uuid/dist/commonjs-browser/validate.js"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function version(uuid) {
  if (!(0, _validate.default)(uuid)) {
    throw TypeError('Invalid UUID');
  }

  return parseInt(uuid.slice(14, 15), 16);
}

var _default = version;
exports["default"] = _default;

/***/ }),

/***/ "./node_modules/@iabgpp/stub/lib/stub.js":
/*!***********************************************!*\
  !*** ./node_modules/@iabgpp/stub/lib/stub.js ***!
  \***********************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
window.__gpp_addFrame=function(e){if(!window.frames[e])if(document.body){var t=document.createElement("iframe");t.style.cssText="display:none",t.name=e,document.body.appendChild(t)}else window.setTimeout(window.__gpp_addFrame,10,e)},window.__gpp_stub=function(){var e=arguments;if(__gpp.queue=__gpp.queue||[],__gpp.events=__gpp.events||[],!e.length||1==e.length&&"queue"==e[0])return __gpp.queue;if(1==e.length&&"events"==e[0])return __gpp.events;var t=e[0],p=e.length>1?e[1]:null,s=e.length>2?e[2]:null;if("ping"===t)p({gppVersion:"1.1",cmpStatus:"stub",cmpDisplayStatus:"hidden",signalStatus:"not ready",supportedAPIs:["2:tcfeuv2","5:tcfcav1","6:uspv1","7:usnatv1","8:uscav1","9:usvav1","10:uscov1","11:usutv1","12:usctv1"],cmpId:0,sectionList:[],applicableSections:[],gppString:"",parsedSections:{}},!0);else if("addEventListener"===t){"lastId"in __gpp||(__gpp.lastId=0),__gpp.lastId++;var n=__gpp.lastId;__gpp.events.push({id:n,callback:p,parameter:s}),p({eventName:"listenerRegistered",listenerId:n,data:!0,pingData:{gppVersion:"1.1",cmpStatus:"stub",cmpDisplayStatus:"hidden",signalStatus:"not ready",supportedAPIs:["2:tcfeuv2","5:tcfcav1","6:uspv1","7:usnatv1","8:uscav1","9:usvav1","10:uscov1","11:usutv1","12:usctv1"],cmpId:0,sectionList:[],applicableSections:[],gppString:"",parsedSections:{}}},!0)}else if("removeEventListener"===t){for(var a=!1,i=0;i<__gpp.events.length;i++)if(__gpp.events[i].id==s){__gpp.events.splice(i,1),a=!0;break}p({eventName:"listenerRemoved",listenerId:s,data:a,pingData:{gppVersion:"1.1",cmpStatus:"stub",cmpDisplayStatus:"hidden",signalStatus:"not ready",supportedAPIs:["2:tcfeuv2","5:tcfcav1","6:uspv1","7:usnatv1","8:uscav1","9:usvav1","10:uscov1","11:usutv1","12:usctv1"],cmpId:0,sectionList:[],applicableSections:[],gppString:"",parsedSections:{}}},!0)}else"hasSection"===t?p(!1,!0):"getSection"===t||"getField"===t?p(null,!0):__gpp.queue.push([].slice.apply(e))},window.__gpp_msghandler=function(e){var t="string"==typeof e.data;try{var p=t?JSON.parse(e.data):e.data}catch(e){p=null}if("object"==typeof p&&null!==p&&"__gppCall"in p){var s=p.__gppCall;window.__gpp(s.command,(function(p,n){var a={__gppReturn:{returnValue:p,success:n,callId:s.callId}};e.source.postMessage(t?JSON.stringify(a):a,"*")}),"parameter"in s?s.parameter:null,"version"in s?s.version:"1.1")}},"__gpp"in window&&"function"==typeof window.__gpp||(window.__gpp=window.__gpp_stub,window.addEventListener("message",window.__gpp_msghandler,!1),window.__gpp_addFrame("__gppLocator"));

/***/ })

/******/ 	});
/************************************************************************/
/******/ 	// The module cache
/******/ 	var __webpack_module_cache__ = {};
/******/ 	
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/ 		// Check if module is in cache
/******/ 		var cachedModule = __webpack_module_cache__[moduleId];
/******/ 		if (cachedModule !== undefined) {
/******/ 			return cachedModule.exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = __webpack_module_cache__[moduleId] = {
/******/ 			id: moduleId,
/******/ 			// no module.loaded needed
/******/ 			exports: {}
/******/ 		};
/******/ 	
/******/ 		// Execute the module function
/******/ 		__webpack_modules__[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/ 	
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/ 	
/************************************************************************/
/******/ 	/* webpack/runtime/amd options */
/******/ 	(() => {
/******/ 		__webpack_require__.amdO = {};
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/compat get default export */
/******/ 	(() => {
/******/ 		// getDefaultExport function for compatibility with non-harmony modules
/******/ 		__webpack_require__.n = (module) => {
/******/ 			var getter = module && module.__esModule ?
/******/ 				() => (module['default']) :
/******/ 				() => (module);
/******/ 			__webpack_require__.d(getter, { a: getter });
/******/ 			return getter;
/******/ 		};
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/define property getters */
/******/ 	(() => {
/******/ 		// define getter functions for harmony exports
/******/ 		__webpack_require__.d = (exports, definition) => {
/******/ 			for(var key in definition) {
/******/ 				if(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {
/******/ 					Object.defineProperty(exports, key, { enumerable: true, get: definition[key] });
/******/ 				}
/******/ 			}
/******/ 		};
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/hasOwnProperty shorthand */
/******/ 	(() => {
/******/ 		__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/make namespace object */
/******/ 	(() => {
/******/ 		// define __esModule on exports
/******/ 		__webpack_require__.r = (exports) => {
/******/ 			if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 				Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 			}
/******/ 			Object.defineProperty(exports, '__esModule', { value: true });
/******/ 		};
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/nonce */
/******/ 	(() => {
/******/ 		__webpack_require__.nc = undefined;
/******/ 	})();
/******/ 	
/************************************************************************/
/******/ 	
/******/ 	// startup
/******/ 	// Load entry module and return exports
/******/ 	// This entry module is referenced by other modules so it can't be inlined
/******/ 	var __webpack_exports__ = __webpack_require__("./src/index.ts");
/******/ 	
/******/ })()
;
//# sourceMappingURL=main.js.map